#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package B {
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashpv;
sub warnings;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Debug {
sub cstring;
sub main_root;
sub main_start;
sub sv_undef;
sub walkoptree;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::NV {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub NV;
sub NVX;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
}
package B::OP {
sub desc;
sub flags;
sub name;
sub next;
sub oplist;
sub opt;
sub ppaddr;
sub private;
sub sibling;
sub size;
sub spare;
sub targ;
sub type;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub pmflags;
sub pmoffset;
sub pmreplroot;
sub pmreplstart;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub precomp;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::Utils {
sub anon_sub;
sub blessed($) ;
sub main_cv;
sub main_root;
sub main_start;
sub ppname;
sub shuffle(@) ;
sub weaken($) ;
}
package BerkeleyDB {
sub _db_remove;
sub _db_rename;
sub _db_verify;
sub constant;
sub db_value_set;
sub db_version;
sub has_heap;
}
package BerkeleyDB::Btree {
sub _db_open_btree;
sub db_stat;
}
package BerkeleyDB::Common {
sub ArrayOffset;
sub _DESTROY;
sub _Txn;
sub __db_write_cursor;
sub _db_cursor;
sub _db_join;
sub associate;
sub associate_foreign;
sub byteswapped;
sub cds_enabled;
sub compact;
sub db_close;
sub db_create_sequence;
sub db_del;
sub db_exists;
sub db_fd;
sub db_get;
sub db_key_range;
sub db_pget;
sub db_put;
sub db_sync;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub partial_clear;
sub partial_set;
sub stat_print;
sub status;
sub truncate;
sub type;
}
package BerkeleyDB::Cursor {
sub _DESTROY;
sub _c_close;
sub _c_dup;
sub c_count;
sub c_del;
sub c_get;
sub c_pget;
sub c_put;
sub status;
}
package BerkeleyDB::Env {
sub DB_ENV;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub _DESTROY;
sub _TxnMgr;
sub _db_appinit;
sub _txn_begin;
sub cds_enabled;
sub close;
sub create;
sub db_appexit;
sub errPrefix;
sub failchk;
sub get_shm_key;
sub get_timeout;
sub lock_detect;
sub lock_stat_print;
sub log_archive;
sub log_get_config;
sub log_set_config;
sub lsn_reset;
sub mutex_stat_print;
sub open;
sub printEnv;
sub set_data_dir;
sub set_encrypt;
sub set_flags;
sub set_isalive;
sub set_lg_bsize;
sub set_lg_dir;
sub set_lg_max;
sub set_mutexlocks;
sub set_timeout;
sub set_tmp_dir;
sub set_verbose;
sub stat_print;
sub status;
sub txn_checkpoint;
sub txn_stat;
sub txn_stat_print;
}
package BerkeleyDB::Hash {
sub _db_open_hash;
sub db_stat;
}
package BerkeleyDB::Heap {
sub _db_open_heap;
}
package BerkeleyDB::Queue {
sub _db_open_queue;
sub db_stat;
}
package BerkeleyDB::Recno {
sub _db_open_recno;
sub db_stat;
}
package BerkeleyDB::Sequence {
sub DESTROY;
sub close;
sub get;
sub get_cachesize;
sub get_flags;
sub get_key;
sub initial_value;
sub open;
sub remove;
sub set_cachesize;
sub set_flags;
sub set_range;
sub stat;
}
package BerkeleyDB::Term {
sub close_everything;
sub safeCroak;
}
package BerkeleyDB::Txn {
sub _DESTROY;
sub _txn_abort;
sub _txn_commit;
sub _txn_discard;
sub get_tx_max;
sub set_timeout;
sub set_tx_max;
sub status;
sub txn_id;
sub txn_prepare;
sub txn_unlink;
}
package BerkeleyDB::TxnMgr {
sub _DESTROY;
sub _txn_begin;
sub status;
sub txn_checkpoint;
sub txn_close;
sub txn_open;
sub txn_stat;
}
package BerkeleyDB::Unknown {
sub _db_open_unknown;
}
package BerkeleyDB::_tiedArray {
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub length;
}
package BerkeleyDB::_tiedHash {
sub FIRSTKEY;
sub NEXTKEY;
}
package Carp {
sub _maybe_isa;
sub downgrade;
sub is_utf8;
}
package Class::Load {
sub is_class_loaded;
}
package Class::Load::XS {
sub is_class_loaded;
}
package Class::MOP {
sub blessed($) ;
sub check_package_cache_flag($) ;
sub get_code_info($) ;
sub isweak($) ;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Attribute {
sub associated_class;
sub associated_methods;
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Class {
sub all(&@) ;
sub blessed($) ;
sub constructor_class;
sub constructor_name;
sub destructor_class;
sub immutable_trait;
sub instance_metaclass;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub weaken($) ;
}
package Class::MOP::Class::Immutable::Trait {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Instance {
sub associated_metaclass;
sub blessed($) ;
sub isweak($) ;
sub slot_hash;
sub slots;
sub weaken($) ;
}
package Class::MOP::Method {
sub blessed($) ;
sub body;
sub is_stub;
sub name;
sub package_name;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Method::Accessor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Constructor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Generated {
sub definition_context;
sub is_inline;
}
package Class::MOP::Method::Inlined {
sub _expected_method_class;
sub blessed($) ;
sub looks_like_number($) ;
sub refaddr($) ;
sub weaken($) ;
}
package Class::MOP::Method::Meta {
sub blessed($) ;
}
package Class::MOP::Method::Wrapped {
sub blessed($) ;
}
package Class::MOP::Mixin {
sub blessed($) ;
}
package Class::MOP::Mixin::AttributeCore {
sub accessor;
sub blessed($) ;
sub builder;
sub clearer;
sub definition_context;
sub init_arg;
sub initializer;
sub insertion_order;
sub name;
sub predicate;
sub reader;
sub writer;
}
package Class::MOP::Mixin::HasAttributes {
sub _attribute_map;
sub attribute_metaclass;
sub blessed($) ;
}
package Class::MOP::Mixin::HasMethods {
sub _method_map;
sub blessed($) ;
sub method_metaclass;
sub subname;
sub wrapped_method_metaclass;
}
package Class::MOP::Module {
sub blessed($) ;
}
package Class::MOP::Object {
sub blessed($) ;
}
package Class::MOP::Package {
sub blessed($) ;
sub name;
sub reftype($) ;
sub weaken($) ;
}
package Class::XSAccessor {
sub __entersub_optimized__() ;
sub _newxs_compat_accessor;
sub _newxs_compat_setter;
sub accessor;
sub accessor_init;
sub array_accessor;
sub array_accessor_init;
sub array_setter;
sub array_setter_init;
sub chained_accessor;
sub chained_accessor_init;
sub chained_setter;
sub chained_setter_init;
sub constant_false;
sub constant_false_init;
sub constant_true;
sub constant_true_init;
sub constructor;
sub constructor_init;
sub getter;
sub getter_init;
sub lvalue_accessor;
sub lvalue_accessor_init;
sub newxs_accessor;
sub newxs_boolean;
sub newxs_constructor;
sub newxs_getter;
sub newxs_lvalue_accessor;
sub newxs_predicate;
sub newxs_setter;
sub newxs_test;
sub predicate;
sub predicate_init;
sub setter;
sub setter_init;
sub test;
sub test_init;
}
package Class::XSAccessor::Array {
sub accessor;
sub accessor_init;
sub chained_accessor;
sub chained_accessor_init;
sub chained_setter;
sub chained_setter_init;
sub constructor;
sub constructor_init;
sub getter;
sub getter_init;
sub lvalue_accessor;
sub lvalue_accessor_init;
sub newxs_accessor;
sub newxs_constructor;
sub newxs_getter;
sub newxs_lvalue_accessor;
sub newxs_predicate;
sub newxs_setter;
sub predicate;
sub predicate_init;
sub setter;
sub setter_init;
}
package Clone {
sub clone($;$) ;
}
package Compress::Bzip2 {
sub DESTROY($) ;
sub FD_CLOEXEC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub S_ENFMT() ;
sub S_IFLNK() ;
sub S_IFMT;
sub S_IFSOCK() ;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISENFMT;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
sub S_ISVTX() ;
sub S_ISWHT;
sub bz_seterror($$) ;
sub bzclearerr($) ;
sub bzclose($;$) ;
sub bzdeflate($$) ;
sub bzdeflateInit(@) ;
sub bzeof($) ;
sub bzerror($) ;
sub bzflush($;$) ;
sub bzinflate($$) ;
sub bzinflateInit(@) ;
sub bzlibversion() ;
sub bzopen($$;$) ;
sub bzread($$;$) ;
sub bzreadline($$;$) ;
sub bzsetparams($$;$) ;
sub bzwrite($$;$) ;
sub compress($;$) ;
sub compress_init(@) ;
sub constant;
sub decompress($) ;
sub decompress_init(@) ;
sub is_read($) ;
sub is_stream($) ;
sub is_write($) ;
sub memBunzip($) ;
sub memBzip($;$) ;
sub new(@) ;
sub prefix($) ;
sub total_in($) ;
sub total_out($) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Lzma {
sub LZMA_BACKWARD_SIZE_MAX;
sub LZMA_FILTER_LZMA1;
sub blessed($) ;
sub constant;
sub lzma_alone_decoder;
sub lzma_alone_encoder;
sub lzma_auto_decoder;
sub lzma_check_is_supported;
sub lzma_check_size;
sub lzma_easy_decoder_memusage;
sub lzma_easy_encoder;
sub lzma_easy_encoder_memusage;
sub lzma_filter_decoder_is_supported;
sub lzma_filter_encoder_is_supported;
sub lzma_mf_is_supported;
sub lzma_mode_is_supported;
sub lzma_raw_decoder;
sub lzma_raw_encoder;
sub lzma_stream_buffer_bound;
sub lzma_stream_decoder;
sub lzma_stream_encoder;
sub lzma_version_number;
sub lzma_version_string;
}
package Compress::Raw::Lzma::Decoder {
sub DESTROY;
sub code;
sub compressedBytes;
sub uncompressedBytes;
}
package Compress::Raw::Lzma::Encoder {
sub DESTROY;
sub code;
sub compressedBytes;
sub flush;
sub uncompressedBytes;
}
package Compress::Raw::Lzma::Options {
sub DESTROY;
sub lzma_lzma_preset;
sub new;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::unLZMA {
sub uncompressdata;
sub uncompressfile;
}
package Config {
sub AUTOLOAD;
}
package Crypt::Blowfish {
sub crypt;
sub init;
}
package Crypt::DES {
sub crypt;
sub expand_key;
}
package Crypt::IDEA {
sub crypt;
sub expand_key;
sub invert_key;
}
package Crypt::RIPEMD160 {
sub DESTROY;
sub add;
sub digest;
sub new;
sub reset;
}
package Crypt::Rijndael {
sub DESTROY($) ;
sub decrypt($$) ;
sub encrypt($$) ;
sub new($$;$) ;
sub set_iv($$) ;
}
package Crypt::SSLeay::CTX {
sub check_private_key;
sub free;
sub new;
sub set_cipher_list;
sub set_verify;
sub use_PrivateKey_file;
sub use_certificate_file;
sub use_pkcs12_file;
}
package Crypt::SSLeay::Conn {
sub accept;
sub connect;
sub free;
sub get_cipher;
sub get_peer_certificate;
sub get_shared_ciphers;
sub get_verify_result;
sub new;
sub read;
sub set_fd;
sub write;
}
package Crypt::SSLeay::Err {
sub get_error_string;
}
package Crypt::SSLeay::X509 {
sub free;
sub get_notAfterString;
sub get_notBeforeString;
sub issuer_name;
sub subject_name;
}
package Crypt::Twofish {
sub DESTROY;
sub crypt;
sub setup;
}
package Cwd {
sub getdcwd(;@) ;
}
package DBD::ODBC::db {
sub DESTROY;
sub FETCH;
sub GetFunctions;
sub STORE;
sub _ExecDirect;
sub _GetForeignKeys;
sub _GetInfo;
sub _GetPrimaryKeys;
sub _GetSpecialColumns;
sub _GetStatistics;
sub _GetTypeInfo;
sub _columns;
sub _login;
sub commit;
sub disconnect;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
}
package DBD::ODBC::dr {
sub data_sources($;$) ;
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::ODBC::st {
sub DESTROY;
sub DescribeCol;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _Cancel;
sub _ColAttributes;
sub _prepare;
sub _primary_keys;
sub _statistics;
sub _tables;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub odbc_lob_read($$$$;$) ;
sub rows;
}
package DBD::Pg {
sub PG_ABSTIME() ;
sub PG_ABSTIMEARRAY() ;
sub PG_ACLITEM() ;
sub PG_ACLITEMARRAY() ;
sub PG_ANY() ;
sub PG_ANYARRAY() ;
sub PG_ANYELEMENT() ;
sub PG_ANYENUM() ;
sub PG_ANYNONARRAY() ;
sub PG_ASYNC() ;
sub PG_BIT() ;
sub PG_BITARRAY() ;
sub PG_BOOL() ;
sub PG_BOOLARRAY() ;
sub PG_BOX() ;
sub PG_BOXARRAY() ;
sub PG_BPCHAR() ;
sub PG_BPCHARARRAY() ;
sub PG_BYTEA() ;
sub PG_BYTEAARRAY() ;
sub PG_CHAR() ;
sub PG_CHARARRAY() ;
sub PG_CID() ;
sub PG_CIDARRAY() ;
sub PG_CIDR() ;
sub PG_CIDRARRAY() ;
sub PG_CIRCLE() ;
sub PG_CIRCLEARRAY() ;
sub PG_CSTRING() ;
sub PG_CSTRINGARRAY() ;
sub PG_DATE() ;
sub PG_DATEARRAY() ;
sub PG_FDW_HANDLER() ;
sub PG_FLOAT4() ;
sub PG_FLOAT4ARRAY() ;
sub PG_FLOAT8() ;
sub PG_FLOAT8ARRAY() ;
sub PG_GTSVECTOR() ;
sub PG_GTSVECTORARRAY() ;
sub PG_INET() ;
sub PG_INETARRAY() ;
sub PG_INT2() ;
sub PG_INT2ARRAY() ;
sub PG_INT2VECTOR() ;
sub PG_INT2VECTORARRAY() ;
sub PG_INT4() ;
sub PG_INT4ARRAY() ;
sub PG_INT8() ;
sub PG_INT8ARRAY() ;
sub PG_INTERNAL() ;
sub PG_INTERVAL() ;
sub PG_INTERVALARRAY() ;
sub PG_LANGUAGE_HANDLER() ;
sub PG_LINE() ;
sub PG_LINEARRAY() ;
sub PG_LSEG() ;
sub PG_LSEGARRAY() ;
sub PG_MACADDR() ;
sub PG_MACADDRARRAY() ;
sub PG_MONEY() ;
sub PG_MONEYARRAY() ;
sub PG_NAME() ;
sub PG_NAMEARRAY() ;
sub PG_NUMERIC() ;
sub PG_NUMERICARRAY() ;
sub PG_OID() ;
sub PG_OIDARRAY() ;
sub PG_OIDVECTOR() ;
sub PG_OIDVECTORARRAY() ;
sub PG_OLDQUERY_CANCEL() ;
sub PG_OLDQUERY_WAIT() ;
sub PG_OPAQUE() ;
sub PG_PATH() ;
sub PG_PATHARRAY() ;
sub PG_PG_ATTRIBUTE() ;
sub PG_PG_CLASS() ;
sub PG_PG_NODE_TREE() ;
sub PG_PG_PROC() ;
sub PG_PG_TYPE() ;
sub PG_POINT() ;
sub PG_POINTARRAY() ;
sub PG_POLYGON() ;
sub PG_POLYGONARRAY() ;
sub PG_RECORD() ;
sub PG_RECORDARRAY() ;
sub PG_REFCURSOR() ;
sub PG_REFCURSORARRAY() ;
sub PG_REGCLASS() ;
sub PG_REGCLASSARRAY() ;
sub PG_REGCONFIG() ;
sub PG_REGCONFIGARRAY() ;
sub PG_REGDICTIONARY() ;
sub PG_REGDICTIONARYARRAY() ;
sub PG_REGOPER() ;
sub PG_REGOPERARRAY() ;
sub PG_REGOPERATOR() ;
sub PG_REGOPERATORARRAY() ;
sub PG_REGPROC() ;
sub PG_REGPROCARRAY() ;
sub PG_REGPROCEDURE() ;
sub PG_REGPROCEDUREARRAY() ;
sub PG_REGTYPE() ;
sub PG_REGTYPEARRAY() ;
sub PG_RELTIME() ;
sub PG_RELTIMEARRAY() ;
sub PG_SMGR() ;
sub PG_TEXT() ;
sub PG_TEXTARRAY() ;
sub PG_TID() ;
sub PG_TIDARRAY() ;
sub PG_TIME() ;
sub PG_TIMEARRAY() ;
sub PG_TIMESTAMP() ;
sub PG_TIMESTAMPARRAY() ;
sub PG_TIMESTAMPTZ() ;
sub PG_TIMESTAMPTZARRAY() ;
sub PG_TIMETZ() ;
sub PG_TIMETZARRAY() ;
sub PG_TINTERVAL() ;
sub PG_TINTERVALARRAY() ;
sub PG_TRIGGER() ;
sub PG_TSQUERY() ;
sub PG_TSQUERYARRAY() ;
sub PG_TSVECTOR() ;
sub PG_TSVECTORARRAY() ;
sub PG_TXID_SNAPSHOT() ;
sub PG_TXID_SNAPSHOTARRAY() ;
sub PG_UNKNOWN() ;
sub PG_UUID() ;
sub PG_UUIDARRAY() ;
sub PG_VARBIT() ;
sub PG_VARBITARRAY() ;
sub PG_VARCHAR() ;
sub PG_VARCHARARRAY() ;
sub PG_VOID() ;
sub PG_XID() ;
sub PG_XIDARRAY() ;
sub PG_XML() ;
sub PG_XMLARRAY() ;
sub constant() ;
}
package DBD::Pg::db {
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _login;
sub _pg_type_info;
sub _ping;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub endcopy;
sub getfd;
sub getline;
sub lo_close;
sub lo_creat;
sub lo_export;
sub lo_import;
sub lo_lseek;
sub lo_open;
sub lo_read;
sub lo_tell;
sub lo_unlink;
sub lo_write;
sub pg_cancel;
sub pg_endcopy;
sub pg_getcopydata;
sub pg_getcopydata_async;
sub pg_getline;
sub pg_lo_close;
sub pg_lo_creat;
sub pg_lo_export;
sub pg_lo_import;
sub pg_lo_import_with_oid;
sub pg_lo_lseek;
sub pg_lo_open;
sub pg_lo_read;
sub pg_lo_tell;
sub pg_lo_unlink;
sub pg_lo_write;
sub pg_notifies;
sub pg_putcopydata;
sub pg_putcopyend;
sub pg_putline;
sub pg_ready;
sub pg_release;
sub pg_result;
sub pg_rollback_to;
sub pg_savepoint;
sub pg_server_trace;
sub pg_server_untrace;
sub putline;
sub quote;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub state;
}
package DBD::Pg::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::Pg::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub cancel;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub pg_cancel;
sub pg_ready;
sub pg_result;
sub rows;
sub state;
}
package DBD::SQLite {
sub ALTER_TABLE() ;
sub ANALYZE() ;
sub ATTACH() ;
sub CREATE_INDEX() ;
sub CREATE_TABLE() ;
sub CREATE_TEMP_INDEX() ;
sub CREATE_TEMP_TABLE() ;
sub CREATE_TEMP_TRIGGER() ;
sub CREATE_TEMP_VIEW() ;
sub CREATE_TRIGGER() ;
sub CREATE_VIEW() ;
sub CREATE_VTABLE() ;
sub DELETE() ;
sub DENY() ;
sub DETACH() ;
sub DROP_INDEX() ;
sub DROP_TABLE() ;
sub DROP_TEMP_INDEX() ;
sub DROP_TEMP_TABLE() ;
sub DROP_TEMP_TRIGGER() ;
sub DROP_TEMP_VIEW() ;
sub DROP_TRIGGER() ;
sub DROP_VIEW() ;
sub DROP_VTABLE() ;
sub FUNCTION() ;
sub IGNORE() ;
sub INSERT() ;
sub OK() ;
sub PRAGMA() ;
sub READ() ;
sub REINDEX() ;
sub SAVEPOINT() ;
sub SELECT() ;
sub TRANSACTION() ;
sub UPDATE() ;
sub compile_options() ;
}
package DBD::SQLite::db {
sub DESTROY;
sub FETCH;
sub STORE;
sub _login;
sub backup_from_file;
sub backup_to_file;
sub busy_timeout;
sub collation_needed;
sub commit;
sub commit_hook;
sub create_aggregate;
sub create_collation;
sub create_function;
sub disconnect;
sub enable_load_extension;
sub last_insert_id;
sub last_insert_rowid;
sub progress_handler;
sub register_fts3_perl_tokenizer;
sub rollback;
sub rollback_hook;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub set_authorizer;
sub sqlite_backup_from_file;
sub sqlite_backup_to_file;
sub sqlite_busy_timeout;
sub sqlite_collation_needed;
sub sqlite_commit_hook;
sub sqlite_create_aggregate;
sub sqlite_create_collation;
sub sqlite_create_function;
sub sqlite_enable_load_extension;
sub sqlite_last_insert_rowid;
sub sqlite_progress_handler;
sub sqlite_register_fts3_perl_tokenizer;
sub sqlite_rollback_hook;
sub sqlite_set_authorizer;
sub sqlite_update_hook;
sub update_hook;
}
package DBD::SQLite::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::SQLite::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub rows;
}
package DBD::_::common {
sub DESTROY;
sub FETCH;
sub STORE;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub private_data;
sub rows;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
}
package DBD::_::db {
sub connected;
sub preparse;
sub take_imp_data;
}
package DBD::_::dr {
sub dbixs_revision;
}
package DBD::_::st {
sub DESTROY;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub fetch;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub rows;
}
package DBD::_mem::common {
sub DESTROY;
}
package DBD::mysql {
sub constant;
}
package DBD::mysql::GetInfo {
sub dbd_mysql_get_info;
}
package DBD::mysql::db {
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _ListDBs;
sub _async_check;
sub _login;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub last_insert_id;
sub mysql_async_ready;
sub mysql_async_result;
sub mysql_fd;
sub ping($) ;
sub quote($$;$) ;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub type_info_all;
}
package DBD::mysql::dr {
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _ListDBs;
sub _admin_internal;
sub dbixs_revision;
}
package DBD::mysql::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _async_check;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub dataseek($$) ;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub more_results;
sub mysql_async_ready;
sub mysql_async_result;
sub rows;
}
package DBI {
sub DBIpp_cm_XX() ;
sub DBIpp_cm_br() ;
sub DBIpp_cm_cs() ;
sub DBIpp_cm_dd() ;
sub DBIpp_cm_dw() ;
sub DBIpp_cm_hs() ;
sub DBIpp_ph_XX() ;
sub DBIpp_ph_cn() ;
sub DBIpp_ph_cs() ;
sub DBIpp_ph_qm() ;
sub DBIpp_ph_sp() ;
sub DBIpp_st_XX() ;
sub DBIpp_st_bs() ;
sub DBIpp_st_qq() ;
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_CURSOR_DYNAMIC() ;
sub SQL_CURSOR_FORWARD_ONLY() ;
sub SQL_CURSOR_KEYSET_DRIVEN() ;
sub SQL_CURSOR_STATIC() ;
sub SQL_CURSOR_TYPE_DEFAULT() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _clone_dbis;
sub _concat_hash_sorted;
sub _debug_dispatch;
sub _get_imp_data;
sub _handles;
sub _install_method;
sub _new_handle;
sub _setup_handle;
sub _svdump;
sub constant() ;
sub dbi_profile;
sub dbi_profile_merge;
sub dbi_profile_merge_nodes;
sub dbi_time;
sub dump_handle;
sub hash;
sub looks_like_number;
sub neat;
sub set_err;
sub sql_type_cast;
sub trace;
sub trace_msg;
}
package DBI::common {
sub CLEAR;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FETCH_many;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub _not_impl;
sub can;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub func;
sub parse_trace_flag;
sub parse_trace_flags;
sub private_attribute_info;
sub private_data;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
sub visit_child_handles;
}
package DBI::db {
sub TIEHASH;
sub begin_work;
sub clone;
sub column_info;
sub commit;
sub connected;
sub data_sources;
sub disconnect;
sub do;
sub foreign_key_info;
sub get_info;
sub last_insert_id;
sub ping;
sub prepare;
sub prepare_cached;
sub preparse;
sub primary_key;
sub primary_key_info;
sub quote;
sub quote_identifier;
sub rollback;
sub rows;
sub selectall_arrayref;
sub selectall_hashref;
sub selectcol_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub selectrow_hashref;
sub statistics_info;
sub table_info;
sub tables;
sub take_imp_data;
sub type_info;
sub type_info_all;
}
package DBI::dr {
sub TIEHASH;
sub connect;
sub connect_cached;
sub data_sources;
sub dbixs_revision;
sub default_user;
sub disconnect_all;
}
package DBI::st {
sub TIEHASH;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub bind_columns;
sub bind_param;
sub bind_param_array;
sub bind_param_inout;
sub bind_param_inout_array;
sub blob_copy_to_file;
sub blob_read;
sub cancel;
sub dump_results;
sub execute;
sub execute_array;
sub execute_for_fetch;
sub fetch;
sub fetchall_arrayref;
sub fetchall_hashref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub more_results;
sub rows;
}
package DBI::var {
sub FETCH;
}
package DB_File {
sub DELETE;
sub DESTROY;
sub DoTie_;
sub EXISTS;
sub FETCH;
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub POP;
sub PUSH;
sub SHIFT;
sub STORE;
sub UNSHIFT;
sub constant;
sub del;
sub fd;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get;
sub length;
sub pop;
sub push;
sub put;
sub seq;
sub shift;
sub sync;
sub unshift;
}
package Data::Dump::Streamer {
sub SvREADONLY_ref($;$) ;
sub SvREFCNT_ref($;$) ;
sub _could_be_dualvar($) ;
sub _globname($) ;
sub _make_ro($) ;
sub alias_av(\@$$) ;
sub alias_hv(\%$$) ;
sub alias_ref;
sub all_keys(\%\@\@) ;
sub blessed($) ;
sub dualvar($$) ;
sub globname($) ;
sub hidden_keys(\%) ;
sub is_numeric($) ;
sub is_regexp($) ;
sub isweak($) ;
sub legal_keys(\%) ;
sub looks_like_number($) ;
sub make_ro($) ;
sub push_alias(\@$) ;
sub readonly($) ;
sub readonly_set($) ;
sub refaddr($) ;
sub refaddr_or_glob($) ;
sub refcount($) ;
sub reftype($) ;
sub reftype_or_glob($) ;
sub regex($) ;
sub regexp_pattern($) ;
sub sv_refcount($) ;
sub weak_refcount($) ;
sub weaken($) ;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
}
package Data::UUID {
sub CLONE;
sub DESTROY;
sub compare;
sub create;
sub create_b64;
sub create_bin;
sub create_from_name;
sub create_from_name_b64;
sub create_from_name_bin;
sub create_from_name_hex;
sub create_from_name_str;
sub create_hex;
sub create_str;
sub from_b64string;
sub from_hexstring;
sub from_string;
sub new;
sub to_b64string;
sub to_hexstring;
sub to_string;
}
package DateTime {
sub _accumulated_leap_seconds($$) ;
sub _day_has_leap_second($$) ;
sub _day_length($$) ;
sub _is_leap_year($$) ;
sub _normalize_leap_seconds($$$) ;
sub _normalize_tai_seconds($$$) ;
sub _rd2ymd($$;$) ;
sub _seconds_as_components($$;$$) ;
sub _time_as_seconds($$$$) ;
sub _ymd2rd($$$$) ;
sub validate(\@$) ;
sub validate_pos(\@@) ;
}
package DateTime::Duration {
sub validate(\@$) ;
}
package DateTime::Locale {
sub validate(\@$) ;
sub validate_pos(\@@) ;
}
package DateTime::Locale::Base {
sub validate_pos(\@@) ;
}
package DateTime::TimeZone {
sub validate(\@$) ;
sub validate_pos(\@@) ;
}
package DateTime::TimeZone::Local {
sub is_class_loaded;
}
package DateTime::TimeZone::OffsetOnly {
sub validate(\@$) ;
}
package Devel::Caller {
sub _context_cv;
sub _context_op;
}
package Devel::Cover {
sub main_cv;
sub main_root;
sub main_start;
sub ppname;
}
package Devel::Declare {
sub clear_lex_stuff;
sub get_curstash_name;
sub get_in_declare;
sub get_lex_stuff;
sub get_linestr;
sub get_linestr_offset;
sub initialize;
sub set_in_declare;
sub set_linestr;
sub set_prototype(&$) ;
sub setup;
sub toke_move_past_token;
sub toke_scan_ident;
sub toke_scan_str;
sub toke_scan_word;
sub toke_skipspace;
}
package Devel::LexAlias {
sub _lexalias;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT;
sub SvREFCNT_dec;
sub SvREFCNT_inc;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Digest::MD2 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub md2;
sub md2_base64;
sub md2_hex;
sub new;
sub reset;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub B64digest($) ;
sub FD_CLOEXEC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub Hexdigest($) ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub digest($) ;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shaclose($) ;
sub shadump($$) ;
sub shadup($) ;
sub shaload($) ;
sub shaopen($) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::SHA1 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub sha1;
sub sha1_base64;
sub sha1_hex;
sub sha1_transform;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub DIE_ON_ERR() ;
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
sub HTMLCREF() ;
sub LEAVE_SRC() ;
sub PERLQQ() ;
sub RETURN_ON_ERR() ;
sub STOP_AT_PARTIAL() ;
sub WARN_ON_ERR() ;
sub XMLCREF() ;
sub _bytes_to_utf8($;@) ;
sub _utf8_off($) ;
sub _utf8_on($) ;
sub _utf8_to_bytes($;@) ;
sub is_utf8($;$) ;
}
package Encode::CN::HZ {
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
}
package Encode::JP::JIS7 {
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
}
package Encode::KR::2022_KR {
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
}
package Encode::Unicode {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Encode::XS {
sub cat_decode($$$$$;$) ;
sub decode($$;$) ;
sub encode($$;$) ;
sub mime_name($) ;
sub name($) ;
sub needs_lines($) ;
sub perlio_ok($) ;
sub renew($) ;
sub renewed($) ;
}
package Encode::utf8 {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Eval::Closure {
sub reftype($) ;
}
package FCGI {
sub Accept($) ;
sub Attach($) ;
sub CloseSocket($) ;
sub DESTROY;
sub Detach($) ;
sub Finish($) ;
sub Flush($) ;
sub GetEnvironment($) ;
sub GetHandles($) ;
sub IsFastCGI($) ;
sub LastCall($) ;
sub OpenSocket($$) ;
sub RequestX(***$$$) ;
sub StartFilterData($) ;
}
package FCGI::Stream {
sub CLOSE;
sub GETC;
sub PRINT;
sub READ;
sub WRITE;
}
package Fcntl {
sub AUTOLOAD;
sub DN_ACCESS() ;
sub DN_ATTRIB() ;
sub DN_CREATE() ;
sub DN_DELETE() ;
sub DN_MODIFY() ;
sub DN_MULTISHOT() ;
sub DN_RENAME() ;
sub FAPPEND() ;
sub FASYNC() ;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FD_CLOEXEC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FNDELAY() ;
sub FNONBLOCK() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLEASE() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_GETSIG() ;
sub F_NODNY() ;
sub F_NOTIFY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLEASE() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SETSIG() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub LOCK_MAND() ;
sub LOCK_READ() ;
sub LOCK_RW() ;
sub LOCK_WRITE() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOATIME() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NOLINK() ;
sub O_NONBLOCK() ;
sub O_NOTRANS() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub S_ENFMT() ;
sub S_IFLNK() ;
sub S_IFMT;
sub S_IFSOCK() ;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISENFMT;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
sub S_ISVTX() ;
sub S_ISWHT;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub GLOB_ERROR;
sub bsd_glob;
sub doglob($;$) ;
}
package FileHandle {
sub clearerr;
sub error;
sub flush;
sub getpos;
sub new_tmpfile;
sub setbuf;
sub setpos;
sub setvbuf;
sub ungetc;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package Filter::Util::Exec {
sub filter_add($@) ;
}
package Filter::decrypt {
sub import;
sub unimport;
}
package Filter::tee {
sub import;
}
package GD {
sub constant;
}
package GD::Font {
sub DESTROY($) ;
sub Giant($) ;
sub Large($) ;
sub MediumBold($) ;
sub Small($) ;
sub Tiny($) ;
sub height($) ;
sub load($$) ;
sub nchars($) ;
sub offset($) ;
sub width($) ;
}
package GD::Image {
sub DESTROY($) ;
sub STORABLE_freeze($$) ;
sub STORABLE_thaw;
sub _new($;$$$) ;
sub _newFromGd($$) ;
sub _newFromGd2($$) ;
sub _newFromGd2Part($$$$$$) ;
sub _newFromGif($$;$) ;
sub _newFromJpeg($$;$) ;
sub _newFromPng($$;$) ;
sub _newFromWBMP($$) ;
sub _newFromXbm($$) ;
sub alphaBlending($$) ;
sub arc($$$$$$$$) ;
sub boundsSafe($$$) ;
sub char($$$$$$) ;
sub charUp($$$$$$) ;
sub clip($;$$$$) ;
sub colorAllocate($$$$) ;
sub colorAllocateAlpha($$$$) ;
sub colorClosest($$$$) ;
sub colorClosestAlpha($$$$) ;
sub colorClosestHWB($$$$) ;
sub colorDeallocate($$) ;
sub colorExact($$$$) ;
sub colorExactAlpha($$$$) ;
sub colorResolve($$$$) ;
sub colorResolveAlpha($$$$) ;
sub colorsTotal($) ;
sub compare($$) ;
sub copy($$$$$$$$) ;
sub copyFlipHorizontal($) ;
sub copyFlipVertical($) ;
sub copyMerge($$$$$$$$$) ;
sub copyMergeGray($$$$$$$$$) ;
sub copyResampled($$$$$$$$$$) ;
sub copyResized($$$$$$$$$$) ;
sub copyReverseTranspose($) ;
sub copyRotate180($) ;
sub copyRotate270($) ;
sub copyRotate90($) ;
sub copyRotated($$$$$$$$$) ;
sub copyTranspose($) ;
sub dashedLine($$$$$$) ;
sub fill($$$$) ;
sub fillToBorder($$$$$) ;
sub filledArc($$$$$$$$$) ;
sub filledEllipse($$$$$$) ;
sub filledPolygon($$$) ;
sub filledRectangle($$$$$$) ;
sub flipHorizontal($) ;
sub flipVertical($) ;
sub gd($) ;
sub gd2($) ;
sub getBounds($) ;
sub getPixel($$$) ;
sub gif($) ;
sub gifanimadd($$$$$$$) ;
sub gifanimbegin($$$) ;
sub gifanimend($) ;
sub interlaced($;$) ;
sub isTrueColor($) ;
sub jpeg($) ;
sub line($$$$$$) ;
sub newFromGd2Data($$) ;
sub newFromGdData($$) ;
sub newFromGifData($$;$) ;
sub newFromJpegData($$;$) ;
sub newFromPngData($$;$) ;
sub newFromWBMPData($$;$) ;
sub newFromXpm($$) ;
sub openPolygon($$$) ;
sub paletteCopy($$) ;
sub png($;$) ;
sub rectangle($$$$$$) ;
sub rgb($$) ;
sub rotate180($) ;
sub saveAlpha($$) ;
sub setAntiAliased($$) ;
sub setAntiAliasedDontBlend($$$) ;
sub setBrush($$) ;
sub setPixel($$$$) ;
sub setStyle($;$) ;
sub setThickness($$) ;
sub setTile($$) ;
sub string($$$$$$) ;
sub stringFT($$$$$$$$;$) ;
sub stringFTCircle($$$$$$$$$$$) ;
sub stringTTF($$$$$$$$;$) ;
sub stringUp($$$$$$) ;
sub transparent($;$) ;
sub trueColor($$) ;
sub trueColorToPalette($;$$) ;
sub unclosedPolygon($$$) ;
sub useFontConfig($$) ;
sub wbmp($) ;
}
package GDBM_File {
sub AUTOLOAD;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub GDBM_OPENMASK() ;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub close;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub reorganize;
sub setopt;
sub sync;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::Util {
sub all_keys(\%\@\@) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub reftype($) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub reftype($) ;
sub register($@) ;
}
package IO::File {
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub new_tmpfile;
}
package IO::Handle {
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package Imager {
sub DSO_call($$$) ;
sub DSO_close($) ;
sub DSO_funclist($) ;
sub DSO_open($) ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub _is_color_object($) ;
sub i_addcolors($;@) ;
sub i_arc($$$$$$$) ;
sub i_arc_aa($$$$$$$) ;
sub i_arc_aa_cfill($$$$$$$) ;
sub i_arc_cfill($$$$$$$) ;
sub i_arc_out($$$$$$$) ;
sub i_arc_out_aa($$$$$$$) ;
sub i_autolevels($$$$) ;
sub i_bezier_multi($$$$) ;
sub i_box($$$$$$) ;
sub i_box_cfill($$$$$$) ;
sub i_box_filled($$$$$$) ;
sub i_box_filledf($$$$$$) ;
sub i_bumpmap($$$$$$) ;
sub i_bumpmap_complex($$$$$$$$$$$$$$) ;
sub i_circle_aa($$$$$) ;
sub i_circle_out($$$$$) ;
sub i_circle_out_aa($$$$$) ;
sub i_clear_error() ;
sub i_colorcount($) ;
sub i_combine($;$) ;
sub i_compose($$$$$$$$;$$) ;
sub i_compose_mask($$$$$$$$$$$;$$) ;
sub i_contrast($$) ;
sub i_conv($$) ;
sub i_convert($$) ;
sub i_copy($) ;
sub i_copyto($$$$$$$$) ;
sub i_copyto_trans($$$$$$$$$) ;
sub i_count_colors($$) ;
sub i_diff_image($$;$) ;
sub i_errors() ;
sub i_findcolor($$) ;
sub i_flipxy($$) ;
sub i_flood_cfill($$$$) ;
sub i_flood_cfill_border($$$$$) ;
sub i_flood_fill($$$$) ;
sub i_flood_fill_border($$$$$) ;
sub i_fountain($$$$$$$$$$$) ;
sub i_gaussian($$) ;
sub i_get_anonymous_color_histo($;$) ;
sub i_get_image_file_limits() ;
sub i_get_pixel($$$) ;
sub i_getcolors($$;@) ;
sub i_glin($$$$) ;
sub i_glinf($$$$) ;
sub i_gpal($$$$) ;
sub i_gpixf($$$) ;
sub i_gradgen($;@) ;
sub i_gsamp($$$$;@) ;
sub i_gsamp_bits($$$$$$$;@) ;
sub i_gsampf($$$$;@) ;
sub i_haar($) ;
sub i_hardinvert($) ;
sub i_hardinvertall($) ;
sub i_img_16_new($$$) ;
sub i_img_bits($) ;
sub i_img_destroy($) ;
sub i_img_diff($$) ;
sub i_img_diffd($$) ;
sub i_img_double_new($$$) ;
sub i_img_empty($$$) ;
sub i_img_empty_ch($$$$) ;
sub i_img_epsilonf() ;
sub i_img_exorcise($) ;
sub i_img_get_height($) ;
sub i_img_get_width($) ;
sub i_img_getchannels($) ;
sub i_img_getdata($) ;
sub i_img_getmask($) ;
sub i_img_info($) ;
sub i_img_is_monochrome($) ;
sub i_img_masked_new($$$$$$) ;
sub i_img_new() ;
sub i_img_pal_new($$$$) ;
sub i_img_samef($$;$$) ;
sub i_img_setmask($$) ;
sub i_img_to_drgb($) ;
sub i_img_to_pal($$) ;
sub i_img_to_rgb($) ;
sub i_img_to_rgb16($) ;
sub i_img_type($) ;
sub i_img_virtual($) ;
sub i_init_log($$) ;
sub i_line($$$$$$$) ;
sub i_line_aa($$$$$$$) ;
sub i_list_formats() ;
sub i_log_enabled() ;
sub i_log_entry($$) ;
sub i_map($$) ;
sub i_matrix_transform($$$$;@) ;
sub i_maxcolors($) ;
sub i_mosaic($$) ;
sub i_nearest_color($;@) ;
sub i_new_fill_fount($$$$$$$$$$) ;
sub i_new_fill_hatch($$$$$$$) ;
sub i_new_fill_hatchf($$$$$$$) ;
sub i_new_fill_image($$$$$) ;
sub i_new_fill_opacity($$) ;
sub i_new_fill_solid($$) ;
sub i_new_fill_solidf($$) ;
sub i_noise($$$) ;
sub i_plin($$$;@) ;
sub i_plinf($$$;@) ;
sub i_poly_aa($$$$) ;
sub i_poly_aa_cfill($$$$) ;
sub i_postlevels($$) ;
sub i_ppal($$$;@) ;
sub i_ppal_p($$$$) ;
sub i_ppix($$$$) ;
sub i_ppixf($$$$) ;
sub i_psamp_bits($$$$$$;$$) ;
sub i_push_error($$) ;
sub i_radnoise($$$$$) ;
sub i_readbmp_wiol($;$) ;
sub i_readpnm_multi_wiol($$) ;
sub i_readpnm_wiol($$) ;
sub i_readraw_wiol($$$$$$) ;
sub i_readtga_wiol($$) ;
sub i_rotate90($$) ;
sub i_rotate_exact($$;@) ;
sub i_rubthru($$$$$$$$) ;
sub i_sametype($$$) ;
sub i_sametype_chans($$$$) ;
sub i_scale_mixing($$$) ;
sub i_scale_nn($$$) ;
sub i_scaleaxis($$$) ;
sub i_set_image_file_limits($$$) ;
sub i_setcolors($$;@) ;
sub i_tags_add($$$$$) ;
sub i_tags_addn($$$$) ;
sub i_tags_count($) ;
sub i_tags_delbycode($$) ;
sub i_tags_delbyname($$) ;
sub i_tags_delete($$) ;
sub i_tags_find($$$) ;
sub i_tags_findn($$$) ;
sub i_tags_get($$) ;
sub i_tags_get_string($$) ;
sub i_test_format_probe($$) ;
sub i_transform($$$$) ;
sub i_transform2($$$$$$$) ;
sub i_turbnoise($$$$) ;
sub i_unsharp_mask($$$) ;
sub i_watermark($$$$$) ;
sub i_writebmp_wiol($$) ;
sub i_writeppm_wiol($$) ;
sub i_writeraw_wiol($$) ;
sub i_writetga_wiol($$$$$) ;
sub io_new_bufchain() ;
sub io_new_buffer($) ;
sub io_new_cb($$$$;$) ;
sub io_new_fd($) ;
sub io_slurp($) ;
sub malloc_state() ;
}
package Imager::Color {
sub DESTROY;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub info;
sub new_internal;
sub rgba;
sub set_internal;
}
package Imager::Color::Float {
sub DESTROY;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub new_internal;
sub rgba;
sub set_internal;
}
package Imager::CountColor {
sub count_color($$) ;
}
package Imager::File::GIF {
sub i_giflib_version;
sub i_readgif_multi_wiol;
sub i_readgif_single_wiol;
sub i_readgif_wiol;
sub i_writegif_wiol;
}
package Imager::File::ICO {
sub i_readico_multi;
sub i_readico_single;
sub i_writecur_multi_wiol;
sub i_writecur_wiol;
sub i_writeico_multi_wiol;
sub i_writeico_wiol;
}
package Imager::File::JPEG {
sub i_readjpeg_wiol;
sub i_writejpeg_wiol;
}
package Imager::File::PNG {
sub i_readpng_wiol;
sub i_writepng_wiol;
}
package Imager::File::SGI {
sub i_readsgi_wiol;
sub i_writesgi_wiol;
}
package Imager::File::TIFF {
sub i_readtiff_multi_wiol;
sub i_readtiff_wiol;
sub i_tiff_has_compression;
sub i_tiff_libversion;
sub i_writetiff_multi_wiol;
sub i_writetiff_multi_wiol_faxable;
sub i_writetiff_wiol;
sub i_writetiff_wiol_faxable;
}
package Imager::FillHandle {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
}
package Imager::Filter::DynTest {
sub lin_stretch($$$) ;
}
package Imager::Filter::Flines {
sub flines($) ;
}
package Imager::Filter::Mandelbrot {
sub mandelbrot($;$$$$$) ;
}
package Imager::Font::FT2 {
sub ft2_transform_box;
sub i_ft2_bbox;
sub i_ft2_bbox_r;
sub i_ft2_can_do_glyph_names;
sub i_ft2_can_face_name;
sub i_ft2_cp;
sub i_ft2_face_has_glyph_names;
sub i_ft2_face_name;
sub i_ft2_get_multiple_masters;
sub i_ft2_getdpi;
sub i_ft2_glyph_name;
sub i_ft2_has_chars;
sub i_ft2_is_multiple_master;
sub i_ft2_new;
sub i_ft2_set_mm_coords;
sub i_ft2_setdpi;
sub i_ft2_sethinting;
sub i_ft2_settransform;
sub i_ft2_text;
}
package Imager::Font::FT2x {
sub CLONE_SKIP;
sub DESTROY;
}
package Imager::Font::W32 {
sub i_wf_addfont;
sub i_wf_bbox;
sub i_wf_cp;
sub i_wf_delfont;
sub i_wf_text;
}
package Imager::IO {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
sub close($) ;
sub dump($;$) ;
sub eof($) ;
sub error($) ;
sub flush($) ;
sub getc($) ;
sub gets($;$$) ;
sub is_buffered($) ;
sub new_bufchain($) ;
sub new_buffer($$) ;
sub new_cb($$$$$) ;
sub new_fd($$) ;
sub peekc($) ;
sub peekn($$) ;
sub putc($$) ;
sub raw_close($) ;
sub raw_read($$$) ;
sub raw_read2($$) ;
sub raw_seek($$$) ;
sub raw_write($$) ;
sub read($$$) ;
sub read2($$) ;
sub seek($$$) ;
sub set_buffered($;$) ;
sub slurp($$) ;
sub write($$) ;
}
package Imager::ImgRaw {
sub DESTROY;
sub new;
}
package Imager::Internal::Hlines {
sub CLONE_SKIP($) ;
sub DESTROY($) ;
sub add($$$$) ;
sub dump($) ;
sub new($$$$) ;
sub new_img($) ;
sub testing() ;
}
package Internals {
sub HvREHASH(\%) ;
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub hash_seed() ;
sub hv_clear_placeholders(\%) ;
sub rehash_seed() ;
}
package JSON::PP {
sub blessed($) ;
sub refaddr($) ;
sub reftype($) ;
}
package JSON::XS {
sub CLONE;
sub DESTROY;
sub allow_blessed;
sub allow_nonref;
sub allow_unknown;
sub ascii;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub filter_json_object;
sub filter_json_single_key_object;
sub from_json_($) ;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_unknown;
sub get_ascii;
sub get_canonical;
sub get_convert_blessed;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub space_after;
sub space_before;
sub to_json_($) ;
sub utf8;
}
package List::MoreUtils {
sub _XScompiled;
sub _array_iterator(;$) ;
sub _natatime_iterator() ;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub any(&@) ;
sub apply(&@) ;
sub before(&@) ;
sub before_incl(&@) ;
sub distinct(@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub false(&@) ;
sub first_index(&@) ;
sub first_value(&@) ;
sub firstidx(&@) ;
sub firstval(&@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub last_index(&@) ;
sub last_value(&@) ;
sub lastidx(&@) ;
sub lastval(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub natatime($@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub true(&@) ;
sub uniq(@) ;
sub zip(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
}
package List::MoreUtils_ea {
sub DESTROY;
}
package List::MoreUtils_na {
sub DESTROY;
}
package List::Util {
sub first(&@) ;
sub max(@) ;
sub maxstr(@) ;
sub min(@) ;
sub minstr(@) ;
sub reduce(&@) ;
sub shuffle(@) ;
sub sum(@) ;
}
package Lzma::Filter {
sub DESTROY;
sub id;
}
package Lzma::Filter::BCJ {
sub _mk;
}
package Lzma::Filter::Delta {
sub _mk;
}
package Lzma::Filter::Lzma {
sub _mk;
sub _mkPreset;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt {
sub _pointpoint;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package Math::BigInt::GMP {
sub DESTROY($) ;
sub _1ex($$) ;
sub _acmp($$$) ;
sub _add($$$) ;
sub _alen($$) ;
sub _and($$$) ;
sub _as_bin($$) ;
sub _as_hex($$) ;
sub _as_oct($$) ;
sub _copy($$) ;
sub _dec($$) ;
sub _div($$$) ;
sub _fac($$) ;
sub _from_bin($$) ;
sub _from_hex($$) ;
sub _from_oct($$) ;
sub _gcd($$$) ;
sub _inc($$) ;
sub _is_even($$) ;
sub _is_odd($$) ;
sub _is_one($$) ;
sub _is_ten($$) ;
sub _is_two($$) ;
sub _is_zero($$) ;
sub _len($$) ;
sub _lsft($$$$) ;
sub _mod($$$) ;
sub _modinv($$$) ;
sub _modpow($$$$) ;
sub _mul($$$) ;
sub _new($$) ;
sub _new_attach($$$) ;
sub _one($) ;
sub _or($$$) ;
sub _pow($$$) ;
sub _root($$$) ;
sub _rsft($$$$) ;
sub _set($$$) ;
sub _sqrt($$) ;
sub _str($$) ;
sub _sub($$$;@) ;
sub _ten($) ;
sub _two($) ;
sub _xor($$$) ;
sub _zero($) ;
sub _zeros($$) ;
}
package Math::GMP {
sub DESTROY($) ;
sub add_two($$) ;
sub add_ui_gmp($$) ;
sub and_two($$) ;
sub bdiv_two($$) ;
sub cmp_two($$) ;
sub constant($$) ;
sub destroy($) ;
sub div_2exp_gmp($$) ;
sub div_two($$) ;
sub gcd_two($$) ;
sub get_str_gmp($$) ;
sub gmp_copy($) ;
sub gmp_fac($) ;
sub gmp_fib($) ;
sub gmp_jacobi($$) ;
sub gmp_legendre($$) ;
sub gmp_probab_prime($$) ;
sub gmp_sqrt($) ;
sub gmp_tstbit($$) ;
sub intify_gmp($) ;
sub mmod_gmp($$) ;
sub mod_2exp_gmp($$) ;
sub mod_two($$) ;
sub mul_2exp_gmp($$) ;
sub mul_two($$) ;
sub new_from_scalar($) ;
sub new_from_scalar_with_base($$) ;
sub or_two($$) ;
sub pow_two($$) ;
sub powm_gmp($$$) ;
sub sizeinbase_gmp($$) ;
sub stringify_gmp($) ;
sub sub_two($$) ;
sub uintify_gmp($) ;
sub xor_two($$) ;
}
package Math::MPC {
sub DESTROY;
sub RMPC_IM;
sub RMPC_INEX_IM;
sub RMPC_INEX_RE;
sub RMPC_RE;
sub Rmpc_abs;
sub Rmpc_acos;
sub Rmpc_acosh;
sub Rmpc_add;
sub Rmpc_add_fr;
sub Rmpc_add_ui;
sub Rmpc_arg;
sub Rmpc_asin;
sub Rmpc_asinh;
sub Rmpc_atan;
sub Rmpc_atanh;
sub Rmpc_clear;
sub Rmpc_clear_mpc;
sub Rmpc_clear_ptr;
sub Rmpc_cmp;
sub Rmpc_cmp_si;
sub Rmpc_cmp_si_si;
sub Rmpc_conj;
sub Rmpc_cos;
sub Rmpc_cosh;
sub Rmpc_d_div;
sub Rmpc_div;
sub Rmpc_div_2exp;
sub Rmpc_div_d;
sub Rmpc_div_fr;
sub Rmpc_div_ld;
sub Rmpc_div_sj;
sub Rmpc_div_ui;
sub Rmpc_exp;
sub Rmpc_get_dc;
sub Rmpc_get_default_prec2;
sub Rmpc_get_default_prec;
sub Rmpc_get_default_rounding_mode;
sub Rmpc_get_im_prec;
sub Rmpc_get_ldc;
sub Rmpc_get_prec2;
sub Rmpc_get_prec;
sub Rmpc_get_re_prec;
sub Rmpc_get_str;
sub Rmpc_get_version;
sub Rmpc_imag;
sub Rmpc_init2;
sub Rmpc_init2_nobless;
sub Rmpc_init3;
sub Rmpc_init3_nobless;
sub Rmpc_inp_str;
sub Rmpc_ld_div;
sub Rmpc_log;
sub Rmpc_mul;
sub Rmpc_mul_2exp;
sub Rmpc_mul_d;
sub Rmpc_mul_fr;
sub Rmpc_mul_i;
sub Rmpc_mul_ld;
sub Rmpc_mul_si;
sub Rmpc_mul_sj;
sub Rmpc_mul_ui;
sub Rmpc_neg;
sub Rmpc_norm;
sub Rmpc_pow;
sub Rmpc_pow_d;
sub Rmpc_pow_fr;
sub Rmpc_pow_ld;
sub Rmpc_pow_si;
sub Rmpc_pow_ui;
sub Rmpc_pow_z;
sub Rmpc_proj;
sub Rmpc_real;
sub Rmpc_set;
sub Rmpc_set_d;
sub Rmpc_set_d_d;
sub Rmpc_set_d_f;
sub Rmpc_set_d_fr;
sub Rmpc_set_d_ld;
sub Rmpc_set_d_q;
sub Rmpc_set_d_si;
sub Rmpc_set_d_sj;
sub Rmpc_set_d_ui;
sub Rmpc_set_d_uj;
sub Rmpc_set_d_z;
sub Rmpc_set_dc;
sub Rmpc_set_default_prec2;
sub Rmpc_set_default_prec;
sub Rmpc_set_default_rounding_mode;
sub Rmpc_set_f;
sub Rmpc_set_f_d;
sub Rmpc_set_f_f;
sub Rmpc_set_f_fr;
sub Rmpc_set_f_ld;
sub Rmpc_set_f_q;
sub Rmpc_set_f_si;
sub Rmpc_set_f_sj;
sub Rmpc_set_f_ui;
sub Rmpc_set_f_uj;
sub Rmpc_set_f_z;
sub Rmpc_set_fr;
sub Rmpc_set_fr_d;
sub Rmpc_set_fr_f;
sub Rmpc_set_fr_fr;
sub Rmpc_set_fr_ld;
sub Rmpc_set_fr_q;
sub Rmpc_set_fr_si;
sub Rmpc_set_fr_sj;
sub Rmpc_set_fr_ui;
sub Rmpc_set_fr_uj;
sub Rmpc_set_fr_z;
sub Rmpc_set_im_prec;
sub Rmpc_set_ld;
sub Rmpc_set_ld_d;
sub Rmpc_set_ld_f;
sub Rmpc_set_ld_fr;
sub Rmpc_set_ld_ld;
sub Rmpc_set_ld_q;
sub Rmpc_set_ld_si;
sub Rmpc_set_ld_sj;
sub Rmpc_set_ld_ui;
sub Rmpc_set_ld_uj;
sub Rmpc_set_ld_z;
sub Rmpc_set_ldc;
sub Rmpc_set_nan;
sub Rmpc_set_prec;
sub Rmpc_set_q;
sub Rmpc_set_q_d;
sub Rmpc_set_q_f;
sub Rmpc_set_q_fr;
sub Rmpc_set_q_ld;
sub Rmpc_set_q_q;
sub Rmpc_set_q_si;
sub Rmpc_set_q_sj;
sub Rmpc_set_q_ui;
sub Rmpc_set_q_uj;
sub Rmpc_set_q_z;
sub Rmpc_set_re_prec;
sub Rmpc_set_si;
sub Rmpc_set_si_d;
sub Rmpc_set_si_f;
sub Rmpc_set_si_fr;
sub Rmpc_set_si_ld;
sub Rmpc_set_si_q;
sub Rmpc_set_si_si;
sub Rmpc_set_si_sj;
sub Rmpc_set_si_ui;
sub Rmpc_set_si_uj;
sub Rmpc_set_si_z;
sub Rmpc_set_sj;
sub Rmpc_set_sj_d;
sub Rmpc_set_sj_f;
sub Rmpc_set_sj_fr;
sub Rmpc_set_sj_ld;
sub Rmpc_set_sj_q;
sub Rmpc_set_sj_si;
sub Rmpc_set_sj_sj;
sub Rmpc_set_sj_ui;
sub Rmpc_set_sj_uj;
sub Rmpc_set_sj_z;
sub Rmpc_set_str;
sub Rmpc_set_ui;
sub Rmpc_set_ui_d;
sub Rmpc_set_ui_f;
sub Rmpc_set_ui_fr;
sub Rmpc_set_ui_ld;
sub Rmpc_set_ui_q;
sub Rmpc_set_ui_si;
sub Rmpc_set_ui_sj;
sub Rmpc_set_ui_ui;
sub Rmpc_set_ui_uj;
sub Rmpc_set_ui_z;
sub Rmpc_set_uj;
sub Rmpc_set_uj_d;
sub Rmpc_set_uj_f;
sub Rmpc_set_uj_fr;
sub Rmpc_set_uj_ld;
sub Rmpc_set_uj_q;
sub Rmpc_set_uj_si;
sub Rmpc_set_uj_sj;
sub Rmpc_set_uj_ui;
sub Rmpc_set_uj_uj;
sub Rmpc_set_uj_z;
sub Rmpc_set_z;
sub Rmpc_set_z_d;
sub Rmpc_set_z_f;
sub Rmpc_set_z_fr;
sub Rmpc_set_z_ld;
sub Rmpc_set_z_q;
sub Rmpc_set_z_si;
sub Rmpc_set_z_sj;
sub Rmpc_set_z_ui;
sub Rmpc_set_z_uj;
sub Rmpc_set_z_z;
sub Rmpc_sin;
sub Rmpc_sin_cos;
sub Rmpc_sinh;
sub Rmpc_sj_div;
sub Rmpc_sqr;
sub Rmpc_sqrt;
sub Rmpc_strtoc;
sub Rmpc_sub;
sub Rmpc_sub_ui;
sub Rmpc_swap;
sub Rmpc_tan;
sub Rmpc_tanh;
sub Rmpc_ui_div;
sub Rmpc_ui_sub;
sub Rmpc_ui_ui_sub;
sub TRmpc_inp_str;
sub _MPC_VERSION;
sub _MPC_VERSION_MAJOR;
sub _MPC_VERSION_MINOR;
sub _MPC_VERSION_NUM;
sub _MPC_VERSION_PATCHLEVEL;
sub _MPC_VERSION_STRING;
sub _Rmpc_out_str;
sub _Rmpc_out_strP;
sub _Rmpc_out_strPS;
sub _Rmpc_out_strS;
sub _get_i_string;
sub _get_r_string;
sub _has_inttypes;
sub _has_longdouble;
sub _has_longlong;
sub _have_Complex_h;
sub _itsa;
sub _mpc_d_div;
sub _mpc_div_d;
sub _mpc_div_ld;
sub _mpc_div_sj;
sub _mpc_ld_div;
sub _mpc_mul_d;
sub _mpc_mul_ld;
sub _mpc_mul_sj;
sub _mpc_sj_div;
sub _new_im;
sub _new_real;
sub gmp_v;
sub mpfr_v;
sub overload_abs;
sub overload_add;
sub overload_add_eq;
sub overload_atan2;
sub overload_copy;
sub overload_cos;
sub overload_div;
sub overload_div_eq;
sub overload_equiv;
sub overload_exp;
sub overload_log;
sub overload_mul;
sub overload_mul_eq;
sub overload_not;
sub overload_not_equiv;
sub overload_pow;
sub overload_pow_eq;
sub overload_sin;
sub overload_sqrt;
sub overload_sub;
sub overload_sub_eq;
sub overload_true;
}
package Math::MPFR {
sub DESTROY;
sub RMPFR_PREC_MAX;
sub RMPFR_PREC_MIN;
sub RMPFR_VERSION_NUM;
sub Rgmp_randclear;
sub Rgmp_randinit_default;
sub Rgmp_randinit_lc_2exp;
sub Rgmp_randinit_lc_2exp_size;
sub Rgmp_randinit_mt;
sub Rgmp_randseed;
sub Rgmp_randseed_ui;
sub Rmpfr_abs;
sub Rmpfr_acos;
sub Rmpfr_acosh;
sub Rmpfr_add;
sub Rmpfr_add_d;
sub Rmpfr_add_q;
sub Rmpfr_add_si;
sub Rmpfr_add_ui;
sub Rmpfr_add_z;
sub Rmpfr_agm;
sub Rmpfr_ai;
sub Rmpfr_asin;
sub Rmpfr_asinh;
sub Rmpfr_atan2;
sub Rmpfr_atan;
sub Rmpfr_atanh;
sub Rmpfr_buildopt_decimal_p;
sub Rmpfr_buildopt_gmpinternals_p;
sub Rmpfr_buildopt_tls_p;
sub Rmpfr_buildopt_tune_case;
sub Rmpfr_can_round;
sub Rmpfr_cbrt;
sub Rmpfr_ceil;
sub Rmpfr_check_range;
sub Rmpfr_clear;
sub Rmpfr_clear_divby0;
sub Rmpfr_clear_erangeflag;
sub Rmpfr_clear_flags;
sub Rmpfr_clear_inexflag;
sub Rmpfr_clear_mpfr;
sub Rmpfr_clear_nanflag;
sub Rmpfr_clear_overflow;
sub Rmpfr_clear_ptr;
sub Rmpfr_clear_underflow;
sub Rmpfr_clears;
sub Rmpfr_cmp;
sub Rmpfr_cmp_d;
sub Rmpfr_cmp_f;
sub Rmpfr_cmp_ld;
sub Rmpfr_cmp_q;
sub Rmpfr_cmp_si;
sub Rmpfr_cmp_si_2exp;
sub Rmpfr_cmp_ui;
sub Rmpfr_cmp_ui_2exp;
sub Rmpfr_cmp_z;
sub Rmpfr_cmpabs;
sub Rmpfr_const_catalan;
sub Rmpfr_const_euler;
sub Rmpfr_const_log2;
sub Rmpfr_const_pi;
sub Rmpfr_copysign;
sub Rmpfr_cos;
sub Rmpfr_cosh;
sub Rmpfr_cot;
sub Rmpfr_coth;
sub Rmpfr_csc;
sub Rmpfr_csch;
sub Rmpfr_d_div;
sub Rmpfr_d_sub;
sub Rmpfr_deref2;
sub Rmpfr_digamma;
sub Rmpfr_dim;
sub Rmpfr_div;
sub Rmpfr_div_2exp;
sub Rmpfr_div_2si;
sub Rmpfr_div_2ui;
sub Rmpfr_div_d;
sub Rmpfr_div_q;
sub Rmpfr_div_si;
sub Rmpfr_div_ui;
sub Rmpfr_div_z;
sub Rmpfr_divby0_p;
sub Rmpfr_dump;
sub Rmpfr_eint;
sub Rmpfr_eq;
sub Rmpfr_equal_p;
sub Rmpfr_erangeflag_p;
sub Rmpfr_erf;
sub Rmpfr_erfc;
sub Rmpfr_exp10;
sub Rmpfr_exp2;
sub Rmpfr_exp;
sub Rmpfr_expm1;
sub Rmpfr_fac_ui;
sub Rmpfr_fits_IV_p;
sub Rmpfr_fits_UV_p;
sub Rmpfr_fits_intmax_p;
sub Rmpfr_fits_sint_p;
sub Rmpfr_fits_slong_p;
sub Rmpfr_fits_sshort_p;
sub Rmpfr_fits_uint_p;
sub Rmpfr_fits_uintmax_p;
sub Rmpfr_fits_ulong_p;
sub Rmpfr_fits_ushort_p;
sub Rmpfr_floor;
sub Rmpfr_fma;
sub Rmpfr_fmod;
sub Rmpfr_fms;
sub Rmpfr_frac;
sub Rmpfr_free_cache;
sub Rmpfr_frexp;
sub Rmpfr_gamma;
sub Rmpfr_get_IV;
sub Rmpfr_get_NV;
sub Rmpfr_get_UV;
sub Rmpfr_get_d1;
sub Rmpfr_get_d;
sub Rmpfr_get_d_2exp;
sub Rmpfr_get_default_prec;
sub Rmpfr_get_default_rounding_mode;
sub Rmpfr_get_emax;
sub Rmpfr_get_emax_max;
sub Rmpfr_get_emax_min;
sub Rmpfr_get_emin;
sub Rmpfr_get_emin_max;
sub Rmpfr_get_emin_min;
sub Rmpfr_get_exp;
sub Rmpfr_get_f;
sub Rmpfr_get_flt;
sub Rmpfr_get_ld;
sub Rmpfr_get_ld_2exp;
sub Rmpfr_get_patches;
sub Rmpfr_get_prec;
sub Rmpfr_get_si;
sub Rmpfr_get_sj;
sub Rmpfr_get_ui;
sub Rmpfr_get_uj;
sub Rmpfr_get_version;
sub Rmpfr_get_z;
sub Rmpfr_get_z_2exp;
sub Rmpfr_get_z_exp;
sub Rmpfr_grandom;
sub Rmpfr_greater_p;
sub Rmpfr_greaterequal_p;
sub Rmpfr_hypot;
sub Rmpfr_inexflag_p;
sub Rmpfr_inf_p;
sub Rmpfr_init2;
sub Rmpfr_init2_nobless;
sub Rmpfr_init;
sub Rmpfr_init_nobless;
sub Rmpfr_init_set;
sub Rmpfr_init_set_d;
sub Rmpfr_init_set_d_nobless;
sub Rmpfr_init_set_f;
sub Rmpfr_init_set_f_nobless;
sub Rmpfr_init_set_ld;
sub Rmpfr_init_set_ld_nobless;
sub Rmpfr_init_set_nobless;
sub Rmpfr_init_set_q;
sub Rmpfr_init_set_q_nobless;
sub Rmpfr_init_set_si;
sub Rmpfr_init_set_si_nobless;
sub Rmpfr_init_set_str;
sub Rmpfr_init_set_str_nobless;
sub Rmpfr_init_set_ui;
sub Rmpfr_init_set_ui_nobless;
sub Rmpfr_init_set_z;
sub Rmpfr_init_set_z_nobless;
sub Rmpfr_inp_str;
sub Rmpfr_integer_p;
sub Rmpfr_j0;
sub Rmpfr_j1;
sub Rmpfr_jn;
sub Rmpfr_less_p;
sub Rmpfr_lessequal_p;
sub Rmpfr_lessgreater_p;
sub Rmpfr_lgamma;
sub Rmpfr_li2;
sub Rmpfr_lngamma;
sub Rmpfr_log10;
sub Rmpfr_log1p;
sub Rmpfr_log2;
sub Rmpfr_log;
sub Rmpfr_max;
sub Rmpfr_min;
sub Rmpfr_min_prec;
sub Rmpfr_modf;
sub Rmpfr_mul;
sub Rmpfr_mul_2exp;
sub Rmpfr_mul_2si;
sub Rmpfr_mul_2ui;
sub Rmpfr_mul_d;
sub Rmpfr_mul_q;
sub Rmpfr_mul_si;
sub Rmpfr_mul_ui;
sub Rmpfr_mul_z;
sub Rmpfr_nan_p;
sub Rmpfr_nanflag_p;
sub Rmpfr_neg;
sub Rmpfr_nextabove;
sub Rmpfr_nextbelow;
sub Rmpfr_nexttoward;
sub Rmpfr_number_p;
sub Rmpfr_overflow_p;
sub Rmpfr_pow;
sub Rmpfr_pow_si;
sub Rmpfr_pow_ui;
sub Rmpfr_pow_z;
sub Rmpfr_prec_round;
sub Rmpfr_print_binary;
sub Rmpfr_random2;
sub Rmpfr_rec_sqrt;
sub Rmpfr_regular_p;
sub Rmpfr_reldiff;
sub Rmpfr_remainder;
sub Rmpfr_remquo;
sub Rmpfr_rint;
sub Rmpfr_rint_ceil;
sub Rmpfr_rint_floor;
sub Rmpfr_rint_round;
sub Rmpfr_rint_trunc;
sub Rmpfr_root;
sub Rmpfr_round;
sub Rmpfr_sec;
sub Rmpfr_sech;
sub Rmpfr_set;
sub Rmpfr_set_d;
sub Rmpfr_set_default_prec;
sub Rmpfr_set_default_rounding_mode;
sub Rmpfr_set_divby0;
sub Rmpfr_set_emax;
sub Rmpfr_set_emin;
sub Rmpfr_set_erangeflag;
sub Rmpfr_set_exp;
sub Rmpfr_set_f;
sub Rmpfr_set_flt;
sub Rmpfr_set_inexflag;
sub Rmpfr_set_inf;
sub Rmpfr_set_ld;
sub Rmpfr_set_nan;
sub Rmpfr_set_nanflag;
sub Rmpfr_set_overflow;
sub Rmpfr_set_prec;
sub Rmpfr_set_prec_raw;
sub Rmpfr_set_q;
sub Rmpfr_set_si;
sub Rmpfr_set_si_2exp;
sub Rmpfr_set_sj;
sub Rmpfr_set_sj_2exp;
sub Rmpfr_set_str;
sub Rmpfr_set_str_binary;
sub Rmpfr_set_ui;
sub Rmpfr_set_ui_2exp;
sub Rmpfr_set_uj;
sub Rmpfr_set_uj_2exp;
sub Rmpfr_set_underflow;
sub Rmpfr_set_z;
sub Rmpfr_set_z_2exp;
sub Rmpfr_set_zero;
sub Rmpfr_setsign;
sub Rmpfr_sgn;
sub Rmpfr_si_div;
sub Rmpfr_si_sub;
sub Rmpfr_signbit;
sub Rmpfr_sin;
sub Rmpfr_sin_cos;
sub Rmpfr_sinh;
sub Rmpfr_sinh_cosh;
sub Rmpfr_sqr;
sub Rmpfr_sqrt;
sub Rmpfr_sqrt_ui;
sub Rmpfr_strtofr;
sub Rmpfr_sub;
sub Rmpfr_sub_d;
sub Rmpfr_sub_q;
sub Rmpfr_sub_si;
sub Rmpfr_sub_ui;
sub Rmpfr_sub_z;
sub Rmpfr_subnormalize;
sub Rmpfr_sum;
sub Rmpfr_swap;
sub Rmpfr_tan;
sub Rmpfr_tanh;
sub Rmpfr_trunc;
sub Rmpfr_ui_div;
sub Rmpfr_ui_pow;
sub Rmpfr_ui_pow_ui;
sub Rmpfr_ui_sub;
sub Rmpfr_underflow_p;
sub Rmpfr_unordered_p;
sub Rmpfr_urandom;
sub Rmpfr_urandomb;
sub Rmpfr_y0;
sub Rmpfr_y1;
sub Rmpfr_yn;
sub Rmpfr_z_sub;
sub Rmpfr_zero_p;
sub Rmpfr_zeta;
sub Rmpfr_zeta_ui;
sub TRmpfr_inp_str;
sub _MPFR_VERSION;
sub _MPFR_VERSION_MAJOR;
sub _MPFR_VERSION_MINOR;
sub _MPFR_VERSION_PATCHLEVEL;
sub _MPFR_VERSION_STRING;
sub _Rmpfr_out_str;
sub _Rmpfr_out_strP;
sub _Rmpfr_out_strPS;
sub _Rmpfr_out_strS;
sub _TRmpfr_out_str;
sub _TRmpfr_out_strP;
sub _TRmpfr_out_strPS;
sub _TRmpfr_out_strS;
sub _has_inttypes;
sub _has_longdouble;
sub _has_longlong;
sub _itsa;
sub get_package_name;
sub get_refcnt;
sub get_xs_version;
sub gmp_v;
sub overload_abs;
sub overload_add;
sub overload_add_eq;
sub overload_atan2;
sub overload_copy;
sub overload_cos;
sub overload_div;
sub overload_div_eq;
sub overload_equiv;
sub overload_exp;
sub overload_gt;
sub overload_gte;
sub overload_int;
sub overload_log;
sub overload_lt;
sub overload_lte;
sub overload_mul;
sub overload_mul_eq;
sub overload_not;
sub overload_not_equiv;
sub overload_pow;
sub overload_pow_eq;
sub overload_sin;
sub overload_spaceship;
sub overload_sqrt;
sub overload_sub;
sub overload_sub_eq;
sub overload_true;
sub wrap_mpfr_fprintf;
sub wrap_mpfr_fprintf_rnd;
sub wrap_mpfr_printf;
sub wrap_mpfr_printf_rnd;
sub wrap_mpfr_snprintf;
sub wrap_mpfr_snprintf_rnd;
sub wrap_mpfr_sprintf;
sub wrap_mpfr_sprintf_rnd;
}
package Math::Pari {
sub DESTROY($) ;
sub EXISTS($$) ;
sub FETCH($$) ;
sub FETCHSIZE($) ;
sub PARI(;@) ;
sub PARI_DEBUG() ;
sub PARI_DEBUG_set($) ;
sub PARIcol(;@) ;
sub PARImat(;@) ;
sub PARIvar($) ;
sub STORE($$$) ;
sub _2bool($$$) ;
sub _abs;
sub _cos;
sub _exp;
sub _gadd;
sub _gbitand;
sub _gbitneg;
sub _gbitor;
sub _gbitshiftl;
sub _gbitshiftr;
sub _gbitxor;
sub _gcmp;
sub _gdiv;
sub _geq;
sub _gge;
sub _ggt;
sub _gle;
sub _glt;
sub _gmod;
sub _gmul;
sub _gne;
sub _gneg;
sub _gpui;
sub _gsub;
sub _lex;
sub _log;
sub _sin;
sub _sqrt;
sub _to_int($$$) ;
sub allocatemem(;$) ;
sub changevalue($$) ;
sub dumpHeap() ;
sub dumpStack() ;
sub have_graphics() ;
sub have_highlevel() ;
sub ifact($) ;
sub installPerlFunctionCV;
sub int_set_term_ftable($) ;
sub interface0() ;
sub interface1($) ;
sub interface10($) ;
sub interface109($$$) ;
sub interface11($) ;
sub interface12($$) ;
sub interface13($;$$) ;
sub interface14($;$) ;
sub interface15($) ;
sub interface16($) ;
sub interface18($) ;
sub interface19($$) ;
sub interface199($$$) ;
sub interface2($$) ;
sub interface20($$) ;
sub interface209($$$) ;
sub interface2091($$$) ;
sub interface2099($$$) ;
sub interface21($$) ;
sub interface2199($$$) ;
sub interface22($$$) ;
sub interface23($$) ;
sub interface24($$) ;
sub interface25($$;$) ;
sub interface26($$$) ;
sub interface27($$$) ;
sub interface28($;$$) ;
sub interface28_old($$) ;
sub interface29($$) ;
sub interface299($$$) ;
sub interface29_old($$) ;
sub interface3($$$) ;
sub interface30($$$) ;
sub interface31($;$$$) ;
sub interface32($$$) ;
sub interface33($$$;$) ;
sub interface34($$$) ;
sub interface35($$$) ;
sub interface37($$$$) ;
sub interface4($$$$) ;
sub interface44($$$$) ;
sub interface45($$;$) ;
sub interface47($$$$;$) ;
sub interface48($$$$;$) ;
sub interface49($$;$$$) ;
sub interface5($$$$) ;
sub interface59($$$$$) ;
sub interface73($$$$$;$$) ;
sub interface83($$$$) ;
sub interface84($$$) ;
sub interface86($$$$$) ;
sub interface87($$$;$) ;
sub interface9900() ;
sub interface_flexible_gen(;@) ;
sub interface_flexible_int(;@) ;
sub interface_flexible_long(;@) ;
sub interface_flexible_void(;@) ;
sub lg($) ;
sub lgef($) ;
sub lgefint($) ;
sub listPari($) ;
sub loadPari($;$) ;
sub longword($$) ;
sub memUsage() ;
sub pari2bool($) ;
sub pari2iv($) ;
sub pari2num($) ;
sub pari2num_($;@) ;
sub pari2nv($) ;
sub pari2pv($;@) ;
sub pari_pprint($) ;
sub pari_print($) ;
sub pari_texprint($) ;
sub pari_version_exp() ;
sub reset_on_reload(;$) ;
sub set_gnuterm($$;$) ;
sub setprecision(;$) ;
sub setprimelimit(;$) ;
sub setseriesprecision(;$) ;
sub sv2pari($) ;
sub sv2parimat($) ;
sub typ($) ;
sub type_name($) ;
}
package Math::Round {
sub ARG_MAX() ;
sub B0() ;
sub B110() ;
sub B1200() ;
sub B134() ;
sub B150() ;
sub B1800() ;
sub B19200() ;
sub B200() ;
sub B2400() ;
sub B300() ;
sub B38400() ;
sub B4800() ;
sub B50() ;
sub B600() ;
sub B75() ;
sub B9600() ;
sub BRKINT() ;
sub CHILD_MAX() ;
sub CLOCAL() ;
sub CREAD() ;
sub CS5() ;
sub CS6() ;
sub CS7() ;
sub CS8() ;
sub CSIZE() ;
sub CSTOPB() ;
sub ECHO() ;
sub ECHOE() ;
sub ECHOK() ;
sub ECHONL() ;
sub ENOTBLK() ;
sub ERESTART() ;
sub ETXTBSY() ;
sub FD_CLOEXEC() ;
sub F_DUPFD() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_RDLCK() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLKW() ;
sub F_UNLCK() ;
sub F_WRLCK() ;
sub HUPCL() ;
sub ICANON() ;
sub ICRNL() ;
sub IEXTEN() ;
sub IGNBRK() ;
sub IGNCR() ;
sub IGNPAR() ;
sub INLCR() ;
sub INPCK() ;
sub ISIG() ;
sub ISTRIP() ;
sub IXOFF() ;
sub IXON() ;
sub LC_MESSAGES() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_ctermid() ;
sub L_cuserid() ;
sub L_tmpname() ;
sub MAX_CANON() ;
sub MAX_INPUT() ;
sub NAME_MAX() ;
sub NCCS() ;
sub NDEBUG;
sub NGROUPS_MAX() ;
sub NOFLSH() ;
sub OPEN_MAX() ;
sub OPOST() ;
sub O_NOCTTY() ;
sub O_NONBLOCK() ;
sub PARENB() ;
sub PARMRK() ;
sub PARODD() ;
sub PIPE_BUF() ;
sub SA_NOCLDSTOP() ;
sub SA_NOCLDWAIT() ;
sub SA_NODEFER() ;
sub SA_ONSTACK() ;
sub SA_RESETHAND() ;
sub SA_RESTART() ;
sub SA_SIGINFO() ;
sub SIGALRM() ;
sub SIGBUS() ;
sub SIGCHLD() ;
sub SIGCONT() ;
sub SIGHUP() ;
sub SIGKILL() ;
sub SIGPIPE() ;
sub SIGPOLL() ;
sub SIGPROF() ;
sub SIGQUIT() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub SIGSTOP() ;
sub SIGSYS() ;
sub SIGTRAP() ;
sub SIGTSTP() ;
sub SIGTTIN() ;
sub SIGTTOU() ;
sub SIGURG() ;
sub SIGUSR1() ;
sub SIGUSR2() ;
sub SIGVTALRM() ;
sub SIGXCPU() ;
sub SIGXFSZ() ;
sub SIG_BLOCK() ;
sub SIG_SETMASK() ;
sub SIG_UNBLOCK() ;
sub SSIZE_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TCIFLUSH() ;
sub TCIOFF() ;
sub TCIOFLUSH() ;
sub TCION() ;
sub TCOFLUSH() ;
sub TCOOFF() ;
sub TCOON() ;
sub TCSADRAIN() ;
sub TCSAFLUSH() ;
sub TCSANOW() ;
sub TOSTOP() ;
sub TZNAME_MAX() ;
sub VEOF() ;
sub VEOL() ;
sub VERASE() ;
sub VINTR() ;
sub VKILL() ;
sub VMIN() ;
sub VQUIT() ;
sub VSTART() ;
sub VSTOP() ;
sub VSUSP() ;
sub VTIME() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub WUNTRACED() ;
sub _PC_CHOWN_RESTRICTED() ;
sub _PC_LINK_MAX() ;
sub _PC_MAX_CANON() ;
sub _PC_MAX_INPUT() ;
sub _PC_NAME_MAX() ;
sub _PC_NO_TRUNC() ;
sub _PC_PATH_MAX() ;
sub _PC_PIPE_BUF() ;
sub _PC_VDISABLE() ;
sub _SC_ARG_MAX() ;
sub _SC_CHILD_MAX() ;
sub _SC_CLK_TCK() ;
sub _SC_JOB_CONTROL() ;
sub _SC_NGROUPS_MAX() ;
sub _SC_OPEN_MAX() ;
sub _SC_PAGESIZE() ;
sub _SC_SAVED_IDS() ;
sub _SC_STREAM_MAX() ;
sub _SC_TZNAME_MAX() ;
sub _SC_VERSION() ;
sub _exit;
sub abort;
sub access;
sub acos;
sub asctime;
sub asin;
sub assert;
sub atan;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub clearerr;
sub clock;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub fabs;
sub fclose;
sub fdopen;
sub feof;
sub ferror;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub floor;
sub fmod;
sub fopen;
sub fpathconf;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgroups;
sub getpid;
sub gets;
sub getuid;
sub isalnum;
sub isalpha;
sub isatty;
sub iscntrl;
sub isdigit;
sub isgraph;
sub islower;
sub isprint;
sub ispunct;
sub isspace;
sub isupper;
sub isxdigit;
sub labs;
sub ldexp;
sub ldiv;
sub localeconv;
sub log10;
sub longjmp;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkfifo;
sub mktime;
sub modf;
sub offsetof;
sub pathconf;
sub pause;
sub perror;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub realloc;
sub remove;
sub rewind;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sinh;
sub sscanf;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub tmpfile;
sub tmpnam;
sub tolower;
sub toupper;
sub ttyname;
sub tzname;
sub tzset;
sub uname;
sub ungetc;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wcstombs;
sub wctomb;
}
package Module::Runtime {
sub is_string($) ;
}
package Moose {
sub blessed($) ;
sub is_class_loaded;
}
package Moose::Exporter {
sub _export_is_flagged;
sub _flag_as_reexport;
sub first_index(&@) ;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub uniq(@) ;
}
package Moose::Meta::Attribute {
sub any(&@) ;
sub blessed($) ;
sub is_class_loaded;
sub weaken($) ;
}
package Moose::Meta::Class {
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
sub first_index(&@) ;
sub uniq(@) ;
}
package Moose::Meta::Class::Immutable::Trait {
sub blessed($) ;
}
package Moose::Meta::Method::Constructor {
sub any(&@) ;
sub blessed($) ;
sub looks_like_number($) ;
sub refaddr($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Delegation {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Destructor {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Object::Trait {
sub blessed($) ;
}
package Moose::Meta::Role {
sub blessed($) ;
}
package Moose::Meta::Role::Application::RoleSummation {
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToClass {
sub blessed($) ;
sub firstval(&@) ;
sub weaken($) ;
}
package Moose::Meta::Role::Application::ToInstance {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToRole {
sub blessed($) ;
}
package Moose::Meta::Role::Attribute {
sub all(&@) ;
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Role::Composite {
sub blessed($) ;
}
package Moose::Meta::TypeCoercion::Union {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint {
sub blessed($) ;
sub refaddr($) ;
sub subname;
}
package Moose::Meta::TypeConstraint::Class {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::DuckType {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Parameterized {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Registry {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Role {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Union {
sub all(&@) ;
sub first(&@) ;
}
package Moose::Util {
sub _STRING($) ;
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::MetaRole {
sub all(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::TypeConstraints {
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub reftype($) ;
}
package Moose::Util::TypeConstraints::Builtins {
sub _RegexpRef;
sub blessed($) ;
sub is_class_loaded;
sub looks_like_number($) ;
sub reftype($) ;
}
package MooseX::Types::TypeDecorator {
sub blessed($) ;
}
package MooseX::Types::Util {
sub blessed($) ;
}
package Mouse {
sub is_class_loaded;
}
package Mouse::Meta::Attribute {
sub _is_metadata;
sub _process_options;
sub accessor;
sub accessor_metaclass;
sub associated_class;
sub builder;
sub clearer;
sub default;
sub documentation;
sub handles;
sub has_accessor;
sub has_builder;
sub has_clearer;
sub has_default;
sub has_documentation;
sub has_handles;
sub has_predicate;
sub has_reader;
sub has_trigger;
sub has_type_constraint;
sub has_writer;
sub init_arg;
sub insertion_order;
sub is_lazy;
sub is_lazy_build;
sub is_required;
sub is_weak_ref;
sub name;
sub predicate;
sub reader;
sub should_auto_deref;
sub should_coerce;
sub trigger;
sub type_constraint;
sub writer;
}
package Mouse::Meta::Class {
sub _initialize_object;
sub _invalidate_metaclass_cache;
sub attribute_metaclass;
sub clone_object;
sub constructor_class;
sub destructor_class;
sub get_all_attributes;
sub is_anon_class;
sub is_immutable;
sub linearized_isa;
sub method_metaclass;
sub new_object;
sub roles;
sub strict_constructor;
}
package Mouse::Meta::Method::Accessor::XS {
sub _generate_accessor;
sub _generate_clearer;
sub _generate_predicate;
sub _generate_reader;
sub _generate_writer;
}
package Mouse::Meta::Method::Constructor::XS {
sub _generate_constructor;
}
package Mouse::Meta::Method::Destructor::XS {
sub _generate_destructor;
}
package Mouse::Meta::Module {
sub _attribute_map;
sub _method_map;
sub add_method;
sub name;
sub namespace;
}
package Mouse::Meta::Role {
sub add_after_method_modifier;
sub add_around_method_modifier;
sub add_before_method_modifier;
sub add_before_modifier;
sub add_metaclass_accessor;
sub get_after_method_modifiers;
sub get_around_method_modifiers;
sub get_before_method_modifiers;
sub get_before_modifiers;
sub get_roles;
sub is_anon_role;
sub method_metaclass;
}
package Mouse::Meta::TypeConstraint {
sub __is_parameterized;
sub _compiled_type_constraint;
sub _identity;
sub check;
sub compile_type_constraint;
sub has_coercion;
sub message;
sub name;
sub parent;
sub type_parameter;
}
package Mouse::Object {
sub BUILDALL;
sub BUILDARGS;
sub DEMOLISHALL;
sub DESTROY;
sub new;
}
package Mouse::Util {
sub __register_metaclass_storage;
sub generate_can_predicate_for;
sub generate_isa_predicate_for;
sub get_code_info;
sub get_code_package;
sub get_code_ref;
sub get_linear_isa($;$) ;
sub install_subroutines;
sub is_a_metaclass;
sub is_a_metarole;
sub is_a_type_constraint;
sub is_class_loaded;
sub is_valid_class_name;
}
package Mouse::Util::TypeConstraints {
sub Any;
sub ArrayRef;
sub Bool;
sub CLONE;
sub ClassName;
sub CodeRef;
sub Defined;
sub FileHandle;
sub GlobRef;
sub HashRef;
sub Int;
sub Num;
sub Object;
sub Ref;
sub RegexpRef;
sub RoleName;
sub ScalarRef;
sub Str;
sub Undef;
sub Value;
sub _parameterize_ArrayRef_for;
sub _parameterize_HashRef_for;
sub _parameterize_Maybe_for;
}
package NDBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub clearerr;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Net::SSH2 {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub DESTROY;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub UIO_MAXIOV() ;
sub _new;
sub _poll;
sub _scp_get;
sub _scp_put;
sub _startup;
sub auth_agent;
sub auth_hostbased;
sub auth_keyboard;
sub auth_list;
sub auth_ok;
sub auth_password;
sub auth_publickey;
sub banner;
sub block_directions;
sub blocking;
sub callback;
sub channel;
sub constant;
sub debug;
sub disconnect;
sub error;
sub hostkey;
sub inet_aton;
sub inet_ntoa;
sub listen;
sub method;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub public_key;
sub sftp;
sub sock;
sub sockaddr_family;
sub tcpip;
sub trace;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub version;
}
package Net::SSH2::Channel {
sub DESTROY;
sub blocking;
sub close;
sub eof;
sub exit_signal;
sub exit_status;
sub ext_data;
sub flush;
sub process;
sub pty;
sub pty_size;
sub read;
sub send_eof;
sub session;
sub setenv;
sub wait_closed;
sub write;
}
package Net::SSH2::Dir {
sub DESTROY;
sub read;
}
package Net::SSH2::File {
sub DESTROY;
sub read;
sub seek;
sub setstat;
sub stat;
sub tell;
sub write;
}
package Net::SSH2::Listener {
sub DESTROY;
sub accept;
}
package Net::SSH2::PublicKey {
sub DESTROY;
sub add;
sub fetch;
sub remove;
}
package Net::SSH2::SFTP {
sub DESTROY;
sub error;
sub mkdir;
sub open;
sub opendir;
sub readlink;
sub realpath;
sub rename;
sub rmdir;
sub session;
sub setstat;
sub stat;
sub symlink;
sub unlink;
}
package Net::SSLeay {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub BIO_eof($) ;
sub BIO_f_ssl() ;
sub BIO_free($) ;
sub BIO_new($) ;
sub BIO_new_buffer_ssl_connect($) ;
sub BIO_new_file($$) ;
sub BIO_new_ssl($$) ;
sub BIO_new_ssl_connect($) ;
sub BIO_pending($) ;
sub BIO_read($;$) ;
sub BIO_s_mem() ;
sub BIO_ssl_copy_session_id($$) ;
sub BIO_ssl_shutdown($) ;
sub BIO_wpending($) ;
sub BIO_write($$) ;
sub CIPHER_description($$$) ;
sub CIPHER_get_bits($$) ;
sub COMP_add_compression_method($$) ;
sub CTX_add_client_CA($$) ;
sub CTX_add_extra_chain_cert($$) ;
sub CTX_add_session($$) ;
sub CTX_callback_ctrl($$$) ;
sub CTX_check_private_key($) ;
sub CTX_ctrl($$$$) ;
sub CTX_flush_sessions($$) ;
sub CTX_free($) ;
sub CTX_get_app_data($) ;
sub CTX_get_cert_store($) ;
sub CTX_get_client_CA_list($) ;
sub CTX_get_ex_data($$) ;
sub CTX_get_ex_new_index($$$$$) ;
sub CTX_get_mode($) ;
sub CTX_get_options($) ;
sub CTX_get_quiet_shutdown($) ;
sub CTX_get_read_ahead($) ;
sub CTX_get_session_cache_mode($) ;
sub CTX_get_timeout($) ;
sub CTX_get_verify_depth($) ;
sub CTX_get_verify_mode($) ;
sub CTX_load_verify_locations($$$) ;
sub CTX_need_tmp_RSA($) ;
sub CTX_new() ;
sub CTX_new_with_method($) ;
sub CTX_remove_session($$) ;
sub CTX_sess_accept($) ;
sub CTX_sess_accept_good($) ;
sub CTX_sess_accept_renegotiate($) ;
sub CTX_sess_cache_full($) ;
sub CTX_sess_cb_hits($) ;
sub CTX_sess_connect($) ;
sub CTX_sess_connect_good($) ;
sub CTX_sess_connect_renegotiate($) ;
sub CTX_sess_get_cache_size($) ;
sub CTX_sess_hits($) ;
sub CTX_sess_misses($) ;
sub CTX_sess_number($) ;
sub CTX_sess_set_cache_size($$) ;
sub CTX_sess_timeouts($) ;
sub CTX_sessions($) ;
sub CTX_set1_param($$) ;
sub CTX_set_app_data($$) ;
sub CTX_set_cert_store($$) ;
sub CTX_set_cert_verify_callback($$;$) ;
sub CTX_set_cipher_list($$) ;
sub CTX_set_client_CA_list($$) ;
sub CTX_set_default_passwd_cb($;$) ;
sub CTX_set_default_passwd_cb_userdata($;$) ;
sub CTX_set_default_verify_paths($) ;
sub CTX_set_ex_data($$$) ;
sub CTX_set_mode($$) ;
sub CTX_set_options($$) ;
sub CTX_set_purpose($$) ;
sub CTX_set_quiet_shutdown($$) ;
sub CTX_set_read_ahead($$) ;
sub CTX_set_session_cache_mode($$) ;
sub CTX_set_session_id_context($$$) ;
sub CTX_set_ssl_version($$) ;
sub CTX_set_timeout($$) ;
sub CTX_set_tmp_dh($$) ;
sub CTX_set_tmp_dh_callback($$) ;
sub CTX_set_tmp_rsa($$) ;
sub CTX_set_tmp_rsa_callback($$) ;
sub CTX_set_trust($$) ;
sub CTX_set_verify($$;$) ;
sub CTX_set_verify_depth($$) ;
sub CTX_tlsv1_new() ;
sub CTX_use_PKCS12_file($$$) ;
sub CTX_use_PrivateKey($$) ;
sub CTX_use_PrivateKey_file($$$) ;
sub CTX_use_RSAPrivateKey($$) ;
sub CTX_use_RSAPrivateKey_file($$$) ;
sub CTX_use_certificate($$) ;
sub CTX_use_certificate_chain_file($$) ;
sub CTX_use_certificate_file($$$) ;
sub CTX_v23_new() ;
sub CTX_v3_new() ;
sub DH_free($) ;
sub ENGINE_by_id($) ;
sub ENGINE_load_builtin_engines() ;
sub ENGINE_register_all_complete() ;
sub ENGINE_set_default($$) ;
sub ERR_clear_error() ;
sub ERR_error_string($;$) ;
sub ERR_get_error() ;
sub ERR_load_RAND_strings() ;
sub ERR_load_SSL_strings() ;
sub ERR_load_crypto_strings() ;
sub ERR_peek_error() ;
sub ERR_put_error($$$$$) ;
sub EVP_PKEY_copy_parameters($$) ;
sub EVP_add_digest($) ;
sub EVP_sha256() ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MD4($) ;
sub MD5($) ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub OBJ_cmp($$) ;
sub OBJ_dup($) ;
sub OBJ_ln2nid($) ;
sub OBJ_nid2ln($) ;
sub OBJ_nid2obj($) ;
sub OBJ_nid2sn($) ;
sub OBJ_obj2nid($) ;
sub OBJ_obj2txt($$) ;
sub OBJ_sn2nid($) ;
sub OBJ_txt2nid($) ;
sub OBJ_txt2obj($$) ;
sub OpenSSL_add_ssl_algorithms() ;
sub PEM_get_string_X509($) ;
sub PEM_read_bio_DHparams($;$$$) ;
sub PEM_read_bio_X509_CRL($;$$$) ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub P_ASN1_UTCTIME_put2string($) ;
sub RAND_add($$$) ;
sub RAND_bytes($$) ;
sub RAND_cleanup() ;
sub RAND_egd($) ;
sub RAND_egd_bytes($$) ;
sub RAND_file_name($) ;
sub RAND_load_file($$) ;
sub RAND_poll() ;
sub RAND_pseudo_bytes($$) ;
sub RAND_seed($) ;
sub RAND_status() ;
sub RAND_write_file($) ;
sub RIPEMD160($) ;
sub RSA_free($) ;
sub RSA_generate_key($$;$$) ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SESSION_free($) ;
sub SESSION_get_app_data($) ;
sub SESSION_get_ex_data($$) ;
sub SESSION_get_ex_new_index($$$$$) ;
sub SESSION_get_master_key($) ;
sub SESSION_get_time($) ;
sub SESSION_get_timeout($) ;
sub SESSION_new() ;
sub SESSION_print($$) ;
sub SESSION_print_fp($$) ;
sub SESSION_set_app_data($$) ;
sub SESSION_set_ex_data($$$) ;
sub SESSION_set_master_key($$) ;
sub SESSION_set_time($$) ;
sub SESSION_set_timeout($$) ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub SSL_get0_session($) ;
sub SSLeay_add_ssl_algorithms() ;
sub SSLv3_method() ;
sub TLSv1_method() ;
sub UIO_MAXIOV() ;
sub X509V3_EXT_d2i($) ;
sub X509_NAME_get_text_by_NID($$) ;
sub X509_NAME_oneline($) ;
sub X509_STORE_CTX_get_current_cert($) ;
sub X509_STORE_CTX_get_error($) ;
sub X509_STORE_CTX_get_error_depth($) ;
sub X509_STORE_CTX_get_ex_data($$) ;
sub X509_STORE_CTX_set_cert($$) ;
sub X509_STORE_CTX_set_error($$) ;
sub X509_STORE_CTX_set_ex_data($$$) ;
sub X509_STORE_add_cert($$) ;
sub X509_STORE_add_crl($$) ;
sub X509_STORE_set1_param($$) ;
sub X509_STORE_set_flags($$) ;
sub X509_STORE_set_purpose($$) ;
sub X509_STORE_set_trust($$) ;
sub X509_VERIFY_PARAM_add0_policy($$) ;
sub X509_VERIFY_PARAM_add0_table($) ;
sub X509_VERIFY_PARAM_clear_flags($$) ;
sub X509_VERIFY_PARAM_free($) ;
sub X509_VERIFY_PARAM_get_depth($) ;
sub X509_VERIFY_PARAM_get_flags($) ;
sub X509_VERIFY_PARAM_inherit($$) ;
sub X509_VERIFY_PARAM_lookup($) ;
sub X509_VERIFY_PARAM_new() ;
sub X509_VERIFY_PARAM_set1($$) ;
sub X509_VERIFY_PARAM_set1_name($$) ;
sub X509_VERIFY_PARAM_set1_policies($$) ;
sub X509_VERIFY_PARAM_set_depth($$) ;
sub X509_VERIFY_PARAM_set_flags($$) ;
sub X509_VERIFY_PARAM_set_purpose($$) ;
sub X509_VERIFY_PARAM_set_time($$) ;
sub X509_VERIFY_PARAM_set_trust($$) ;
sub X509_VERIFY_PARAM_table_cleanup() ;
sub X509_free($) ;
sub X509_get_ext($$) ;
sub X509_get_ext_by_NID($$$) ;
sub X509_get_fingerprint($$) ;
sub X509_get_issuer_name($) ;
sub X509_get_notAfter($) ;
sub X509_get_notBefore($) ;
sub X509_get_subjectAltNames($) ;
sub X509_get_subject_name($) ;
sub X509_load_cert_crl_file($$$) ;
sub X509_load_cert_file($$$) ;
sub X509_load_crl_file($$$) ;
sub X509_policy_level_get0_node($$) ;
sub X509_policy_level_node_count($) ;
sub X509_policy_node_get0_parent($) ;
sub X509_policy_node_get0_policy($) ;
sub X509_policy_node_get0_qualifiers($) ;
sub X509_policy_tree_free($) ;
sub X509_policy_tree_get0_level($$) ;
sub X509_policy_tree_get0_policies($) ;
sub X509_policy_tree_get0_user_policies($) ;
sub X509_policy_tree_level_count($) ;
sub X509_verify_cert_error_string($) ;
sub accept($) ;
sub add_client_CA($$) ;
sub add_file_cert_subjects_to_stack($$) ;
sub add_ssl_algorithms() ;
sub alert_desc_string($) ;
sub alert_desc_string_long($) ;
sub alert_type_string($) ;
sub alert_type_string_long($) ;
sub callback_ctrl($$$) ;
sub check_private_key($) ;
sub clear($) ;
sub clear_num_renegotiations($) ;
sub connect($) ;
sub constant($) ;
sub copy_session_id($$) ;
sub ctrl($$$$) ;
sub d2i_SSL_SESSION($$$) ;
sub debug_read;
sub do_handshake($) ;
sub do_https2;
sub do_https3;
sub do_https4;
sub do_https;
sub do_httpx2;
sub do_httpx3;
sub do_httpx4;
sub dump_peer_certificate($) ;
sub dup($) ;
sub free($) ;
sub get1_session($) ;
sub get_SSL_CTX($) ;
sub get_app_data($) ;
sub get_certificate($) ;
sub get_cipher($) ;
sub get_cipher_bits($$) ;
sub get_cipher_list($$) ;
sub get_client_CA_list($) ;
sub get_client_random($) ;
sub get_current_cipher($) ;
sub get_default_timeout($) ;
sub get_error($$) ;
sub get_ex_data($$) ;
sub get_ex_new_index($$$$$) ;
sub get_fd($) ;
sub get_finished($$$) ;
sub get_http3;
sub get_http4;
sub get_http;
sub get_https3;
sub get_https4;
sub get_https;
sub get_httpx3;
sub get_httpx4;
sub get_httpx;
sub get_keyblock_size($) ;
sub get_mode($) ;
sub get_options($) ;
sub get_peer_certificate($) ;
sub get_peer_finished($$$) ;
sub get_quiet_shutdown($) ;
sub get_rbio($) ;
sub get_read_ahead($) ;
sub get_server_random($) ;
sub get_session($) ;
sub get_shared_ciphers($$$) ;
sub get_shutdown($) ;
sub get_ssl_method($) ;
sub get_state($) ;
sub get_time($) ;
sub get_timeout($) ;
sub get_verify_depth($) ;
sub get_verify_mode($) ;
sub get_verify_result($) ;
sub get_wbio($) ;
sub head_http3;
sub head_http4;
sub head_http;
sub head_https3;
sub head_https4;
sub head_https;
sub head_httpx3;
sub head_httpx4;
sub head_httpx;
sub hello() ;
sub http_cat;
sub https_cat;
sub httpx_cat;
sub i2d_SSL_SESSION($$) ;
sub inet_aton;
sub inet_ntoa;
sub library_init() ;
sub load_client_CA_file($) ;
sub load_error_strings() ;
sub make_form;
sub make_headers;
sub need_tmp_RSA($) ;
sub new($) ;
sub new_x_ctx;
sub num_renegotiations($) ;
sub open_proxy_tcp_connection;
sub open_tcp_connection;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub peek($;$) ;
sub pending($) ;
sub post_http3;
sub post_http4;
sub post_http;
sub post_https3;
sub post_https4;
sub post_https;
sub post_httpx3;
sub post_httpx4;
sub post_httpx;
sub put_http3;
sub put_http4;
sub put_http;
sub put_https3;
sub put_https4;
sub put_https;
sub put_httpx3;
sub put_httpx4;
sub put_httpx;
sub randomize(;$$$) ;
sub read($;$) ;
sub renegotiate($) ;
sub rstate_string($) ;
sub rstate_string_long($) ;
sub session_reused($) ;
sub set1_param($$) ;
sub set_accept_state($) ;
sub set_app_data($$) ;
sub set_bio($$$) ;
sub set_cert_and_key($$$) ;
sub set_cipher_list($$) ;
sub set_client_CA_list($$) ;
sub set_connect_state($) ;
sub set_ex_data($$$) ;
sub set_fd($$) ;
sub set_info_callback($$) ;
sub set_mode($$) ;
sub set_options($$) ;
sub set_pref_cipher($$) ;
sub set_proxy($$;**) ;
sub set_purpose($$) ;
sub set_quiet_shutdown($$) ;
sub set_read_ahead($;$) ;
sub set_rfd($$) ;
sub set_server_cert_and_key($$$) ;
sub set_session($$) ;
sub set_session_id_context($$$) ;
sub set_session_secret_cb($$;$) ;
sub set_shutdown($$) ;
sub set_ssl_method($$) ;
sub set_time($$) ;
sub set_timeout($$) ;
sub set_tmp_dh($$) ;
sub set_tmp_dh_callback($$) ;
sub set_tmp_rsa($$) ;
sub set_tmp_rsa_callback($$) ;
sub set_trust($$) ;
sub set_verify($$$) ;
sub set_verify_depth($$) ;
sub set_verify_result($$) ;
sub set_wfd($$) ;
sub shutdown($) ;
sub sk_X509_NAME_free($) ;
sub sk_X509_NAME_num($) ;
sub sk_X509_NAME_value($$) ;
sub sockaddr_family;
sub ssl_read_CRLF($;$) ;
sub ssl_read_all;
sub ssl_read_until($;$$) ;
sub ssl_write_CRLF($$) ;
sub ssl_write_all;
sub sslcat;
sub state($) ;
sub state_string($) ;
sub state_string_long($) ;
sub tcp_read_CRLF;
sub tcp_read_all;
sub tcp_read_until;
sub tcp_write_CRLF;
sub tcp_write_all;
sub tcpcat;
sub tcpxcat;
sub total_renegotiations($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub use_PrivateKey($$) ;
sub use_PrivateKey_ASN1($$$$) ;
sub use_PrivateKey_file($$$) ;
sub use_RSAPrivateKey($$) ;
sub use_RSAPrivateKey_ASN1($$$) ;
sub use_RSAPrivateKey_file($$$) ;
sub use_certificate($$) ;
sub use_certificate_ASN1($$$) ;
sub use_certificate_file($$$) ;
sub version($) ;
sub want($) ;
sub want_X509_lookup;
sub want_nothing;
sub want_read;
sub want_write;
sub write($$) ;
sub write_partial($$$$) ;
}
package ODBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package POSIX {
sub ARG_MAX() ;
sub B0() ;
sub B110() ;
sub B1200() ;
sub B134() ;
sub B150() ;
sub B1800() ;
sub B19200() ;
sub B200() ;
sub B2400() ;
sub B300() ;
sub B38400() ;
sub B4800() ;
sub B50() ;
sub B600() ;
sub B75() ;
sub B9600() ;
sub BRKINT() ;
sub CHILD_MAX() ;
sub CLOCAL() ;
sub CREAD() ;
sub CS5() ;
sub CS6() ;
sub CS7() ;
sub CS8() ;
sub CSIZE() ;
sub CSTOPB() ;
sub EAI_OVERFLOW() ;
sub EAI_SYSTEM() ;
sub ECHO() ;
sub ECHOE() ;
sub ECHOK() ;
sub ECHONL() ;
sub ENOTBLK() ;
sub ERESTART() ;
sub ETXTBSY() ;
sub FD_CLOEXEC() ;
sub F_DUPFD() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_RDLCK() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLKW() ;
sub F_UNLCK() ;
sub F_WRLCK() ;
sub HUPCL() ;
sub ICANON() ;
sub ICRNL() ;
sub IEXTEN() ;
sub IGNBRK() ;
sub IGNCR() ;
sub IGNPAR() ;
sub INLCR() ;
sub INPCK() ;
sub ISIG() ;
sub ISTRIP() ;
sub IXOFF() ;
sub IXON() ;
sub LC_MESSAGES() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_ctermid() ;
sub L_cuserid() ;
sub L_tmpname() ;
sub MAX_CANON() ;
sub MAX_INPUT() ;
sub MSG_CTRUNC() ;
sub MSG_EOR() ;
sub MSG_TRUNC() ;
sub NAME_MAX() ;
sub NCCS() ;
sub NDEBUG;
sub NGROUPS_MAX() ;
sub NOFLSH() ;
sub OPEN_MAX() ;
sub OPOST() ;
sub O_NOCTTY() ;
sub O_NONBLOCK() ;
sub PARENB() ;
sub PARMRK() ;
sub PARODD() ;
sub PIPE_BUF() ;
sub SA_NOCLDSTOP() ;
sub SA_NOCLDWAIT() ;
sub SA_NODEFER() ;
sub SA_ONSTACK() ;
sub SA_RESETHAND() ;
sub SA_RESTART() ;
sub SA_SIGINFO() ;
sub SIGALRM() ;
sub SIGBUS() ;
sub SIGCHLD() ;
sub SIGCONT() ;
sub SIGHUP() ;
sub SIGKILL() ;
sub SIGPIPE() ;
sub SIGPOLL() ;
sub SIGPROF() ;
sub SIGQUIT() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub SIGSTOP() ;
sub SIGSYS() ;
sub SIGTRAP() ;
sub SIGTSTP() ;
sub SIGTTIN() ;
sub SIGTTOU() ;
sub SIGURG() ;
sub SIGUSR1() ;
sub SIGUSR2() ;
sub SIGVTALRM() ;
sub SIGXCPU() ;
sub SIGXFSZ() ;
sub SIG_BLOCK() ;
sub SIG_SETMASK() ;
sub SIG_UNBLOCK() ;
sub SSIZE_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TCIFLUSH() ;
sub TCIOFF() ;
sub TCIOFLUSH() ;
sub TCION() ;
sub TCOFLUSH() ;
sub TCOOFF() ;
sub TCOON() ;
sub TCSADRAIN() ;
sub TCSAFLUSH() ;
sub TCSANOW() ;
sub TOSTOP() ;
sub TZNAME_MAX() ;
sub VEOF() ;
sub VEOL() ;
sub VERASE() ;
sub VINTR() ;
sub VKILL() ;
sub VMIN() ;
sub VQUIT() ;
sub VSTART() ;
sub VSTOP() ;
sub VSUSP() ;
sub VTIME() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub WUNTRACED() ;
sub _PC_CHOWN_RESTRICTED() ;
sub _PC_LINK_MAX() ;
sub _PC_MAX_CANON() ;
sub _PC_MAX_INPUT() ;
sub _PC_NAME_MAX() ;
sub _PC_NO_TRUNC() ;
sub _PC_PATH_MAX() ;
sub _PC_PIPE_BUF() ;
sub _PC_VDISABLE() ;
sub _SC_ARG_MAX() ;
sub _SC_CHILD_MAX() ;
sub _SC_CLK_TCK() ;
sub _SC_JOB_CONTROL() ;
sub _SC_NGROUPS_MAX() ;
sub _SC_OPEN_MAX() ;
sub _SC_PAGESIZE() ;
sub _SC_SAVED_IDS() ;
sub _SC_STREAM_MAX() ;
sub _SC_TZNAME_MAX() ;
sub _SC_VERSION() ;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub alarm;
sub asctime;
sub asin;
sub assert;
sub atan2;
sub atan;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp;
sub fabs;
sub fclose;
sub fcntl;
sub fdopen;
sub feof;
sub ferror;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub isalnum;
sub isalpha;
sub isatty;
sub iscntrl;
sub isdigit;
sub isgraph;
sub islower;
sub isprint;
sub ispunct;
sub isspace;
sub isupper;
sub isxdigit;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log;
sub longjmp;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub perror;
sub pipe;
sub pow;
sub printf;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub redef;
sub remove;
sub rename;
sub rewind;
sub rewinddir;
sub rmdir;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sprintf;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub tolower;
sub toupper;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unimpl;
sub unlink;
sub usage;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wcstombs;
sub wctomb;
sub write;
}
package POSIX::SigAction {
sub flags;
sub handler;
sub mask;
sub new;
sub safe;
}
package POSIX::SigRt {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub SCALAR;
sub STORE;
sub _check;
sub _croak;
sub _exist;
sub _getsig;
sub _init;
sub new;
}
package POSIX::SigSet {
sub DESTROY;
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub DESTROY;
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package PPI::Document {
sub _ARRAY0($) ;
sub _INSTANCE($$) ;
sub _SCALAR0($) ;
}
package PPI::Document::File {
sub _INSTANCE($$) ;
sub _STRING($) ;
}
package PPI::Document::Normalized {
sub _ARRAY($) ;
sub _INSTANCE($$) ;
sub blessed($) ;
sub refaddr($) ;
sub reftype($) ;
}
package PPI::Element {
sub _ARRAY($) ;
sub _INSTANCE($$) ;
sub refaddr($) ;
}
package PPI::Exception {
sub _INSTANCE($$) ;
}
package PPI::Lexer {
sub _INSTANCE($$) ;
sub _STRING($) ;
}
package PPI::Node {
sub _CODELIKE($) ;
sub _INSTANCE($$) ;
sub refaddr($) ;
}
package PPI::Statement {
sub _INSTANCE($$) ;
}
package PPI::Statement::Sub {
sub _INSTANCE($$) ;
}
package PPI::Statement::Variable {
sub _INSTANCE($$) ;
}
package PPI::Structure {
sub _INSTANCE($$) ;
}
package PPI::Token {
sub _INSTANCE($$) ;
}
package PPI::Token::Pod {
sub _INSTANCE($$) ;
}
package PPI::Token::Quote::Double {
sub _INSTANCE($$) ;
}
package PPI::Token::Symbol {
sub _INSTANCE($$) ;
}
package PPI::Tokenizer {
sub _ARRAY0($) ;
sub _INSTANCE($$) ;
sub _SCALAR0($) ;
}
package PPI::Util {
sub _ARRAY0($) ;
sub _INSTANCE($$) ;
sub _SCALAR0($) ;
}
package Package::DeprecationManager {
sub _HASH0($) ;
sub any(&@) ;
}
package Package::Stash {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Package::Stash::XS {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package PadWalker {
sub _upcontext;
sub closed_over;
sub peek_my;
sub peek_our;
sub peek_sub;
sub set_closed_over;
sub var_name;
}
package Padre::Util::Win32 {
sub _allow_set_foreground_window;
sub _execute_process_and_wait;
sub _get_current_process_memory_size;
sub _recycle_file;
}
package Params::Classify {
sub blessed_class($) ;
sub check_able($;$) ;
sub check_blessed($;$) ;
sub check_glob($) ;
sub check_ref($;$) ;
sub check_regexp($) ;
sub check_strictly_blessed($;$) ;
sub check_string($) ;
sub check_undef($) ;
sub is_able($;$) ;
sub is_blessed($;$) ;
sub is_glob($) ;
sub is_ref($;$) ;
sub is_regexp($) ;
sub is_strictly_blessed($;$) ;
sub is_string($) ;
sub is_undef($) ;
sub ref_type($) ;
sub scalar_class($) ;
}
package Params::Util {
sub _ARRAY($) ;
sub _ARRAY0($) ;
sub _ARRAYLIKE($) ;
sub _CODE($) ;
sub _CODELIKE($) ;
sub _HASH($) ;
sub _HASH0($) ;
sub _HASHLIKE($) ;
sub _INSTANCE($$) ;
sub _NUMBER($) ;
sub _REGEX($) ;
sub _SCALAR($) ;
sub _SCALAR0($) ;
sub _STRING($) ;
}
package Params::Validate {
sub validate(\@$) ;
sub validate_pos(\@@) ;
sub validate_with;
}
package Params::Validate::XS {
sub validate(\@$) ;
sub validate_pos(\@@) ;
sub validate_with;
}
package Parse::ExuberantCTags {
sub DESTROY;
sub findNextTag;
sub findTag;
sub firstTag;
sub new;
sub nextTag;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Pod::Find {
sub getdcwd(;@) ;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub set_prototype(&$) ;
sub tainted($) ;
sub weaken($) ;
}
package Scope::Upper {
sub CALLER(;$) ;
sub CLONE;
sub EVAL(;$) ;
sub HERE() ;
sub SCOPE(;$) ;
sub SUB(;$) ;
sub UP(;$) ;
sub localize($$;$) ;
sub localize_delete($$;$) ;
sub localize_elem($$$;$) ;
sub reap(&;$) ;
sub uid(;$) ;
sub unwind;
sub uplevel(&@) ;
sub validate_uid($) ;
sub want_at(;$) ;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AUTOLOAD;
sub EAI_ADDRFAMILY() ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_INFO() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_QUICKACK() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($) ;
sub pstore($$) ;
}
package Storable::Cxt {
sub DESTROY;
}
package String::CRC32 {
sub crc32;
}
package Sub::Identify {
sub get_code_info($) ;
}
package Sub::Name {
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Sys::Syslog {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub EAI_ADDRFAMILY() ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub LOG_FAC;
sub LOG_MAKEPRI;
sub LOG_MASK;
sub LOG_PRI;
sub LOG_UPTO;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_INFO() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_QUICKACK() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub closelog_xs;
sub constant;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub openlog_xs;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub setlocale;
sub setlogmask_xs;
sub sockaddr_family;
sub strftime;
sub syslog_xs;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Sys::Syslog::Win32 {
sub EVENTLOG_AUDIT_FAILURE;
sub EVENTLOG_AUDIT_SUCCESS;
sub EVENTLOG_BACKWARDS_READ;
sub EVENTLOG_END_ALL_PAIRED_EVENTS;
sub EVENTLOG_END_PAIRED_EVENT;
sub EVENTLOG_FORWARDS_READ;
sub EVENTLOG_PAIRED_EVENT_ACTIVE;
sub EVENTLOG_PAIRED_EVENT_INACTIVE;
sub EVENTLOG_SEEK_READ;
sub EVENTLOG_SEQUENTIAL_READ;
sub EVENTLOG_START_PAIRED_EVENT;
sub EVENTLOG_SUCCESS;
}
package Template {
sub blessed($) ;
}
package Template::Document {
sub is_utf8;
}
package Template::Filters {
sub blessed($) ;
}
package Template::Service {
sub blessed($) ;
}
package Template::Stash {
sub blessed($) ;
sub reftype($) ;
}
package Template::Stash::XS {
sub get;
sub set;
}
package Template::VMethods {
sub blessed($) ;
sub looks_like_number($) ;
}
package Term::ReadKey {
sub GetControlChars;
sub GetSpeed;
sub GetTermSizeGSIZE;
sub GetTermSizeGWINSZ;
sub GetTermSizeVIO;
sub GetTermSizeWin32;
sub SetControlChars;
sub SetReadMode;
sub SetTerminalSize;
sub Win32PeekChar;
sub blockoptions;
sub pollfile;
sub selectfile;
sub setnodelay;
sub termoptions;
sub termsizeoptions;
}
package Test::LeakTrace {
sub CLONE;
sub _finish;
sub _runops_installed;
sub _start;
sub count_sv;
}
package Test::Taint {
sub _taint;
}
package Text::CSV_XS {
sub Combine;
sub Parse;
sub SetDiag;
sub _cache_diag;
sub _cache_set;
sub getline;
sub getline_all;
sub print;
}
package Text::Soundex {
sub soundex;
sub soundex_xs;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub flags;
}
package Time::HiRes {
sub CLONE(;@) ;
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub gettimeofday() ;
sub nanosleep($) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$$$$$$;$$$) ;
sub _strptime($$) ;
sub _tzset() ;
}
package TryCatch::XS {
sub dump_stack;
sub install_op_checks;
sub set_linestr_offset;
sub uninstall_op_checks;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isNonchar;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub unpack_U;
sub varCE;
sub visualizeSortKey;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package Variable::Magic {
sub CLONE;
sub _wizard;
sub cast(\[$@%&*]$@) ;
sub dispell(\[$@%&*]$) ;
sub getdata(\[$@%&*]$) ;
}
package Win32 {
sub AbortSystemShutdown;
sub CopyFile;
sub CreateDirectory;
sub CreateFile;
sub DomainName;
sub ExpandEnvironmentStrings;
sub FormatMessage;
sub FreeLibrary;
sub FsType;
sub GetANSIPathName;
sub GetArchName;
sub GetChipName;
sub GetCurrentProcessId;
sub GetCurrentThreadId;
sub GetCwd;
sub GetFileVersion;
sub GetFolderPath;
sub GetFullPathName;
sub GetLastError;
sub GetLongPathName;
sub GetNextAvailDrive;
sub GetOSVersion;
sub GetProcAddress;
sub GetProductInfo;
sub GetShortPathName;
sub GetSystemMetrics;
sub GetTickCount;
sub GuidGen;
sub InitiateSystemShutdown;
sub IsAdminUser;
sub IsWin95;
sub IsWinNT;
sub LoadLibrary;
sub LoginName;
sub LookupAccountName;
sub LookupAccountSID;
sub MsgBox;
sub NodeName;
sub OutputDebugString;
sub RegisterServer;
sub SetChildShowWindow;
sub SetCwd;
sub SetLastError;
sub Sleep;
sub Spawn;
sub UnregisterServer;
}
package Win32::API {
sub Call;
sub FreeLibrary;
sub FromUnicode;
sub GetProcAddress;
sub IsUnicode;
sub LoadLibrary;
sub PointerAt;
sub PointerTo;
sub ReadMemory;
sub ToUnicode;
}
package Win32::API::Callback {
sub CallbackCreate;
sub DESTROY;
sub PushSelf;
}
package Win32::ChangeNotify {
sub Close($) ;
sub DESTROY($) ;
sub FindNext($) ;
sub _new($$$$) ;
sub close($) ;
sub constant($) ;
sub reset($) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::Console {
sub Alloc;
sub Free;
sub MouseButtons;
sub _CloseHandle;
sub _CreateConsoleScreenBuffer;
sub _FillConsoleOutputAttribute;
sub _FillConsoleOutputCharacter;
sub _FlushConsoleInputBuffer;
sub _GenerateConsoleCtrlEvent;
sub _GetConsoleCP;
sub _GetConsoleCursorInfo;
sub _GetConsoleMode;
sub _GetConsoleOutputCP;
sub _GetConsoleScreenBufferInfo;
sub _GetConsoleTitle;
sub _GetLargestConsoleWindowSize;
sub _GetNumberOfConsoleInputEvents;
sub _GetStdHandle;
sub _PeekConsoleInput;
sub _ReadConsole;
sub _ReadConsoleInput;
sub _ReadConsoleOutput;
sub _ReadConsoleOutputAttribute;
sub _ReadConsoleOutputCharacter;
sub _ScrollConsoleScreenBuffer;
sub _SetConsoleActiveScreenBuffer;
sub _SetConsoleCP;
sub _SetConsoleCursorInfo;
sub _SetConsoleCursorPosition;
sub _SetConsoleIcon;
sub _SetConsoleMode;
sub _SetConsoleOutputCP;
sub _SetConsoleScreenBufferSize;
sub _SetConsoleTextAttribute;
sub _SetConsoleTitle;
sub _SetConsoleWindowInfo;
sub _SetStdHandle;
sub _WriteConsole;
sub _WriteConsoleInput;
sub _WriteConsoleOutput;
sub _WriteConsoleOutputAttribute;
sub _WriteConsoleOutputCharacter;
sub constant;
}
package Win32::Daemon {
sub AcceptedControls;
sub CallbackTimer;
sub ConfigureService;
sub Constant;
sub CreateService;
sub DebugOutputPath;
sub DeleteService;
sub GetLastError;
sub GetSecurity;
sub GetServiceHandle;
sub GetVersion;
sub HideService;
sub IsDebugBuild;
sub QueryLastMessage;
sub QueryServiceConfig;
sub RegisterCallbacks;
sub RestoreService;
sub SetSecurity;
sub SetServiceBits;
sub ShowService;
sub StartService;
sub State;
sub StopService;
sub Timeout;
}
package Win32::Event {
sub DESTROY($) ;
sub new($;$$$) ;
sub open($$) ;
sub pulse($) ;
sub reset($) ;
sub set($) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::EventLog {
sub BackupEventLog;
sub ClearEventLog;
sub CloseEventLog;
sub DeregisterEventSource;
sub EVENTLOG_AUDIT_FAILURE;
sub EVENTLOG_AUDIT_SUCCESS;
sub EVENTLOG_BACKWARDS_READ;
sub EVENTLOG_END_ALL_PAIRED_EVENTS;
sub EVENTLOG_END_PAIRED_EVENT;
sub EVENTLOG_FORWARDS_READ;
sub EVENTLOG_PAIRED_EVENT_ACTIVE;
sub EVENTLOG_PAIRED_EVENT_INACTIVE;
sub EVENTLOG_SEEK_READ;
sub EVENTLOG_SEQUENTIAL_READ;
sub EVENTLOG_START_PAIRED_EVENT;
sub EVENTLOG_SUCCESS;
sub GetEventLogText;
sub GetNumberOfEventLogRecords;
sub GetOldestEventLogRecord;
sub OpenBackupEventLog;
sub OpenEventLog;
sub ReadEventLog;
sub RegisterEventSource;
sub WriteEventLog;
sub constant;
}
package Win32::Exe::InsertResourceSection {
sub _insert_resource_section;
}
package Win32::File {
sub GetAttributes($$) ;
sub SetAttributes($$) ;
sub constant($) ;
}
package Win32::GuiTest {
sub AllocateVirtualBufferImp;
sub CheckButton;
sub ClientToScreen;
sub EnableWindow;
sub FreeVirtualBufferImp;
sub GetActiveWindow;
sub GetAsyncKeyState;
sub GetCaretPos;
sub GetChildDepth;
sub GetChildWindows;
sub GetClassName;
sub GetComboContents;
sub GetComboText;
sub GetCursorPos;
sub GetDesktopWindow;
sub GetFocus;
sub GetForegroundWindow;
sub GetHeaderColumnCount;
sub GetListContents;
sub GetListText;
sub GetListViewHeader;
sub GetListViewItem;
sub GetListViewItemCount;
sub GetMenu;
sub GetMenuItemCount;
sub GetMenuItemID;
sub GetMenuItemIndex;
sub GetMenuItemInfo;
sub GetParent;
sub GetPopupHandle;
sub GetScreenRes;
sub GetSubMenu;
sub GetSystemMenu;
sub GetTabItems;
sub GetTreeViewSelPath;
sub GetWindow;
sub GetWindowLong;
sub GetWindowRect;
sub GetWindowText;
sub GrayOutButton;
sub IsCheckedButton;
sub IsChild;
sub IsGrayedButton;
sub IsListViewItemSel;
sub IsTabItemSel;
sub IsWindow;
sub IsWindowEnabled;
sub IsWindowVisible;
sub MouseMoveAbsPix;
sub MouseMoveWheel;
sub NormToScreen;
sub PostMessage;
sub ReadFromVirtualBufferImp;
sub ScreenToClient;
sub ScreenToNorm;
sub SelComboItem;
sub SelComboItemText;
sub SelComboString;
sub SelListViewItem;
sub SelListViewItemText;
sub SelTabItem;
sub SelTabItemText;
sub SendLButtonDown;
sub SendLButtonUp;
sub SendMButtonDown;
sub SendMButtonUp;
sub SendMessage;
sub SendMouseMoveAbs;
sub SendMouseMoveRel;
sub SendRButtonDown;
sub SendRButtonUp;
sub SendRawKey;
sub SetActiveWindow;
sub SetFocus;
sub SetForegroundWindow;
sub SetWindowPos;
sub ShowWindow;
sub TabCtrl_GetCurFocus;
sub TabCtrl_GetItemCount;
sub TabCtrl_SetCurFocus;
sub TabCtrl_SetCurSel;
sub UnCheckButton;
sub UnicodeSemantics;
sub VkKeyScan;
sub WMGetText;
sub WMSetText;
sub WaitForReady;
sub WindowFromPoint;
sub WriteToVirtualBufferImp;
}
package Win32::GuiTest::DibSect {
sub CopyClient;
sub CopyWindow;
sub DESTROY;
sub Destroy;
sub Invert;
sub SaveAs;
sub ToClipboard;
sub ToGrayScale;
sub new;
}
package Win32::IPC {
sub Wait($$) ;
sub constant($) ;
sub wait($;$) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::Job {
sub DESTROY;
sub kill;
sub new;
sub run;
sub spawn;
sub status;
sub watch;
}
package Win32::Job::_handle {
sub DESTROY;
}
package Win32::Mutex {
sub DESTROY($) ;
sub Release($) ;
sub new($;$$) ;
sub open($$) ;
sub release($) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::OLE {
sub DESTROY;
sub Dispatch;
sub EnumAllObjects;
sub Forward;
sub FreeUnusedLibraries;
sub GetActiveObject;
sub GetIDsOfNames;
sub GetObject;
sub GetTypeInfo;
sub Initialize;
sub MessageLoop;
sub QueryInterface;
sub QueryObjectType;
sub QuitMessageLoop;
sub SpinMessageLoop;
sub Uninitialize;
sub WithEvents;
sub _Unique;
sub new;
}
package Win32::OLE::Const {
sub _Constants;
sub _LoadRegTypeLib;
sub _ShowHelpContext;
sub _Typelibs;
}
package Win32::OLE::Enum {
sub All;
sub Clone;
sub DESTROY;
sub Next;
sub Reset;
sub Skip;
sub new;
}
package Win32::OLE::NLS {
sub CompareString;
sub GetLocaleInfo;
sub GetStringType;
sub GetSystemDefaultLCID;
sub GetSystemDefaultLangID;
sub GetUserDefaultLCID;
sub GetUserDefaultLangID;
sub LCMapString;
sub SendSettingChange;
sub SetLocaleInfo;
}
package Win32::OLE::Tie {
sub DESTROY;
sub FIRSTENUM;
sub FIRSTKEY;
sub Fetch;
sub NEXTENUM;
sub NEXTKEY;
sub Store;
}
package Win32::OLE::TypeInfo {
sub DESTROY;
sub GetContainingTypeLib;
sub _GetDocumentation;
sub _GetFuncDesc;
sub _GetImplTypeFlags;
sub _GetImplTypeInfo;
sub _GetNames;
sub _GetTypeAttr;
sub _GetVarDesc;
sub _new;
}
package Win32::OLE::TypeLib {
sub DESTROY;
sub GetTypeInfo;
sub _GetDocumentation;
sub _GetLibAttr;
sub _GetTypeInfo;
sub _GetTypeInfoCount;
sub new;
}
package Win32::OLE::Variant {
sub As;
sub ChangeType;
sub Copy;
sub Currency;
sub DESTROY;
sub Date;
sub Dim;
sub Get;
sub IsNothing;
sub IsNullString;
sub LastError;
sub Number;
sub Put;
sub Time;
sub Type;
sub Unicode;
sub Value;
sub _Clone;
sub _RefType;
sub _Value;
sub new;
}
package Win32::Pipe {
sub Info;
sub PipeBufferSize;
sub PipeClose;
sub PipeConnect;
sub PipeCreate;
sub PipeDisconnect;
sub PipeError;
sub PipeRead;
sub PipeResizeBuffer;
sub PipeWrite;
sub constant;
}
package Win32::Process {
sub Create;
sub DESTROY;
sub GetCurrentProcessID;
sub GetExitCode;
sub GetPriorityClass;
sub GetProcessAffinityMask;
sub GetProcessID;
sub Kill;
sub KillProcess;
sub Open;
sub Resume;
sub SetPriorityClass;
sub SetProcessAffinityMask;
sub Suspend;
sub Wait;
sub constant;
sub get_Win32_IPC_HANDLE;
sub get_process_handle;
}
package Win32::Semaphore {
sub DESTROY($) ;
sub Release($$;$) ;
sub new($$$;$) ;
sub open($$) ;
sub release($$;$) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::Shortcut {
sub _Exit;
sub _GetArguments;
sub _GetDescription;
sub _GetHotkey;
sub _GetIconLocation;
sub _GetPath;
sub _GetShowCmd;
sub _GetWorkingDirectory;
sub _Instance;
sub _Load;
sub _Release;
sub _Resolve;
sub _Save;
sub _SetArguments;
sub _SetDescription;
sub _SetHotkey;
sub _SetIconLocation;
sub _SetPath;
sub _SetShowCmd;
sub _SetWorkingDirectory;
sub constant;
}
package Win32::UTCFileTime {
sub CLONE(;@) ;
sub _alt_stat($) ;
sub _get_utc_file_times($) ;
sub _set_error_mode($) ;
sub _set_utc_file_times($$$) ;
sub constant($) ;
}
package Win32::WinError {
sub constant;
}
package Win32API::File {
sub CloseHandle;
sub CopyFileA;
sub CopyFileW;
sub CreateFileA;
sub CreateFileW;
sub DefineDosDeviceA;
sub DefineDosDeviceW;
sub DeleteFileA;
sub DeleteFileW;
sub DeviceIoControl;
sub FdGetOsFHandle;
sub GetDriveTypeA;
sub GetDriveTypeW;
sub GetFileAttributesA;
sub GetFileAttributesW;
sub GetFileSize;
sub GetFileType;
sub GetHandleInformation;
sub GetLogicalDriveStringsA;
sub GetLogicalDriveStringsW;
sub GetLogicalDrives;
sub GetOverlappedResult;
sub GetStdHandle;
sub GetVolumeInformationA;
sub GetVolumeInformationW;
sub IsContainerPartition;
sub IsRecognizedPartition;
sub MoveFileA;
sub MoveFileExA;
sub MoveFileExW;
sub MoveFileW;
sub OsFHandleOpenFd;
sub QueryDosDeviceA;
sub QueryDosDeviceW;
sub ReadFile;
sub SetErrorMode;
sub SetFilePointer;
sub SetHandleInformation;
sub SetStdHandle;
sub WriteFile;
sub _fileLastError;
}
package Win32API::Registry {
sub AbortSystemShutdownA;
sub AbortSystemShutdownW;
sub AllowPriv;
sub InitiateSystemShutdownA;
sub InitiateSystemShutdownW;
sub RegCloseKey;
sub RegConnectRegistryA;
sub RegConnectRegistryW;
sub RegCreateKeyA;
sub RegCreateKeyExA;
sub RegCreateKeyExW;
sub RegCreateKeyW;
sub RegDeleteKeyA;
sub RegDeleteKeyW;
sub RegDeleteValueA;
sub RegDeleteValueW;
sub RegFlushKey;
sub RegLoadKeyA;
sub RegLoadKeyW;
sub RegNotifyChangeKeyValue;
sub RegOpenKeyA;
sub RegOpenKeyExA;
sub RegOpenKeyExW;
sub RegOpenKeyW;
sub RegReplaceKeyA;
sub RegReplaceKeyW;
sub RegRestoreKeyA;
sub RegRestoreKeyW;
sub RegSaveKeyA;
sub RegSaveKeyW;
sub RegSetKeySecurity;
sub RegUnLoadKeyA;
sub RegUnLoadKeyW;
sub _RegEnumKeyA;
sub _RegEnumKeyExA;
sub _RegEnumKeyExW;
sub _RegEnumKeyW;
sub _RegEnumValueA;
sub _RegEnumValueW;
sub _RegGetKeySecurity;
sub _RegQueryInfoKeyA;
sub _RegQueryInfoKeyW;
sub _RegQueryMultipleValuesA;
sub _RegQueryMultipleValuesW;
sub _RegQueryValueA;
sub _RegQueryValueExA;
sub _RegQueryValueExW;
sub _RegQueryValueW;
sub _RegSetValueA;
sub _RegSetValueExA;
sub _RegSetValueExW;
sub _RegSetValueW;
sub _regLastError;
}
package Wx {
sub AboutBox;
sub AutoBufferedPaintDCFactory;
sub Bell;
sub CLONE;
sub ColourDisplay;
sub ContextId;
sub CreateFileTipProvider;
sub DirSelector;
sub DisplayDepth;
sub ExecuteArgs;
sub ExecuteCommand;
sub ExecuteStdout;
sub ExecuteStdoutStderr;
sub Exit;
sub FileSelector;
sub FindWindowAtPointer;
sub GetActiveWindow;
sub GetBatteryState;
sub GetClientDisplayRect;
sub GetColourFromUser;
sub GetDisplaySize;
sub GetDisplaySizeMM;
sub GetFontFromUser;
sub GetKeyState;
sub GetMousePosition;
sub GetMousePositionXY;
sub GetNumberFromUser;
sub GetOsDescription;
sub GetPasswordFromUser;
sub GetPowerType;
sub GetSingleChoice;
sub GetSingleChoiceData;
sub GetSingleChoiceIndex;
sub GetStockAccelerator;
sub GetStockHelpString;
sub GetStockLabel;
sub GetTextFromUser;
sub GetTopLevelParent;
sub GetTranslation;
sub GetTranslationNormal;
sub GetTranslationPlural;
sub GetWxPerlIcon;
sub InitAllImageHandlers;
sub IsStockID;
sub IsStockLabel;
sub LaunchDefaultBrowser;
sub Load;
sub MessageBox;
sub MicroSleep;
sub MilliSleep;
sub NewEventType;
sub NewId;
sub PostEvent;
sub RegisterId;
sub SafeYield;
sub SetAlwaysUTF8;
sub SetConstants;
sub SetConstantsOnce;
sub SetCursor;
sub SetEvents;
sub SetInheritance;
sub SetOvlConstants;
sub Shell;
sub ShowTip;
sub Sleep;
sub SysErrorCode;
sub SysErrorMsg;
sub Trap;
sub UnLoad;
sub UnsetConstants;
sub Usleep;
sub WakeUpIdle;
sub XmlInitResourceModule;
sub XmlInitXmlModule;
sub Yield;
sub YieldIfNeeded;
sub _boot_Constant($$) ;
sub _boot_Controls($$) ;
sub _boot_Events($$) ;
sub _boot_Frames($$) ;
sub _boot_GDI($$) ;
sub _boot_Window($$) ;
sub _get_packages;
sub _load_plugin;
sub _unload_plugin;
sub _utf8_off;
sub _utf8_on;
sub _xsmatch(\@$;$$) ;
sub constant;
sub gettext;
sub looks_like_number;
sub wxDF_BITMAP;
sub wxDF_FILENAME;
sub wxDF_METAFILE;
sub wxDF_TEXT;
sub wxDF_UNICODETEXT;
sub wxLogDebug;
sub wxLogError;
sub wxLogFatalError;
sub wxLogMessage;
sub wxLogStatus;
sub wxLogStatusFrame;
sub wxLogSysError;
sub wxLogTraceMask;
sub wxLogVerbose;
sub wxLogWarning;
sub wxSOCKET_CONNECTION;
sub wxSOCKET_CONNECTION_FLAG;
sub wxSOCKET_INPUT;
sub wxSOCKET_INPUT_FLAG;
sub wxSOCKET_LOST;
sub wxSOCKET_LOST_FLAG;
sub wxSOCKET_OUTPUT;
sub wxSOCKET_OUTPUT_FLAG;
}
package Wx::ANIHandler {
sub new;
}
package Wx::AUI {
sub SetEvents;
}
package Wx::AboutDialogInfo {
sub AddArtist;
sub AddDeveloper;
sub AddDocWriter;
sub AddTranslator;
sub GetCopyright;
sub GetDescription;
sub GetIcon;
sub GetLicence;
sub GetName;
sub GetVersion;
sub GetWebSiteDescription;
sub GetWebSiteURL;
sub HasArtists;
sub HasCopyright;
sub HasDescription;
sub HasDevelopers;
sub HasDocWriters;
sub HasIcon;
sub HasLicence;
sub HasTranslators;
sub HasVersion;
sub HasWebSite;
sub SetArtists;
sub SetCopyright;
sub SetDescription;
sub SetDevelopers;
sub SetDocWriters;
sub SetIcon;
sub SetLicence;
sub SetLicense;
sub SetName;
sub SetTranslators;
sub SetVersion;
sub SetWebSite;
sub new;
}
package Wx::AcceleratorEntry {
sub CLONE;
sub Create;
sub DESTROY;
sub GetCommand;
sub GetFlags;
sub GetKeyCode;
sub Set;
sub new;
}
package Wx::AcceleratorTable {
sub CLONE;
sub DESTROY;
sub IsOk;
sub Ok;
sub new;
}
package Wx::ActivateEvent {
sub GetActive;
sub new;
}
package Wx::Animation {
sub CLONE;
sub DESTROY;
sub GetDelay;
sub GetFrame;
sub GetFrameCount;
sub GetSize;
sub IsOk;
sub Load;
sub LoadFile;
sub new;
}
package Wx::AnimationCtrl {
sub Create;
sub GetAnimation;
sub GetInactiveBitmap;
sub IsPlaying;
sub LoadFile;
sub Play;
sub SetAnimation;
sub SetInactiveBitmap;
sub Stop;
sub new;
sub newDefault;
}
package Wx::App {
sub Dispatch;
sub Exit;
sub ExitMainLoop;
sub GetAppName;
sub GetClassName;
sub GetComCtl32Version;
sub GetExitOnFrameDelete;
sub GetInstance;
sub GetLayoutDirection;
sub GetStdIcon;
sub GetTopWindow;
sub GetUseBestVisual;
sub GetVendorName;
sub IsActive;
sub IsMainLoopRunning;
sub MainLoop;
sub Pending;
sub ProcessIdle;
sub ProcessPendingEvents;
sub SendIdleEvents;
sub SetAppName;
sub SetClassName;
sub SetExitOnFrameDelete;
sub SetInstance;
sub SetTopWindow;
sub SetUseBestVisual;
sub SetVendorName;
sub Yield;
}
package Wx::ArchiveFSHandler {
sub new;
}
package Wx::ArtProvider {
sub DeleteProvider;
sub GetBitmap;
sub GetIcon;
sub InsertProvider;
sub PopProvider;
sub PushProvider;
sub RemoveProvider;
}
package Wx::AuiManager {
sub AddPane;
sub AddPaneDefault;
sub AddPaneDirection;
sub AddPanePoint;
sub CLONE;
sub ClosePane;
sub DESTROY;
sub DetachPane;
sub GetAllPanes;
sub GetFlags;
sub GetManagedWindow;
sub GetPane;
sub GetPaneString;
sub GetPaneWindow;
sub HideHint;
sub InsertPane;
sub LoadPaneInfo;
sub LoadPerspective;
sub MaximizePane;
sub RestoreMaximizedPane;
sub RestorePane;
sub SavePaneInfo;
sub SavePerspective;
sub SetDockSizeConstraint;
sub SetFlags;
sub SetManagedWindow;
sub ShowHint;
sub UnInit;
sub Update;
sub new;
}
package Wx::AuiManagerEvent {
sub CanVeto;
sub GetButton;
sub GetPane;
sub GetVeto;
sub SetButton;
sub SetCanVeto;
sub Veto;
sub new;
}
package Wx::AuiNotebook {
sub AddPage;
sub AdvanceSelection;
sub Create;
sub DeletePage;
sub GetAuiManager;
sub GetHeightForPageHeight;
sub GetPage;
sub GetPageBitmap;
sub GetPageCount;
sub GetPageIndex;
sub GetPageText;
sub GetSelection;
sub GetTabCtrlHeight;
sub InsertPage;
sub RemovePage;
sub SetMeasuringFont;
sub SetNormalFont;
sub SetPageBitmap;
sub SetPageText;
sub SetSelectedFont;
sub SetSelection;
sub SetTabCtrlHeight;
sub SetUniformBitmapSize;
sub SetWindowStyleFlag;
sub ShowWindowMenu;
sub Split;
sub new;
sub newDefault;
sub newFull;
}
package Wx::AuiNotebookEvent {
sub GetDragSource;
sub GetOldSelection;
sub GetSelection;
sub SetDragSource;
sub SetOldSelection;
sub SetSelection;
sub new;
}
package Wx::AuiPaneInfo {
sub BestSize;
sub BestSizeSize;
sub BestSizeWH;
sub Bottom;
sub BottomDockable;
sub CLONE;
sub Caption;
sub CaptionVisible;
sub Center;
sub CenterPane;
sub Centre;
sub CentrePane;
sub CloseButton;
sub DESTROY;
sub DefaultPane;
sub DestroyOnClose;
sub Direction;
sub Dock;
sub Dockable;
sub Fixed;
sub Float;
sub Floatable;
sub FloatingPosition;
sub FloatingPositionPoint;
sub FloatingPositionXY;
sub FloatingSize;
sub FloatingSizeSize;
sub FloatingSizeWH;
sub Gripper;
sub GripperTop;
sub HasBorder;
sub HasCaption;
sub HasCloseButton;
sub HasFlag;
sub HasGripper;
sub HasGripperTop;
sub HasMaximizeButton;
sub HasMinimizeButton;
sub HasPinButton;
sub Hide;
sub IsBottomDockable;
sub IsDestroyOnClose;
sub IsDocked;
sub IsFixed;
sub IsFloatable;
sub IsFloating;
sub IsLeftDockable;
sub IsMaximized;
sub IsMovable;
sub IsOk;
sub IsResizable;
sub IsRightDockable;
sub IsShown;
sub IsToolbar;
sub IsTopDockable;
sub Layer;
sub Left;
sub LeftDockable;
sub MaxSize;
sub MaxSizeSize;
sub MaxSizeWH;
sub Maximize;
sub MaximizeButton;
sub MinSize;
sub MinSizeSize;
sub MinSizeWH;
sub MinimizeButton;
sub Movable;
sub Name;
sub PaneBorder;
sub PinButton;
sub Position;
sub Resizable;
sub Restore;
sub Right;
sub RightDockable;
sub Row;
sub SafeSet;
sub SetFlag;
sub Show;
sub ToolbarPane;
sub Top;
sub TopDockable;
sub Window;
sub new;
}
package Wx::AutoBufferedPaintDC {
sub new;
}
package Wx::BMPHandler {
sub new;
}
package Wx::BestHelpController {
sub new;
}
package Wx::Bitmap {
sub AddHandler;
sub CLONE;
sub ConvertToImage;
sub CopyFromIcon;
sub DESTROY;
sub GetDepth;
sub GetHandlers;
sub GetHeight;
sub GetMask;
sub GetPalette;
sub GetSubBitmap;
sub GetWidth;
sub InitStandardHandlers;
sub InsertHandler;
sub IsOk;
sub LoadFile;
sub Ok;
sub RemoveHandler;
sub SaveFile;
sub SetDepth;
sub SetHeight;
sub SetMask;
sub SetPalette;
sub SetWidth;
sub new;
sub newEmpty;
sub newFile;
sub newFromBits;
sub newFromXPM;
sub newIcon;
sub newImage;
}
package Wx::BitmapButton {
sub Create;
sub GetBitmapDisabled;
sub GetBitmapFocus;
sub GetBitmapHover;
sub GetBitmapLabel;
sub GetBitmapSelected;
sub SetBitmapDisabled;
sub SetBitmapFocus;
sub SetBitmapHover;
sub SetBitmapLabel;
sub SetBitmapSelected;
sub new;
sub newDefault;
sub newFull;
}
package Wx::BitmapComboBox {
sub Append;
sub AppendData;
sub AppendString;
sub Create;
sub GetBitmapSize;
sub GetItemBitmap;
sub Insert;
sub InsertData;
sub InsertString;
sub SetItemBitmap;
sub new;
sub newDefault;
sub newFull;
}
package Wx::BitmapDataObject {
sub GetBitmap;
sub SetBitmap;
sub new;
}
package Wx::BookCtrl {
sub AddPage;
sub AdvanceSelection;
sub AssignImageList;
sub CalcSizeFromPage;
sub ChangeSelection;
sub DeleteAllPages;
sub DeletePage;
sub GetControlSizer;
sub GetCurrentPage;
sub GetFitToCurrentPage;
sub GetImageList;
sub GetInternalBorder;
sub GetPage;
sub GetPageCount;
sub GetPageImage;
sub GetPageText;
sub GetSelection;
sub HitTest;
sub InsertPage;
sub IsVertical;
sub RemovePage;
sub SetFitToCurrentPage;
sub SetImageList;
sub SetInternalBorder;
sub SetPageImage;
sub SetPageSize;
sub SetPageText;
sub SetSelection;
}
package Wx::BookCtrlEvent {
sub GetOldSelection;
sub GetSelection;
sub SetOldSelection;
sub SetSelection;
}
package Wx::BoxSizer {
sub GetOrientation;
sub new;
}
package Wx::Brush {
sub CLONE;
sub DESTROY;
sub GetColour;
sub GetStipple;
sub GetStyle;
sub IsHatch;
sub IsOk;
sub Ok;
sub SetColour;
sub SetColourColour;
sub SetColourName;
sub SetColourRGB;
sub SetStipple;
sub SetStyle;
sub new;
sub newBitmap;
sub newColour;
sub newName;
}
package Wx::BufferedDC {
sub GetStyle;
sub Init;
sub InitBitmap;
sub InitSize;
sub SetStyle;
sub UnMask;
sub new;
sub newBitmap;
sub newDefault;
sub newSize;
}
package Wx::BufferedPaintDC {
sub new;
sub newBitmap;
sub newWindow;
}
package Wx::BusyCursor {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::BusyInfo {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::Button {
sub Create;
sub GetDefaultSize;
sub GetLabel;
sub SetBitmapMargins;
sub SetDefault1;
sub SetDefault;
sub SetLabel;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CHMHelpController {
sub new;
}
package Wx::CURHandler {
sub new;
}
package Wx::CalendarCtrl {
sub Create;
sub EnableHolidayDisplay;
sub EnableMonthChange;
sub EnableYearChange;
sub GetAttr;
sub GetDate;
sub GetHeaderColourBg;
sub GetHeaderColourFg;
sub GetHighlightColourBg;
sub GetHighlightColourFg;
sub GetHolidayColourBg;
sub GetHolidayColourFg;
sub GetLowerDateLimit;
sub GetUpperDateLimit;
sub ResetAttr;
sub SetAttr;
sub SetDate;
sub SetDateRange;
sub SetHeaderColours;
sub SetHighlightColours;
sub SetHoliday;
sub SetHolidayColours;
sub SetLowerDateLimit;
sub SetUpperDateLimit;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CalendarDateAttr {
sub CLONE;
sub DESTROY;
sub GetBackgroundColour;
sub GetBorder;
sub GetBorderColour;
sub GetFont;
sub GetTextColour;
sub HasBackgroundColour;
sub HasBorder;
sub HasBorderColour;
sub HasFont;
sub HasTextColour;
sub IsHoliday;
sub SetBackgroundColour;
sub SetBorder;
sub SetBorderColour;
sub SetFont;
sub SetHoliday;
sub SetTextColour;
sub new;
}
package Wx::CalendarEvent {
sub GetWeekDay;
}
package Wx::Caret {
sub Create;
sub CreateSize;
sub CreateWH;
sub Destroy;
sub GetBlinkTime;
sub GetPosition;
sub GetPositionXY;
sub GetSize;
sub GetSizeWH;
sub GetWindow;
sub Hide;
sub IsOk;
sub IsVisible;
sub Move;
sub MovePoint;
sub MoveXY;
sub SetBlinkTime;
sub SetSize;
sub SetSizeSize;
sub SetSizeWH;
sub Show;
sub new;
sub newDefault;
sub newSize;
sub newWH;
}
package Wx::CaretSuspend {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::CheckBox {
sub Create;
sub Get3StateValue;
sub GetValue;
sub Is3State;
sub Is3rdStateAllowedForUser;
sub IsChecked;
sub Set3StateValue;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CheckListBox {
sub Check;
sub Create;
sub IsChecked;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ChildFocusEvent {
sub GetWindow;
sub new;
}
package Wx::Choice {
sub Clear;
sub Create;
sub Delete;
sub GetColumns;
sub GetCurrentSelection;
sub SetColumns;
sub SetSelection;
sub SetStringSelection;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Choicebook {
sub Create;
sub GetChoiceCtrl;
sub IsVertical;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ClassInfo {
sub FindClass;
sub GetBaseClassName1;
sub GetBaseClassName2;
sub GetClassName;
}
package Wx::ClientDC {
sub new;
}
package Wx::Clipboard {
sub AddData;
sub Clear;
sub Close;
sub Flush;
sub GetData;
sub IsOpened;
sub IsSupported;
sub Open;
sub SetData;
sub UsePrimarySelection;
}
package Wx::ClipboardTextEvent {
sub new;
}
package Wx::CloseEvent {
sub CanVeto;
sub GetLoggingOff;
sub SetCanVeto;
sub SetLoggingOff;
sub Veto;
sub new;
}
package Wx::CollapsiblePane {
sub Collapse;
sub Create;
sub Expand;
sub GetPane;
sub IsCollapsed;
sub IsExpanded;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CollapsiblePaneEvent {
sub GetCollapsed;
sub SetCollapsed;
sub new;
}
package Wx::Colour {
sub Alpha;
sub Blue;
sub CLONE;
sub DESTROY;
sub GetAsString;
sub GetPixel;
sub Green;
sub IsOk;
sub Ok;
sub Red;
sub Set;
sub new;
sub newName;
sub newRGB;
sub newRGBA;
}
package Wx::ColourData {
sub CLONE;
sub DESTROY;
sub GetChooseFull;
sub GetColour;
sub GetCustomColour;
sub SetChooseFull;
sub SetColour;
sub SetCustomColour;
sub new;
}
package Wx::ColourDatabase {
sub AddColour;
sub Find;
sub FindName;
}
package Wx::ColourDialog {
sub GetColourData;
sub ShowModal;
sub new;
}
package Wx::ColourPickerCtrl {
sub Create;
sub GetColour;
sub SetColour;
sub SetColourColour;
sub SetColourString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ColourPickerEvent {
sub GetColour;
sub SetColour;
}
package Wx::ComboBox {
sub CanCopy;
sub CanCut;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub Copy;
sub Create;
sub Cut;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetValue;
sub Paste;
sub Redo;
sub Remove;
sub Replace;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetMark;
sub SetSelection;
sub SetSelectionN;
sub SetValue;
sub Undo;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ComboCtrl {
sub Copy;
sub Create;
sub Cut;
sub EnablePopupAnimation;
sub GetBitmapDisabled;
sub GetBitmapHover;
sub GetBitmapNormal;
sub GetBitmapPressed;
sub GetButton;
sub GetButtonSize;
sub GetCustomPaintWidth;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetPopupControl;
sub GetPopupWindow;
sub GetTextCtrl;
sub GetTextRect;
sub GetValue;
sub HidePopup;
sub IsPopupShown;
sub Paste;
sub Remove;
sub Replace;
sub SetButtonBitmaps;
sub SetButtonPosition;
sub SetCustomPaintWidth;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetPopupAnchor;
sub SetPopupControl;
sub SetPopupExtents;
sub SetPopupMaxHeight;
sub SetPopupMinWidth;
sub SetSelection;
sub SetText;
sub SetValue;
sub ShowPopup;
sub Undo;
sub UseAltPopupWindow;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ComboPopup {
sub Dismiss;
sub GetAdjustedSize;
sub GetComboCtrl;
sub IsCreated;
sub LazyCreate;
sub OnComboDoubleClick;
sub OnComboKeyEvent;
sub OnDismiss;
sub OnPopup;
sub PaintComboControl;
sub SetStringValue;
sub new;
}
package Wx::Command {
sub CLONE;
sub CanUndo;
sub DESTROY;
sub Destroy;
sub Do;
sub GetName;
sub Undo;
}
package Wx::CommandEvent {
sub GetClientData;
sub GetExtraLong;
sub GetInt;
sub GetSelection;
sub GetString;
sub IsChecked;
sub IsSelection;
sub SetClientData;
sub SetExtraLong;
sub SetInt;
sub SetString;
sub new;
}
package Wx::CommandProcessor {
sub CLONE;
sub CanRedo;
sub CanUndo;
sub ClearCommands;
sub DESTROY;
sub GetCommands;
sub GetCurrentCommand;
sub GetEditMenu;
sub GetMaxCommands;
sub GetRedoAccelerator;
sub GetRedoMenuLabel;
sub GetUndoAccelerator;
sub GetUndoMenuLabel;
sub Initialize;
sub IsDirty;
sub MarkAsSaved;
sub Redo;
sub SetEditMenu;
sub SetMenuStrings;
sub SetRedoAccelerator;
sub SetUndoAccelerator;
sub Store;
sub Submit;
sub Undo;
sub new;
}
package Wx::ConfigBase {
sub Create;
sub DeleteAll;
sub DeleteEntry;
sub DeleteGroup;
sub Destroy;
sub DontCreateOnDemand;
sub Exists;
sub Flush;
sub Get;
sub GetAppName;
sub GetEntryType;
sub GetFirstEntry;
sub GetFirstGroup;
sub GetNextEntry;
sub GetNextGroup;
sub GetNumberOfEntries;
sub GetNumberOfGroups;
sub GetPath;
sub GetVendorName;
sub HasEntry;
sub HasGroup;
sub IsExpandingEnvVars;
sub IsRecordingDefaults;
sub Read;
sub ReadBool;
sub ReadInt;
sub RenameEntry;
sub RenameGroup;
sub Set;
sub SetExpandEnvVars;
sub SetPath;
sub SetRecordDefaults;
sub Write;
sub WriteBool;
sub WriteFloat;
sub WriteInt;
}
package Wx::ContextHelp {
sub BeginContextHelp;
sub CLONE;
sub DESTROY;
sub EndContextHelp;
sub SetStatus;
sub new;
}
package Wx::ContextHelpButton {
sub new;
}
package Wx::ContextMenuEvent {
sub GetPosition;
sub SetPosition;
sub new;
}
package Wx::Control {
sub Command;
sub GetLabelText;
}
package Wx::ControlWithItems {
sub Append;
sub AppendData;
sub AppendItems;
sub AppendString;
sub Clear;
sub Delete;
sub FindString;
sub FindStringCase;
sub FindStringNoCase;
sub GetClientData;
sub GetCount;
sub GetSelection;
sub GetString;
sub GetStringSelection;
sub GetStrings;
sub Insert;
sub InsertData;
sub InsertString;
sub IsEmpty;
sub Select;
sub SetClientData;
sub SetSelection;
sub SetString;
sub SetStringSelection;
}
package Wx::Cursor {
sub CLONE;
sub DESTROY;
sub IsOk;
sub Ok;
sub new;
sub newData;
sub newFile;
sub newId;
sub newImage;
}
package Wx::DC {
sub Blit;
sub CLONE;
sub CalcBoundingBox;
sub Clear;
sub CrossHair;
sub DESTROY;
sub DestroyClippingRegion;
sub DeviceToLogicalX;
sub DeviceToLogicalXRel;
sub DeviceToLogicalY;
sub DeviceToLogicalYRel;
sub DrawArc;
sub DrawBitmap;
sub DrawCheckMark;
sub DrawCheckMarkRect;
sub DrawCheckMarkXYWH;
sub DrawCircle;
sub DrawEllipse;
sub DrawEllipticArc;
sub DrawIcon;
sub DrawLabel;
sub DrawLabelBitmap;
sub DrawLabelNoBitmap;
sub DrawLine;
sub DrawLines;
sub DrawPoint;
sub DrawPolygon;
sub DrawRectangle;
sub DrawRotatedText;
sub DrawRoundedRectangle;
sub DrawSpline;
sub DrawText;
sub EndDoc;
sub EndPage;
sub FloodFill;
sub GetAsBitmap;
sub GetBackground;
sub GetBackgroundMode;
sub GetBrush;
sub GetCharHeight;
sub GetCharWidth;
sub GetClippingBox;
sub GetDepth;
sub GetDeviceOrigin;
sub GetFont;
sub GetLayoutDirection;
sub GetLogicalFunction;
sub GetLogicalScale;
sub GetMapMode;
sub GetMultiLineTextExtent;
sub GetPPI;
sub GetPartialTextExtents;
sub GetPen;
sub GetPixel;
sub GetSize;
sub GetSizeMM;
sub GetSizeMMWH;
sub GetSizeWH;
sub GetTextBackground;
sub GetTextExtent;
sub GetTextForeground;
sub GetUserScale;
sub GradientFillConcentric;
sub GradientFillConcentricNoPoint;
sub GradientFillConcentricPoint;
sub GradientFillLinear;
sub IsOk;
sub LogicalToDeviceX;
sub LogicalToDeviceXRel;
sub LogicalToDeviceY;
sub LogicalToDeviceYRel;
sub MaxX;
sub MaxY;
sub MinX;
sub MinY;
sub Ok;
sub ResetBoundingBox;
sub SetAxisOrientation;
sub SetBackground;
sub SetBackgroundMode;
sub SetBrush;
sub SetClippingRegion;
sub SetClippingRegionRegion;
sub SetClippingRegionXYWH;
sub SetDeviceOrigin;
sub SetFont;
sub SetLayoutDirection;
sub SetLogicalFunction;
sub SetLogicalScale;
sub SetMapMode;
sub SetPalette;
sub SetPen;
sub SetTextBackground;
sub SetTextForeground;
sub SetUserScale;
sub StartDoc;
sub StartPage;
}
package Wx::DCClipper {
sub CLONE;
sub DESTROY;
sub new;
sub newRect;
sub newRegion;
sub newXYWH;
}
package Wx::DCOverlay {
sub CLONE;
sub Clear;
sub DESTROY;
sub new;
sub newDefault;
sub newLong;
}
package Wx::DataFormat {
sub CLONE;
sub DESTROY;
sub GetId;
sub GetType;
sub SetId;
sub SetType;
sub newNative;
sub newUser;
}
package Wx::DataObject {
sub CLONE;
sub DESTROY;
sub Destroy;
sub GetAllFormats;
sub GetDataHere;
sub GetDataSize;
sub GetFormatCount;
sub GetPreferredFormat;
sub IsSupported;
sub SetData;
}
package Wx::DataObjectComposite {
sub Add;
sub GetReceivedFormat;
sub new;
}
package Wx::DataObjectSimple {
sub GetFormat;
sub SetFormat;
sub new;
}
package Wx::DatagramSocket {
sub RecvFrom;
sub SendTo;
sub new;
}
package Wx::DateEvent {
sub GetDate;
sub SetDate;
}
package Wx::DatePickerCtrl {
sub Create;
sub GetRange;
sub GetValue;
sub SetRange;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DateSpan {
sub Add;
sub GetDays;
sub GetMonths;
sub GetTotalDays;
sub GetWeeks;
sub GetYears;
sub Multiply;
sub Neg;
sub SetDays;
sub SetMonths;
sub SetWeeks;
sub SetYears;
sub Subtract;
sub new;
}
package Wx::DateTime {
sub AddDate;
sub AddTime;
sub CLONE;
sub DESTROY;
sub Format;
sub FormatDate;
sub FormatISODate;
sub FormatISOTime;
sub FormatTime;
sub GetAmPmStrings;
sub GetCentury;
sub GetCurrentMonth;
sub GetCurrentYear;
sub GetDay;
sub GetDayOfYear;
sub GetHour;
sub GetMillisecond;
sub GetMinute;
sub GetMonth;
sub GetMonthName;
sub GetNumberOfDaysInMonth;
sub GetNumberOfDaysInYear;
sub GetSecond;
sub GetWeekDay;
sub GetWeekDayName;
sub GetWeekOfMonth;
sub GetWeekOfYear;
sub GetYear;
sub IsBetween;
sub IsEarlierThan;
sub IsEqualTo;
sub IsLaterThan;
sub IsLeapYear;
sub IsSameDate;
sub IsSameTime;
sub IsStrictlyBetween;
sub IsValid;
sub Now;
sub ParseDate;
sub ParseDateTime;
sub ParseFormat;
sub ParseRfc822Date;
sub ParseTime;
sub ResetTime;
sub Set;
sub SetDay;
sub SetHMS;
sub SetHour;
sub SetJDN;
sub SetMillisecond;
sub SetMinute;
sub SetMonth;
sub SetSecond;
sub SetTimeT;
sub SetToCurrent;
sub SetYear;
sub Today;
sub UNow;
sub new;
sub newFromDMY;
sub newFromTimeT;
}
package Wx::Dialog {
sub Create;
sub CreateButtonSizer;
sub CreateSeparatedButtonSizer;
sub CreateStdDialogButtonSizer;
sub CreateTextSizer;
sub EndModal;
sub GetAffirmativeId;
sub GetEscapeId;
sub GetReturnCode;
sub GetTitle;
sub IsModal;
sub SetAffirmativeId;
sub SetEscapeId;
sub SetFocusIgnoringChildren;
sub SetIcon;
sub SetIcons;
sub SetReturnCode;
sub SetTitle;
sub ShowModal;
sub TransferDataFromWindow;
sub TransferDataToWindow;
sub Validate;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DirDialog {
sub GetMessage;
sub GetPath;
sub SetMessage;
sub SetPath;
sub ShowModal;
sub new;
}
package Wx::DirPickerCtrl {
sub Create;
sub GetPath;
sub SetPath;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Display {
sub CLONE;
sub ChangeMode;
sub DESTROY;
sub GetClientArea;
sub GetCount;
sub GetCurrentMode;
sub GetFromPoint;
sub GetFromWindow;
sub GetGeometry;
sub GetModes;
sub GetName;
sub IsOk;
sub IsPrimary;
sub ResetMode;
sub new;
}
package Wx::DocChildFrame {
sub Destroy;
sub GetDocument;
sub GetView;
sub SetDocument;
sub SetView;
sub new;
}
package Wx::DocMDIChildFrame {
sub Destroy;
sub GetDocument;
sub GetView;
sub SetDocument;
sub SetView;
sub new;
}
package Wx::DocMDIParentFrame {
sub GetDocumentManager;
sub new;
}
package Wx::DocManager {
sub ActivateView;
sub AddDocument;
sub AddFileToHistory;
sub AssociateTemplate;
sub Clear;
sub CloseDocuments;
sub CreateDocument;
sub CreateView;
sub DeleteTemplate;
sub DisassociateTemplate;
sub FileHistoryAddFilesToMenu;
sub FileHistoryLoad;
sub FileHistoryRemoveMenu;
sub FileHistorySave;
sub FileHistoryUseMenu;
sub FindTemplateForPath;
sub FlushDoc;
sub GetCurrentDocument;
sub GetCurrentView;
sub GetDocuments;
sub GetFileHistory;
sub GetHistoryFile;
sub GetHistoryFilesCount;
sub GetLastDirectory;
sub GetMaxDocsOpen;
sub GetTemplates;
sub Initialize;
sub MakeDefaultName;
sub MakeFrameTitle;
sub MatchTemplate;
sub OnCreateFileHistory;
sub OnFileClose;
sub OnFileCloseAll;
sub OnFileNew;
sub OnFileOpen;
sub OnFileRevert;
sub OnFileSave;
sub OnFileSaveAs;
sub OnPreview;
sub OnPrint;
sub OnRedo;
sub OnUndo;
sub OnUpdateFileClose;
sub OnUpdateFileNew;
sub OnUpdateFileOpen;
sub OnUpdateFileRevert;
sub OnUpdateFileSave;
sub OnUpdateFileSaveAs;
sub OnUpdatePreview;
sub OnUpdatePrint;
sub OnUpdateRedo;
sub OnUpdateUndo;
sub RemoveDocument;
sub RemoveFileFromHistory;
sub SelectDocumentPath;
sub SelectDocumentType;
sub SelectViewType;
sub SetLastDirectory;
sub SetMaxDocsOpen;
sub new;
}
package Wx::DocParentFrame {
sub GetDocumentManager;
sub new;
}
package Wx::DocTemplate {
sub CreateDocument;
sub CreateView;
sub FileMatchesTemplate;
sub GetDefaultExtension;
sub GetDescription;
sub GetDirectory;
sub GetDocumentManager;
sub GetDocumentName;
sub GetFileFilter;
sub GetFlags;
sub GetViewName;
sub IsVisible;
sub SetDefaultExtension;
sub SetDescription;
sub SetDirectory;
sub SetDocumentManager;
sub SetFileFilter;
sub SetFlags;
sub new;
}
package Wx::Document {
sub AddView;
sub Close;
sub DeleteAllViews;
sub DeleteContents;
sub GetDocumentManager;
sub GetDocumentName;
sub GetDocumentSaved;
sub GetDocumentTemplate;
sub GetDocumentWindow;
sub GetFilename;
sub GetFirstView;
sub GetPrintableName;
sub GetTitle;
sub GetViews;
sub IsModified;
sub Modify;
sub NotifyClosing;
sub OnChangedViewList;
sub OnCloseDocument;
sub OnCreate;
sub OnCreateCommandProcessor;
sub OnNewDocument;
sub OnOpenDocument;
sub OnSaveDocument;
sub OnSaveModified;
sub RemoveView;
sub Revert;
sub Save;
sub SaveAs;
sub SetCommandProcessor;
sub SetDocumentName;
sub SetDocumentSaved;
sub SetDocumentTemplate;
sub SetFilename;
sub SetTitle;
sub UpdateAllViews;
sub new;
}
package Wx::DropFilesEvent {
sub GetFiles;
sub GetNumberOfFiles;
sub GetPosition;
}
package Wx::DropSource {
sub DoDragDrop;
sub GetDataObject;
sub SetCursor;
sub SetData;
sub newCursorData;
sub newCursorEmpty;
}
package Wx::DropTarget {
sub CLONE;
sub DESTROY;
sub GetData;
sub OnDragOver;
sub OnDrop;
sub OnEnter;
sub OnLeave;
sub SetDataObject;
sub new;
}
package Wx::EraseEvent {
sub GetDC;
sub new;
}
package Wx::Event {
sub CLONE;
sub DESTROY;
sub EVT_AUINOTEBOOK_ALLOW_DND($$$) ;
sub EVT_AUINOTEBOOK_BEGIN_DRAG($$$) ;
sub EVT_AUINOTEBOOK_BUTTON($$$) ;
sub EVT_AUINOTEBOOK_DRAG_MOTION($$$) ;
sub EVT_AUINOTEBOOK_END_DRAG($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CHANGED($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CHANGING($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CLOSE($$$) ;
sub EVT_AUI_PANE_BUTTON($$) ;
sub EVT_AUI_PANE_CLOSE($$) ;
sub EVT_AUI_PANE_MAXIMIZE($$) ;
sub EVT_AUI_PANE_RESTORE($$) ;
sub EVT_AUI_RENDER($$) ;
sub EVT_AUX1_DCLICK;
sub EVT_AUX1_DOWN;
sub EVT_AUX1_UP;
sub EVT_AUX2_DCLICK;
sub EVT_AUX2_DOWN;
sub EVT_AUX2_UP;
sub EVT_CHILD_FOCUS($$) ;
sub EVT_COLLAPSIBLEPANE_CHANGED($$$) ;
sub EVT_COLOURPICKER_CHANGED($$$) ;
sub EVT_COMMAND($$$$) ;
sub EVT_CREATE($$$) ;
sub EVT_DESTROY($$$) ;
sub EVT_DIRPICKER_CHANGED($$$) ;
sub EVT_FILEPICKER_CHANGED($$$) ;
sub EVT_FONTPICKER_CHANGED($$$) ;
sub EVT_GRID_CELL_BEGIN_DRAG($$) ;
sub EVT_GRID_CELL_CHANGE($$) ;
sub EVT_GRID_CELL_CHANGED($$) ;
sub EVT_GRID_CELL_LEFT_CLICK($$) ;
sub EVT_GRID_CELL_LEFT_DCLICK($$) ;
sub EVT_GRID_CELL_RIGHT_CLICK($$) ;
sub EVT_GRID_CELL_RIGHT_DCLICK($$) ;
sub EVT_GRID_CMD_CELL_BEGIN_DRAG($$$) ;
sub EVT_GRID_CMD_CELL_CHANGE($$$) ;
sub EVT_GRID_CMD_CELL_CHANGED($$$) ;
sub EVT_GRID_CMD_CELL_LEFT_CLICK($$$) ;
sub EVT_GRID_CMD_CELL_LEFT_DCLICK($$$) ;
sub EVT_GRID_CMD_CELL_RIGHT_CLICK($$$) ;
sub EVT_GRID_CMD_CELL_RIGHT_DCLICK($$$) ;
sub EVT_GRID_CMD_COL_SIZE($$$) ;
sub EVT_GRID_CMD_EDITOR_CREATED($$$) ;
sub EVT_GRID_CMD_EDITOR_HIDDEN($$$) ;
sub EVT_GRID_CMD_EDITOR_SHOWN($$$) ;
sub EVT_GRID_CMD_LABEL_LEFT_CLICK($$$) ;
sub EVT_GRID_CMD_LABEL_LEFT_DCLICK($$$) ;
sub EVT_GRID_CMD_LABEL_RIGHT_CLICK($$$) ;
sub EVT_GRID_CMD_LABEL_RIGHT_DCLICK($$$) ;
sub EVT_GRID_CMD_RANGE_SELECT($$$) ;
sub EVT_GRID_CMD_ROW_SIZE($$$) ;
sub EVT_GRID_CMD_SELECT_CELL($$$) ;
sub EVT_GRID_COL_SIZE($$) ;
sub EVT_GRID_EDITOR_CREATED($$) ;
sub EVT_GRID_EDITOR_HIDDEN($$) ;
sub EVT_GRID_EDITOR_SHOWN($$) ;
sub EVT_GRID_LABEL_LEFT_CLICK($$) ;
sub EVT_GRID_LABEL_LEFT_DCLICK($$) ;
sub EVT_GRID_LABEL_RIGHT_CLICK($$) ;
sub EVT_GRID_LABEL_RIGHT_DCLICK($$) ;
sub EVT_GRID_RANGE_SELECT($$) ;
sub EVT_GRID_ROW_SIZE($$) ;
sub EVT_GRID_SELECT_CELL($$) ;
sub EVT_HYPERLINK($$$) ;
sub EVT_ICONIZE($$) ;
sub EVT_LEFT_DCLICK($$) ;
sub EVT_LEFT_DOWN($$) ;
sub EVT_LEFT_UP($$) ;
sub EVT_MAXIMIZE($$) ;
sub EVT_MENU_HIGHLIGHT_ALL($$) ;
sub EVT_MIDDLE_DCLICK($$) ;
sub EVT_MIDDLE_DOWN($$) ;
sub EVT_MIDDLE_UP($$) ;
sub EVT_MOUSE_CAPTURE_CHANGED($$) ;
sub EVT_MOUSE_CAPTURE_LOST($$) ;
sub EVT_RICHTEXT_LEFT_CLICK($$$) ;
sub EVT_RICHTEXT_LEFT_DCLICK($$$) ;
sub EVT_RICHTEXT_MIDDLE_CLICK($$$) ;
sub EVT_RICHTEXT_RETURN($$$) ;
sub EVT_RICHTEXT_RIGHT_CLICK($$$) ;
sub EVT_RICHTEXT_STYLESHEET_CHANGED($$$) ;
sub EVT_RICHTEXT_STYLESHEET_CHANGING($$$) ;
sub EVT_RICHTEXT_STYLESHEET_REPLACED($$$) ;
sub EVT_RICHTEXT_STYLESHEET_REPLACING($$$) ;
sub EVT_RIGHT_DCLICK($$) ;
sub EVT_RIGHT_DOWN($$) ;
sub EVT_RIGHT_UP($$) ;
sub EVT_SEARCHCTRL_CANCEL_BTN($$$) ;
sub EVT_SEARCHCTRL_SEARCH_BTN($$$) ;
sub EVT_SET_CURSOR($$) ;
sub EVT_TASKBAR_CLICK($$) ;
sub EVT_TASKBAR_LEFT_DCLICK($$) ;
sub EVT_TASKBAR_LEFT_DOWN($$) ;
sub EVT_TASKBAR_LEFT_UP($$) ;
sub EVT_TASKBAR_MOVE($$) ;
sub EVT_TASKBAR_RIGHT_DCLICK($$) ;
sub EVT_TASKBAR_RIGHT_DOWN($$) ;
sub EVT_TASKBAR_RIGHT_UP($$) ;
sub EVT_TIMER($$$) ;
sub EVT_TREE_ITEM_GETTOOLTIP($$$) ;
sub EVT_TREE_STATE_IMAGE_CLICK($$$) ;
sub EVT_WINDOW_CREATE($$$) ;
sub EVT_WINDOW_DESTROY($$$) ;
sub EVT_WIZARD_CANCEL($$$) ;
sub EVT_WIZARD_FINISHED($$$) ;
sub EVT_WIZARD_HELP($$$) ;
sub EVT_WIZARD_PAGE_CHANGED($$$) ;
sub EVT_WIZARD_PAGE_CHANGING($$$) ;
sub GetEventObject;
sub GetEventType;
sub GetId;
sub GetSkipped;
sub GetTimestamp;
sub ResumePropagation;
sub SetEventObject;
sub SetEventType;
sub SetId;
sub SetTimestamp;
sub ShouldPropagate;
sub Skip;
sub StopPropagation;
}
package Wx::EvtHandler {
sub AddPendingEvent;
sub Connect;
sub Destroy;
sub Disconnect;
sub GetEvtHandlerEnabled;
sub GetNextHandler;
sub GetPreviousHandler;
sub ProcessEvent;
sub SetEvtHandlerEnabled;
sub SetNextHandler;
sub SetPreviousHandler;
sub new;
}
package Wx::FSFile {
sub CLONE;
sub DESTROY;
sub GetAnchor;
sub GetLocation;
sub GetMimeType;
sub GetStream;
sub new;
}
package Wx::FileConfig {
sub SetUmask;
sub new;
}
package Wx::FileDataObject {
sub AddFile;
sub GetFilenames;
sub new;
}
package Wx::FileDialog {
sub GetDirectory;
sub GetFilename;
sub GetFilenames;
sub GetFilterIndex;
sub GetMessage;
sub GetPath;
sub GetPaths;
sub GetWildcard;
sub SetDirectory;
sub SetFilename;
sub SetFilterIndex;
sub SetMessage;
sub SetPath;
sub SetWildcard;
sub ShowModal;
sub new;
}
package Wx::FileDirPickerEvent {
sub GetPath;
sub SetPath;
}
package Wx::FileDropTarget {
sub new;
}
package Wx::FileHistory {
sub AddFileToHistory;
sub AddFilesToMenu;
sub GetBaseId;
sub GetCount;
sub GetHistoryFile;
sub GetMaxFiles;
sub GetMenus;
sub Load;
sub RemoveFileFromHistory;
sub RemoveMenu;
sub Save;
sub SetBaseId;
sub UseMenu;
sub new;
}
package Wx::FilePickerCtrl {
sub Create;
sub GetPath;
sub SetPath;
sub new;
sub newDefault;
sub newFull;
}
package Wx::FileSystem {
sub AddHandler;
sub CLONE;
sub ChangePathTo;
sub DESTROY;
sub FindFileInPath;
sub FindFirst;
sub FindNext;
sub GetPath;
sub HasHandlerForPath;
sub OpenFile;
sub new;
}
package Wx::FileType {
sub GetDescription;
sub GetExtensions;
sub GetIcon;
sub GetMimeType;
sub GetMimeTypes;
sub GetOpenCommand;
sub GetPrintCommand;
}
package Wx::FileTypeInfo {
sub GetDescription;
sub GetExtensions;
sub GetExtensionsCount;
sub GetIconFile;
sub GetIconIndex;
sub GetMimeType;
sub GetOpenCommand;
sub GetPrintCommand;
sub GetShortDesc;
sub IsValid;
sub SetIcon;
sub SetShortDesc;
sub new;
}
package Wx::FindDialogEvent {
sub GetDialog;
sub GetFindString;
sub GetFlags;
sub GetReplaceString;
}
package Wx::FindReplaceData {
sub Destroy;
sub GetFindString;
sub GetFlags;
sub GetReplaceString;
sub SetFindString;
sub SetFlags;
sub SetReplaceString;
sub new;
}
package Wx::FindReplaceDialog {
sub GetData;
sub SetData;
sub new;
}
package Wx::FlexGridSizer {
sub AddGrowableCol0;
sub AddGrowableCol;
sub AddGrowableRow0;
sub AddGrowableRow;
sub GetFlexibleDirection;
sub GetNonFlexibleGrowMode;
sub RemoveGrowableCol;
sub RemoveGrowableRow;
sub SetFlexibleDirection;
sub SetNonFlexibleGrowMode;
sub new;
}
package Wx::FocusEvent {
sub GetWindow;
sub new;
}
package Wx::Font {
sub CLONE;
sub DESTROY;
sub GetDefaultEncoding;
sub GetEncoding;
sub GetFaceName;
sub GetFamily;
sub GetFamilyString;
sub GetNativeFontInfo;
sub GetNativeFontInfoDesc;
sub GetNativeFontInfoUserDesc;
sub GetPixelSize;
sub GetPointSize;
sub GetStyle;
sub GetStyleString;
sub GetUnderlined;
sub GetWeight;
sub GetWeightString;
sub IsFixedWidth;
sub IsOk;
sub IsUsingSizeInPixels;
sub New;
sub NewPoint;
sub NewPointFlags;
sub NewPointFlagsStatic;
sub NewPointStatic;
sub NewSize;
sub NewSizeFlags;
sub NewSizeFlagsStatic;
sub NewSizeStatic;
sub Ok;
sub SetDefaultEncoding;
sub SetEncoding;
sub SetFaceName;
sub SetFamily;
sub SetNativeFontInfo;
sub SetNativeFontInfoUserDesc;
sub SetPixelSize;
sub SetPointSize;
sub SetStyle;
sub SetUnderlined;
sub SetWeight;
sub font_spaceship;
sub new;
sub newFont;
sub newLong;
sub newNativeInfo;
sub newSize;
}
package Wx::FontData {
sub CLONE;
sub DESTROY;
sub EnableEffects;
sub GetAllowSymbols;
sub GetChosenFont;
sub GetColour;
sub GetEnableEffects;
sub GetInitialFont;
sub GetShowHelp;
sub SetAllowSymbols;
sub SetChosenFont;
sub SetColour;
sub SetInitialFont;
sub SetRange;
sub SetShowHelp;
sub new;
}
package Wx::FontDialog {
sub GetFontData;
sub new;
}
package Wx::FontEnumerator {
sub CLONE;
sub DESTROY;
sub EnumerateEncodings;
sub EnumerateFacenames;
sub GetEncodings;
sub GetFacenames;
sub IsValidFacename;
sub new;
}
package Wx::FontMapper {
sub CharsetToEncoding;
sub Get;
sub GetAllEncodingNames;
sub GetAltForEncoding;
sub GetEncoding;
sub GetEncodingDescription;
sub GetEncodingFromName;
sub GetEncodingName;
sub GetSupportedEncodingsCount;
sub IsEncodingAvailable;
sub SetConfigPath;
sub SetDialogParent;
sub SetDialogTitle;
}
package Wx::FontPickerCtrl {
sub Create;
sub GetMaxPointSize;
sub GetSelectedFont;
sub SetMaxPointSize;
sub SetSelectedFont;
sub new;
sub newDefault;
sub newFull;
}
package Wx::FontPickerEvent {
sub GetFont;
sub SetFont;
}
package Wx::Frame {
sub Create;
sub CreateStatusBar;
sub CreateToolBar;
sub GetClientAreaOrigin;
sub GetMenuBar;
sub GetStatusBar;
sub GetStatusBarPane;
sub GetTitle;
sub GetToolBar;
sub OnCreateStatusBar;
sub SendSizeEvent;
sub SetIcon;
sub SetIcons;
sub SetMenuBar;
sub SetStatusBar;
sub SetStatusBarPane;
sub SetStatusText;
sub SetStatusWidths;
sub SetTitle;
sub SetToolBar;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GBPosition {
sub GetCol;
sub GetRow;
sub SetCol;
sub SetRow;
sub new;
}
package Wx::GBSizerItem {
sub GetEndPos;
sub GetGBSizer;
sub GetPos;
sub GetPosXY;
sub GetSpan;
sub GetSpanWH;
sub Intersects;
sub IntersectsItem;
sub IntersectsPosition;
sub SetGBSizer;
sub SetPos;
sub SetSpan;
}
package Wx::GBSpan {
sub GetColspan;
sub GetRowspan;
sub SetColspan;
sub SetRowspan;
sub new;
}
package Wx::GIFHandler {
sub new;
}
package Wx::Gauge {
sub Create;
sub GetBezelFace;
sub GetRange;
sub GetShadowWidth;
sub GetValue;
sub IsVertical;
sub Pulse;
sub SetBezelFace;
sub SetRange;
sub SetShadowWidth;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GenericDirCtrl {
sub CollapseTree;
sub Create;
sub ExpandPath;
sub GetDefaultPath;
sub GetFilePath;
sub GetFilter;
sub GetFilterIndex;
sub GetFilterListCtrl;
sub GetPath;
sub GetRootId;
sub GetShowHidden;
sub GetTreeCtrl;
sub ReCreateTree;
sub SetDefaultPath;
sub SetFilter;
sub SetFilterIndex;
sub SetPath;
sub ShowHidden;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Grid {
sub AppendCols;
sub AppendRows;
sub AutoSize;
sub AutoSizeColLabelSize;
sub AutoSizeColumn;
sub AutoSizeColumns;
sub AutoSizeRow;
sub AutoSizeRowLabelSize;
sub AutoSizeRows;
sub BeginBatch;
sub BlockToDeviceRect;
sub CanDragColMove;
sub CanDragColSize;
sub CanDragGridSize;
sub CanDragRowSize;
sub CanEnableCellControl;
sub CellToRectCo;
sub CellToRectXY;
sub ClearGrid;
sub ClearSelection;
sub Create;
sub CreateGrid;
sub DeleteCols;
sub DeleteRows;
sub DisableCellEditControl;
sub DisableDragColMove;
sub DisableDragColSize;
sub DisableDragGridSize;
sub DisableDragRowSize;
sub EnableCellEditControl;
sub EnableDragColMove;
sub EnableDragColSize;
sub EnableDragGridSize;
sub EnableDragRowSize;
sub EnableEditing;
sub EnableGridLines;
sub EndBatch;
sub ForceRefresh;
sub GetBatchCount;
sub GetCellAlignment;
sub GetCellBackgroundColour;
sub GetCellEditor;
sub GetCellFont;
sub GetCellOverflow;
sub GetCellRenderer;
sub GetCellTextColour;
sub GetCellValueCo;
sub GetCellValueXY;
sub GetColAt;
sub GetColGridLinePen;
sub GetColLabelAlignment;
sub GetColLabelSize;
sub GetColLabelValue;
sub GetColMinimalAcceptableWidth;
sub GetColPos;
sub GetColSize;
sub GetDefaultCellAlignment;
sub GetDefaultCellBackgroundColour;
sub GetDefaultCellFont;
sub GetDefaultCellOverflow;
sub GetDefaultCellTextColour;
sub GetDefaultColLabelSize;
sub GetDefaultColSize;
sub GetDefaultEditor;
sub GetDefaultEditorForCellCo;
sub GetDefaultEditorForCellXY;
sub GetDefaultEditorForType;
sub GetDefaultGridLinePen;
sub GetDefaultRenderer;
sub GetDefaultRendererForCell;
sub GetDefaultRendererForType;
sub GetDefaultRowLabelSize;
sub GetDefaultRowSize;
sub GetGridColLabelWindow;
sub GetGridCursorCol;
sub GetGridCursorRow;
sub GetGridLineColour;
sub GetGridRowLabelWindow;
sub GetGridWindow;
sub GetLabelBackgroundColour;
sub GetLabelFont;
sub GetLabelTextColour;
sub GetNumberCols;
sub GetNumberRows;
sub GetOrCreateCellAttr;
sub GetRowGridLinePen;
sub GetRowLabelAlignment;
sub GetRowLabelSize;
sub GetRowLabelValue;
sub GetRowMinimalAcceptableHeight;
sub GetRowSize;
sub GetScrollLineX;
sub GetScrollLineY;
sub GetSelectedCells;
sub GetSelectedCols;
sub GetSelectedRows;
sub GetSelectionBackground;
sub GetSelectionBlockBottomRight;
sub GetSelectionBlockTopLeft;
sub GetSelectionForeground;
sub GetSelectionMode;
sub GetTable;
sub GetViewWidth;
sub GridLinesEnabled;
sub HideCellEditControl;
sub InsertCols;
sub InsertRows;
sub IsCellEditControlEnabled;
sub IsCurrentCellReadOnly;
sub IsEditable;
sub IsInSelectionCo;
sub IsInSelectionXY;
sub IsReadOnly;
sub IsSelection;
sub IsVisibleCo;
sub IsVisibleXY;
sub MakeCellVisibleCo;
sub MakeCellVisibleXY;
sub MoveCursorDown;
sub MoveCursorDownBlock;
sub MoveCursorLeft;
sub MoveCursorLeftBlock;
sub MoveCursorRight;
sub MoveCursorRightBlock;
sub MoveCursorUp;
sub MoveCursorUpBlock;
sub MovePageDown;
sub MovePageUp;
sub ProcessTableMessage;
sub RegisterDataType;
sub SaveEditControlValue;
sub SelectAll;
sub SelectBlockPP;
sub SelectBlockXYWH;
sub SelectCol;
sub SelectRow;
sub SetCellAlignment;
sub SetCellBackgroundColour;
sub SetCellEditor;
sub SetCellFont;
sub SetCellHighlightColour;
sub SetCellHighlightPenWidth;
sub SetCellHighlightROPenWidth;
sub SetCellOverflow;
sub SetCellRenderer;
sub SetCellSize;
sub SetCellTextColour;
sub SetCellValueCo;
sub SetCellValueXY;
sub SetColAttr;
sub SetColFormatBool;
sub SetColFormatCustom;
sub SetColFormatFloat;
sub SetColFormatNumber;
sub SetColLabelAlignment;
sub SetColLabelSize;
sub SetColLabelValue;
sub SetColMinimalAcceptableWidth;
sub SetColMinimalWidth;
sub SetColPos;
sub SetColSize;
sub SetDefaultCellAlignment;
sub SetDefaultCellBackgroundColour;
sub SetDefaultCellFont;
sub SetDefaultCellOverflow;
sub SetDefaultCellTextColour;
sub SetDefaultColSize;
sub SetDefaultEditor;
sub SetDefaultRenderer;
sub SetDefaultRowSize;
sub SetEvents;
sub SetGridCursor;
sub SetGridLineColour;
sub SetLabelBackgroundColour;
sub SetLabelFont;
sub SetLabelTextColour;
sub SetMargins;
sub SetReadOnly;
sub SetRowAttr;
sub SetRowLabelAlignment;
sub SetRowLabelSize;
sub SetRowLabelValue;
sub SetRowMinimalAcceptableHeight;
sub SetRowMinimalHeight;
sub SetRowSize;
sub SetScrollLineX;
sub SetScrollLineY;
sub SetSelectionBackground;
sub SetSelectionForeground;
sub SetSelectionMode;
sub SetTable;
sub ShowCellEditControl;
sub XToCol;
sub XToEdgeOfCol;
sub YToEdgeOfRow;
sub YToRow;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GridBagSizer {
sub Add;
sub AddItem;
sub AddSizer;
sub AddSpace;
sub AddWindow;
sub CheckForIntersection;
sub CheckForIntersectionItem;
sub CheckForIntersectionPos;
sub FindItem;
sub FindItemAtPoint;
sub FindItemAtPosition;
sub FindItemSizer;
sub FindItemWindow;
sub GetCellSize;
sub GetEmptyCellSize;
sub GetItemPosition;
sub GetItemPositionIndex;
sub GetItemPositionSizer;
sub GetItemPositionWindow;
sub GetItemSpan;
sub GetItemSpanIndex;
sub GetItemSpanSizer;
sub GetItemSpanWindow;
sub SetEmptyCellSize;
sub SetItemPosition;
sub SetItemPositionIndex;
sub SetItemPositionSizer;
sub SetItemPositionWindow;
sub SetItemSpan;
sub SetItemSpanIndex;
sub SetItemSpanSizer;
sub SetItemSpanWindow;
sub new;
}
package Wx::GridCellAttr {
sub CLONE;
sub DESTROY;
sub DecRef;
sub GetAlignment;
sub GetBackgroundColour;
sub GetEditor;
sub GetFont;
sub GetOverflow;
sub GetRenderer;
sub GetTextColour;
sub HasAlignment;
sub HasBackgroundColour;
sub HasEditor;
sub HasFont;
sub HasRenderer;
sub HasTextColour;
sub IncRef;
sub IsReadOnly;
sub SetAlignment;
sub SetBackgroundColour;
sub SetDefAttr;
sub SetEditor;
sub SetFont;
sub SetOverflow;
sub SetReadOnly;
sub SetRenderer;
sub SetTextColour;
sub new;
}
package Wx::GridCellAutoWrapStringEditor {
sub new;
}
package Wx::GridCellAutoWrapStringRenderer {
sub new;
}
package Wx::GridCellBoolEditor {
sub IsTrueValue;
sub UseStringValues;
sub new;
}
package Wx::GridCellBoolRenderer {
sub new;
}
package Wx::GridCellChoiceEditor {
sub SetParameters;
sub new;
}
package Wx::GridCellCoords {
sub CLONE;
sub DESTROY;
sub GetCol;
sub GetRow;
sub Set;
sub SetCol;
sub SetRow;
sub new;
}
package Wx::GridCellDateTimeRenderer {
sub new;
}
package Wx::GridCellEditor {
sub BeginEdit;
sub CLONE;
sub DESTROY;
sub Destroy;
sub EndEdit;
sub GetControl;
sub HandleReturn;
sub IsAcceptedKey;
sub IsCreated;
sub PaintBackground;
sub Reset;
sub SetControl;
sub SetSize;
sub Show;
sub StartingClick;
sub StartingKey;
}
package Wx::GridCellEnumEditor {
sub new;
}
package Wx::GridCellEnumRenderer {
sub new;
}
package Wx::GridCellFloatEditor {
sub SetParameters;
sub new;
}
package Wx::GridCellFloatRenderer {
sub GetPrecision;
sub GetWidth;
sub SetPrecision;
sub SetWidth;
sub new;
}
package Wx::GridCellNumberEditor {
sub SetParameters;
sub new;
}
package Wx::GridCellNumberRenderer {
sub new;
}
package Wx::GridCellRenderer {
sub CLONE;
sub DESTROY;
sub Draw;
sub GetBestSize;
sub SetParameters;
}
package Wx::GridCellStringRenderer {
sub new;
}
package Wx::GridCellTextEditor {
sub SetParameters;
sub new;
}
package Wx::GridEditorCreatedEvent {
sub GetCol;
sub GetControl;
sub GetRow;
sub SetCol;
sub SetControl;
sub SetRow;
sub new;
}
package Wx::GridEvent {
sub AltDown;
sub ControlDown;
sub GetCol;
sub GetPosition;
sub GetRow;
sub MetaDown;
sub Selecting;
sub ShiftDown;
}
package Wx::GridRangeSelectEvent {
sub AltDown;
sub ControlDown;
sub GetBottomRightCoords;
sub GetBottomRow;
sub GetLeftCol;
sub GetRightCol;
sub GetTopLeftCoords;
sub GetTopRow;
sub MetaDown;
sub Selecting;
sub ShiftDown;
}
package Wx::GridSizeEvent {
sub AltDown;
sub ControlDown;
sub GetPosition;
sub GetRowOrCol;
sub MetaDown;
sub ShiftDown;
}
package Wx::GridSizer {
sub GetCols;
sub GetHGap;
sub GetRows;
sub GetVGap;
sub SetCols;
sub SetHGap;
sub SetRows;
sub SetVGap;
sub new;
}
package Wx::GridTableBase {
sub AppendCols;
sub AppendRows;
sub CanGetValueAs;
sub CanHaveAttributes;
sub CanSetValueAs;
sub Clear;
sub DeleteCols;
sub DeleteRows;
sub Destroy;
sub GetAttr;
sub GetAttrProvider;
sub GetColLabelValue;
sub GetNumberCols;
sub GetNumberRows;
sub GetRowLabelValue;
sub GetTypeName;
sub GetValue;
sub GetValueAsBool;
sub GetValueAsDouble;
sub GetValueAsLong;
sub GetView;
sub InsertCols;
sub InsertRows;
sub IsEmptyCell;
sub SetAttr;
sub SetAttrProvider;
sub SetColAttr;
sub SetColLabelValue;
sub SetRowAttr;
sub SetRowLabelValue;
sub SetValue;
sub SetValueAsBool;
sub SetValueAsDouble;
sub SetValueAsLong;
sub SetView;
}
package Wx::GridTableMessage {
sub CLONE;
sub DESTROY;
sub GetCommandInt2;
sub GetCommandInt;
sub GetId;
sub GetTableObject;
sub SetCommandInt2;
sub SetCommandInt;
sub SetId;
sub SetTableObject;
sub new;
}
package Wx::HelpControllerBase {
sub Destroy;
sub DisplayBlock;
sub DisplayContents;
sub DisplayContextPopup;
sub DisplaySection;
sub DisplaySectionId;
sub DisplayTextPopup;
sub GetParentWindow;
sub Initialize;
sub KeywordSearch;
sub LoadFile;
sub Quit;
sub SetParentWindow;
sub SetViewer;
}
package Wx::HelpControllerHelpProvider {
sub GetHelpController;
sub SetHelpController;
sub new;
}
package Wx::HelpEvent {
sub GetLink;
sub GetPosition;
sub GetTarget;
sub SetLink;
sub SetPosition;
sub SetTarget;
sub new;
}
package Wx::HelpProvider {
sub AddHelp;
sub AddHelpById;
sub Destroy;
sub Get;
sub GetHelp;
sub Set;
sub ShowHelp;
}
package Wx::HtmlCell {
sub ConvertToText;
sub Destroy;
sub FindCellByPos;
sub GetAbsPos;
sub GetDepth;
sub GetDescent;
sub GetFirstChild;
sub GetFirstTerminal;
sub GetHeight;
sub GetId;
sub GetLastTerminal;
sub GetLink;
sub GetNext;
sub GetParent;
sub GetPosX;
sub GetPosY;
sub GetWidth;
sub IsBefore;
sub IsFormattingCell;
sub IsLinebreakAllowed;
sub IsTerminalCell;
sub Layout;
sub SetCanLiveOnPagebreak;
sub SetId;
sub SetLink;
sub SetNext;
sub SetParent;
sub SetPos;
sub new;
}
package Wx::HtmlCellEvent {
sub GetCell;
sub GetLinkClicked;
sub GetMouseEvent;
sub GetPoint;
sub SetLinkClicked;
}
package Wx::HtmlColourCell {
sub new;
}
package Wx::HtmlContainerCell {
sub GetAlignHor;
sub GetAlignVer;
sub GetBackgroundColour;
sub GetIndent;
sub GetIndentUnits;
sub InsertCell;
sub RemoveExtraSpacing;
sub SetAlign;
sub SetAlignHor;
sub SetAlignVer;
sub SetBackgroundColour;
sub SetBorder;
sub SetIndent;
sub SetMinHeight;
sub SetWidthFloat;
sub SetWidthFloatTag;
sub new;
}
package Wx::HtmlDCRenderer {
sub CLONE;
sub DESTROY;
sub GetTotalHeight;
sub Render;
sub SetDC;
sub SetFonts;
sub SetHtmlText;
sub SetSize;
sub new;
}
package Wx::HtmlEasyPrinting {
sub CLONE;
sub DESTROY;
sub GetPageSetupData;
sub GetPrintData;
sub PageSetup;
sub PreviewFile;
sub PreviewText;
sub PrintFile;
sub PrintText;
sub SetFonts;
sub SetFooter;
sub SetHeader;
sub new;
}
package Wx::HtmlFontCell {
sub new;
}
package Wx::HtmlHelpController {
sub AddBook;
sub Display;
sub DisplayContents;
sub DisplayId;
sub DisplayIndex;
sub KeywordSearch;
sub ReadCustomization;
sub SetTempDir;
sub SetTitleFormat;
sub UseConfig;
sub WriteCustomization;
sub new;
}
package Wx::HtmlLinkEvent {
sub GetLinkInfo;
}
package Wx::HtmlLinkInfo {
sub GetEvent;
sub GetHref;
sub GetHtmlCell;
sub GetTarget;
}
package Wx::HtmlListBox {
sub Create;
sub GetFileSystem;
}
package Wx::HtmlParser {
sub AddTagHandler;
sub DoneParser;
sub GetCurrentTag;
sub GetFS;
sub GetProduct;
sub InitParser;
sub OpenURL;
sub Parse;
sub PopTagHandler;
sub PushTagHandler;
sub RestoreState;
sub SetFS;
sub SetSource;
sub SetSourceAndSaveState;
sub StopParsing;
}
package Wx::HtmlTag {
sub GetAllParams;
sub GetBeginPos;
sub GetChildren;
sub GetEndPos1;
sub GetEndPos2;
sub GetFirstSibling;
sub GetLastSibling;
sub GetName;
sub GetNextSibling;
sub GetNextTag;
sub GetParam;
sub GetParamAsColour;
sub GetParamAsInt;
sub GetParent;
sub GetPreviousSibling;
sub HasEnding;
sub HasParam;
}
package Wx::HtmlTagHandler {
sub GetSupportedTags;
sub HandleTag;
sub SetParser;
}
package Wx::HtmlWidgetCell {
sub new;
}
package Wx::HtmlWinParser {
sub CloseContainer;
sub CreateCurrentFont;
sub GetActualColor;
sub GetAlign;
sub GetCharHeight;
sub GetCharWidth;
sub GetContainer;
sub GetDC;
sub GetFontBold;
sub GetFontFace;
sub GetFontFixed;
sub GetFontItalic;
sub GetFontSize;
sub GetFontUnderlined;
sub GetLink;
sub GetLinkColor;
sub GetPixelScale;
sub GetWindow;
sub OpenContainer;
sub OpenURL;
sub SetActualColor;
sub SetAlign;
sub SetContainer;
sub SetDC;
sub SetFontBold;
sub SetFontFace;
sub SetFontFixed;
sub SetFontItalic;
sub SetFontSize;
sub SetFontUnderlined;
sub SetLink;
sub SetLinkColor;
}
package Wx::HtmlWindow {
sub AppendToPage;
sub GetOpenedAnchor;
sub GetOpenedPage;
sub GetOpenedPageTitle;
sub GetParser;
sub GetRelatedFrame;
sub HistoryBack;
sub HistoryCanBack;
sub HistoryCanForward;
sub HistoryClear;
sub HistoryForward;
sub LoadFile;
sub LoadPage;
sub OnLinkClicked;
sub OnSetTitle;
sub ReadCustomization;
sub SelectAll;
sub SelectLine;
sub SelectWord;
sub SelectionToText;
sub SetBorders;
sub SetFonts;
sub SetPage;
sub SetRelatedFrame;
sub SetRelatedStatusBar;
sub ToText;
sub WriteCustomization;
sub new;
}
package Wx::HtmlWordCell {
sub SetPreviousWord;
}
package Wx::HyperlinkCtrl {
sub Create;
sub GetHoverColour;
sub GetNormalColour;
sub GetURL;
sub GetVisited;
sub GetVisitedColour;
sub SetHoverColour;
sub SetNormalColour;
sub SetURL;
sub SetVisited;
sub SetVisitedColour;
sub newDefault;
sub newFull;
}
package Wx::HyperlinkEvent {
sub GetURL;
sub SetURL;
sub new;
}
package Wx::ICOHandler {
sub new;
}
package Wx::IFFHandler {
sub new;
}
package Wx::IPV4address {
sub GetOrigHostname;
sub new;
}
package Wx::IPaddress {
sub GetHostname;
sub GetIPAddress;
sub GetService;
sub IsLocalHost;
sub SetAnyAddress;
sub SetHostname;
sub SetService;
}
package Wx::Icon {
sub CLONE;
sub CopyFromBitmap;
sub DESTROY;
sub GetDepth;
sub GetHeight;
sub GetWidth;
sub IsOk;
sub LoadFile;
sub Ok;
sub SetDepth;
sub SetHeight;
sub SetWidth;
sub new;
sub newFile;
sub newFromXPM;
sub newLocation;
sub newNull;
}
package Wx::IconBundle {
sub AddIcon;
sub AddIconFile;
sub AddIconIcon;
sub GetIcon;
sub GetIconCoord;
sub GetIconSize;
sub new;
sub newEmpty;
sub newFile;
sub newIcon;
}
package Wx::IconLocation {
sub IsOk;
}
package Wx::IconizeEvent {
sub Iconized;
sub IsIconized;
}
package Wx::IdleEvent {
sub CanSend;
sub GetMode;
sub MoreRequested;
sub RequestMore;
sub SetMode;
sub new;
}
package Wx::Image {
sub AddHandler;
sub Blur;
sub BlurHorizontal;
sub BlurVertical;
sub CLONE;
sub ConvertAlphaToMask;
sub ConvertColourToAlpha;
sub ConvertToGreyscale;
sub ConvertToMono;
sub Copy;
sub Create;
sub DESTROY;
sub Destroy;
sub FindHandlerExtType;
sub FindHandlerMime;
sub FindHandlerName;
sub FindHandlerType;
sub GetAlpha;
sub GetAlphaData;
sub GetAlphaXY;
sub GetBlue;
sub GetData;
sub GetGreen;
sub GetHeight;
sub GetMaskBlue;
sub GetMaskGreen;
sub GetMaskRed;
sub GetOption;
sub GetOptionInt;
sub GetOrFindMaskColour;
sub GetPalette;
sub GetRed;
sub GetSubImage;
sub GetWidth;
sub HasAlpha;
sub HasMask;
sub HasOption;
sub HasPalette;
sub InitAlpha;
sub InsertHandler;
sub IsOk;
sub IsTransparent;
sub LoadFile;
sub LoadFileMIME;
sub LoadFileType;
sub LoadStreamMIME;
sub LoadStreamType;
sub Mirror;
sub Ok;
sub Replace;
sub Rescale;
sub Rotate90;
sub Rotate;
sub RotateHue;
sub SaveFile;
sub SaveFileMIME;
sub SaveFileOnly;
sub SaveFileType;
sub SaveStreamMIME;
sub SaveStreamType;
sub Scale;
sub SetAlpha;
sub SetAlphaData;
sub SetAlphaXY;
sub SetData;
sub SetMask;
sub SetMaskColour;
sub SetOption;
sub SetOptionInt;
sub SetPalette;
sub SetRGB;
sub SetRGBpixel;
sub SetRGBrect;
sub ShrinkBy;
sub new;
sub newBitmap;
sub newData;
sub newDataAlpha;
sub newIcon;
sub newNameMIME;
sub newNameType;
sub newNull;
sub newStreamMIME;
sub newStreamType;
sub newWH;
}
package Wx::ImageHandler {
sub Destroy;
sub GetExtension;
sub GetImageCount;
sub GetMimeType;
sub GetName;
sub GetType;
sub LoadFile;
sub SaveFile;
sub SetExtension;
sub SetMimeType;
sub SetName;
sub SetType;
}
package Wx::ImageList {
sub Add;
sub AddBitmap;
sub AddIcon;
sub AddWithColourMask;
sub CLONE;
sub DESTROY;
sub Draw;
sub GetBitmap;
sub GetIcon;
sub GetImageCount;
sub GetSize;
sub Remove;
sub RemoveAll;
sub Replace;
sub ReplaceBitmap;
sub ReplaceIcon;
sub new;
}
package Wx::IndividualLayoutConstraint {
sub Above;
sub Absolute;
sub AsIs;
sub Below;
sub LeftOf;
sub PercentOf;
sub RightOf;
sub SameAs;
sub Set;
sub Unconstrained;
}
package Wx::InitDialogEvent {
sub new;
}
package Wx::InputStream {
sub GETC;
sub READ;
sub READLINE;
sub SEEK;
sub TELL;
}
package Wx::JPEGHandler {
sub new;
}
package Wx::JoystickEvent {
sub ButtonDown;
sub ButtonIsDown;
sub ButtonUp;
sub GetButtonChange;
sub GetButtonState;
sub GetJoystick;
sub GetPosition;
sub GetZPosition;
sub IsButton;
sub IsMove;
sub IsZMove;
sub new;
}
package Wx::KeyEvent {
sub AltDown;
sub CmdDown;
sub ControlDown;
sub GetKeyCode;
sub GetModifiers;
sub GetRawKeyCode;
sub GetUnicodeKey;
sub GetX;
sub GetY;
sub HasModifiers;
sub MetaDown;
sub ShiftDown;
sub new;
}
package Wx::LanguageInfo {
sub CLONE;
sub DESTROY;
sub GetCanonicalName;
sub GetDescription;
sub GetLanguage;
sub GetWinLang;
sub GetWinSublang;
sub new;
}
package Wx::LayoutConstraints {
sub bottom;
sub centreX;
sub centreY;
sub height;
sub left;
sub new;
sub right;
sub top;
sub width;
}
package Wx::ListBox {
sub Create;
sub Deselect;
sub GetSelections;
sub HitTest;
sub InsertItems;
sub IsSelected;
sub Set;
sub SetFirstItem;
sub SetFirstItemString;
sub SetSelection;
sub SetStringSelection;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ListCtrl {
sub Arrange;
sub AssignImageList;
sub ClearAll;
sub Create;
sub DeleteAllItems;
sub DeleteColumn;
sub DeleteItem;
sub EditLabel;
sub EnsureVisible;
sub FindItem;
sub FindItemAtPos;
sub FindItemData;
sub GetColumn;
sub GetColumnCount;
sub GetColumnWidth;
sub GetCountPerPage;
sub GetEditControl;
sub GetImageList;
sub GetItem;
sub GetItemBackgroundColour;
sub GetItemCount;
sub GetItemData;
sub GetItemPosition;
sub GetItemRect;
sub GetItemSpacing;
sub GetItemState;
sub GetItemText;
sub GetItemTextColour;
sub GetNextItem;
sub GetSelectedItemCount;
sub GetSubItemRect;
sub GetTextColour;
sub GetTopItem;
sub GetViewRect;
sub HitTest;
sub InsertColumn;
sub InsertColumnInfo;
sub InsertColumnString;
sub InsertImageItem;
sub InsertImageStringItem;
sub InsertItem;
sub InsertStringImageItem;
sub InsertStringItem;
sub IsVirtual;
sub RefreshItem;
sub RefreshItems;
sub ScrollList;
sub SetColumn;
sub SetColumnWidth;
sub SetImageList;
sub SetItem;
sub SetItemBackgroundColour;
sub SetItemColumnImage;
sub SetItemCount;
sub SetItemData;
sub SetItemImage;
sub SetItemInfo;
sub SetItemPosition;
sub SetItemState;
sub SetItemString;
sub SetItemText;
sub SetItemTextColour;
sub SetSingleStyle;
sub SetTextColour;
sub SetWindowStyleFlag;
sub SortItems;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ListEvent {
sub GetCacheFrom;
sub GetCacheTo;
sub GetColumn;
sub GetData;
sub GetImage;
sub GetIndex;
sub GetItem;
sub GetKeyCode;
sub GetLabel;
sub GetMask;
sub GetPoint;
sub GetText;
sub IsEditCancelled;
sub new;
}
package Wx::ListItem {
sub CLONE;
sub Clear;
sub ClearAttributes;
sub DESTROY;
sub GetAlign;
sub GetBackgroundColour;
sub GetColumn;
sub GetData;
sub GetFont;
sub GetId;
sub GetImage;
sub GetMask;
sub GetState;
sub GetText;
sub GetTextColour;
sub GetWidth;
sub SetAlign;
sub SetBackgroundColour;
sub SetColumn;
sub SetData;
sub SetFont;
sub SetId;
sub SetImage;
sub SetMask;
sub SetState;
sub SetStateMask;
sub SetText;
sub SetTextColour;
sub SetWidth;
sub new;
}
package Wx::ListItemAttr {
sub CLONE;
sub DESTROY;
sub GetBackgroundColour;
sub GetFont;
sub GetTextColour;
sub HasBackgroundColour;
sub HasFont;
sub HasTextColour;
sub SetBackgroundColour;
sub SetFont;
sub SetTextColour;
sub new;
}
package Wx::ListView {
sub ClearColumnImage;
sub Create;
sub Focus;
sub GetFirstSelected;
sub GetFocusedItem;
sub GetNextSelected;
sub IsSelected;
sub Select;
sub SetColumnImage;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Listbook {
sub Create;
sub GetListView;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Locale {
sub AddCatalog;
sub AddCatalogLookupPathPrefix;
sub AddLanguage;
sub CLONE;
sub DESTROY;
sub FindLanguageInfo;
sub GetCanonicalName;
sub GetHeaderValue;
sub GetLanguage;
sub GetLanguageInfo;
sub GetLanguageName;
sub GetLocale;
sub GetName;
sub GetString;
sub GetSysName;
sub GetSystemEncoding;
sub GetSystemEncodingName;
sub GetSystemLanguage;
sub Init;
sub IsAvailable;
sub IsLoaded;
sub IsOk;
sub newLong;
sub newShort;
}
package Wx::Log {
sub AddTraceMask;
sub ClearTraceMasks;
sub Destroy;
sub DoCreateOnDemand;
sub DontCreateOnDemand;
sub EnableLogging;
sub Flush;
sub FlushActive;
sub GetActiveTarget;
sub GetLogLevel;
sub GetRepetitionCounting;
sub GetTimestamp;
sub GetTraceMask;
sub GetTraceMasks;
sub GetVerbose;
sub HasPendingMessages;
sub IsAllowedTraceMask;
sub IsEnabled;
sub RemoveTraceMask;
sub Resume;
sub SetActiveTarget;
sub SetLogLevel;
sub SetRepetitionCounting;
sub SetTraceMask;
sub SetVerbose;
sub SetVerboseFunctionDefault;
sub SetVerboseFunctionParam;
sub SetVerboseMethodDefault;
sub SetVerboseMethodParam;
sub Suspend;
sub _SetTimestamp;
}
package Wx::LogChain {
sub DetachOldLog;
sub GetOldLog;
sub IsPassingMessages;
sub PassMessages;
sub SetLog;
sub new;
}
package Wx::LogGui {
sub new;
}
package Wx::LogNull {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::LogPassThrough {
sub new;
}
package Wx::LogStderr {
sub new;
}
package Wx::LogTextCtrl {
sub new;
}
package Wx::LogWindow {
sub new;
}
package Wx::MDIChildFrame {
sub Activate;
sub Maximize;
sub Restore;
sub new;
}
package Wx::MDIParentFrame {
sub ActivateNext;
sub ActivatePrevious;
sub ArrangeIcons;
sub Cascade;
sub Create;
sub GetActiveChild;
sub GetClientWindow;
sub GetWindowMenu;
sub SetWindowMenu;
sub Tile;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Mask {
sub Destroy;
sub new;
sub newBitmap;
sub newBitmapColour;
sub newBitmapIndex;
}
package Wx::MaximizeEvent {
sub new;
}
package Wx::MediaCtrl {
sub Create;
sub GetDownloadProgress;
sub GetDownloadTotal;
sub GetPlaybackRate;
sub GetState;
sub GetVolume;
sub Length;
sub LoadFile;
sub LoadURI;
sub Pause;
sub Play;
sub Seek;
sub SetPlaybackRate;
sub SetVolume;
sub ShowPlayerControls;
sub Stop;
sub Tell;
sub new;
sub newDefault;
sub newFull;
}
package Wx::MediaEvent {
sub new;
}
package Wx::MemoryDC {
sub SelectObject;
sub SelectObjectAsSource;
sub new;
}
package Wx::MemoryFSHandler {
sub AddBinaryFile;
sub AddBinaryFileWithMimeType;
sub AddBitmapFile;
sub AddImageFile;
sub AddTextFile;
sub AddTextFileWithMimeType;
sub RemoveFile;
sub new;
}
package Wx::Menu {
sub AppendCheckItem;
sub AppendItem;
sub AppendRadioItem;
sub AppendSeparator;
sub AppendString;
sub AppendSubMenu;
sub AppendSubMenu_;
sub Break;
sub Check;
sub DeleteId;
sub DeleteItem;
sub DestroyId;
sub DestroyItem;
sub DestroyMenu;
sub Enable;
sub FindItem;
sub FindItemByPosition;
sub GetHelpString;
sub GetLabel;
sub GetLabelText;
sub GetMenuItemCount;
sub GetMenuItems;
sub GetTitle;
sub InsertCheckItem;
sub InsertItem;
sub InsertRadioItem;
sub InsertSeparator;
sub InsertString;
sub InsertSubMenu;
sub IsChecked;
sub IsEnabled;
sub PrependCheckItem;
sub PrependItem;
sub PrependRadioItem;
sub PrependSeparator;
sub PrependString;
sub PrependSubMenu;
sub RemoveId;
sub RemoveItem;
sub SetHelpString;
sub SetLabel;
sub SetTitle;
sub UpdateUI;
sub new;
}
package Wx::MenuBar {
sub Append;
sub Check;
sub Enable;
sub EnableTop;
sub FindItem;
sub FindMenu;
sub FindMenuItem;
sub GetHelpString;
sub GetLabel;
sub GetLabelTop;
sub GetMenu;
sub GetMenuCount;
sub GetMenuLabel;
sub GetMenuLabelText;
sub Insert;
sub IsChecked;
sub IsEnabled;
sub IsEnabledTop;
sub Refresh;
sub Remove;
sub Replace;
sub SetHelpString;
sub SetLabel;
sub SetLabelTop;
sub SetMenuLabel;
sub new;
}
package Wx::MenuEvent {
sub GetMenu;
sub GetMenuId;
sub IsPopup;
sub new;
}
package Wx::MenuItem {
sub Check;
sub Enable;
sub GetBackgroundColour;
sub GetBitmap;
sub GetFont;
sub GetHelp;
sub GetId;
sub GetKind;
sub GetLabel;
sub GetLabelFromText;
sub GetMarginWidth;
sub GetMenu;
sub GetSubMenu;
sub GetText;
sub GetTextColour;
sub IsCheckable;
sub IsChecked;
sub IsEnabled;
sub IsSeparator;
sub IsSubMenu;
sub SetBackgroundColour;
sub SetBitmap;
sub SetBitmaps;
sub SetFont;
sub SetHelp;
sub SetMarginWidth;
sub SetMenu;
sub SetSubMenu;
sub SetText;
sub SetTextColour;
sub new;
}
package Wx::MessageDialog {
sub ShowModal;
sub new;
}
package Wx::MimeTypesManager {
sub AddFallbacks;
sub CLONE;
sub DESTROY;
sub GetFileTypeFromExtension;
sub GetFileTypeFromMimeType;
sub IsOfType;
sub ReadMailcap;
sub ReadMimeTypes;
sub new;
}
package Wx::MiniFrame {
sub new;
}
package Wx::MirrorDC {
sub new;
}
package Wx::MouseCaptureChangedEvent {
sub GetCapturedWindow;
sub new;
}
package Wx::MouseCaptureLostEvent {
sub new;
}
package Wx::MouseEvent {
sub AltDown;
sub Button;
sub ButtonDClick;
sub ButtonDown;
sub ButtonUp;
sub CmdDown;
sub ControlDown;
sub Dragging;
sub Entering;
sub GetButton;
sub GetLinesPerAction;
sub GetLogicalPosition;
sub GetPosition;
sub GetPositionXY;
sub GetWheelDelta;
sub GetWheelRotation;
sub GetX;
sub GetY;
sub IsButton;
sub IsPageScroll;
sub Leaving;
sub LeftDClick;
sub LeftDown;
sub LeftIsDown;
sub LeftUp;
sub MetaDown;
sub MiddleDClick;
sub MiddleDown;
sub MiddleIsDown;
sub MiddleUp;
sub Moving;
sub RightDClick;
sub RightDown;
sub RightIsDown;
sub RightUp;
sub ShiftDown;
sub new;
}
package Wx::MoveEvent {
sub GetPosition;
sub GetRect;
sub new;
}
package Wx::MultiChoiceDialog {
sub GetSelections;
sub SetSelections;
sub new;
}
package Wx::NativeFontInfo {
sub CLONE;
sub DESTROY;
sub FromString;
sub FromUserString;
sub ToString;
sub ToUserString;
sub new;
}
package Wx::NavigationKeyEvent {
sub GetCurrentFocus;
sub GetDirection;
sub IsFromTab;
sub IsWindowChange;
sub SetCurrentFocus;
sub SetDirection;
sub SetFromTab;
sub SetWindowChange;
sub new;
}
package Wx::Notebook {
sub Create;
sub GetRowCount;
sub SetPadding;
sub SetPageSize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::NotebookEvent {
sub new;
}
package Wx::NotebookSizer {
sub GetNotebook;
sub new;
}
package Wx::NotifyEvent {
sub Allow;
sub IsAllowed;
sub Veto;
sub new;
}
package Wx::NumberEntryDialog {
sub GetValue;
sub new;
}
package Wx::OutputStream {
sub SEEK;
sub TELL;
sub WRITE;
}
package Wx::Overlay {
sub CLONE;
sub DESTROY;
sub Reset;
sub new;
}
package Wx::OwnerDrawnComboBox {
sub Append;
sub AppendData;
sub AppendItems;
sub AppendString;
sub Clear;
sub Delete;
sub FindString;
sub FindStringCase;
sub FindStringNoCase;
sub GetClientData;
sub GetCount;
sub GetSelection;
sub GetString;
sub GetStringSelection;
sub GetStrings;
sub GetWidestItem;
sub GetWidestItemWidth;
sub Insert;
sub InsertData;
sub InsertString;
sub IsEmpty;
sub Select;
sub SetClientData;
sub SetSelection;
sub SetString;
sub SetStringSelection;
}
package Wx::PCXHandler {
sub new;
}
package Wx::PNGHandler {
sub new;
}
package Wx::PNMHandler {
sub new;
}
package Wx::PageSetupDialog {
sub Destroy;
sub GetPageSetupData;
sub new;
}
package Wx::PageSetupDialogData {
sub Destroy;
sub EnableHelp;
sub EnableMargins;
sub EnableOrientation;
sub EnablePaper;
sub EnablePrinter;
sub GetDefaultInfo;
sub GetDefaultMinMargins;
sub GetEnableHelp;
sub GetEnableMargins;
sub GetEnableOrientation;
sub GetEnablePaper;
sub GetEnablePrinter;
sub GetMarginBottomRight;
sub GetMarginTopLeft;
sub GetMinMarginBottomRight;
sub GetMinMarginTopLeft;
sub GetPaperId;
sub GetPaperSize;
sub GetPrintData;
sub SetDefaultInfo;
sub SetDefaultMinMargins;
sub SetMarginBottomRight;
sub SetMarginTopLeft;
sub SetMinMarginBottomRight;
sub SetMinMarginTopLeft;
sub SetPaperId;
sub SetPaperSize;
sub SetPrintData;
sub new;
}
package Wx::PaintDC {
sub new;
}
package Wx::PaintEvent {
sub new;
}
package Wx::Palette {
sub CLONE;
sub DESTROY;
sub GetColoursCount;
sub GetPixel;
sub GetRGB;
sub IsOk;
sub Ok;
sub new;
}
package Wx::Panel {
sub Create;
sub SetFocusIgnoringChildren;
sub TransferDataFromWindow;
sub TransferDataToWindow;
sub Validate;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PasswordEntryDialog {
sub new;
}
package Wx::Pen {
sub CLONE;
sub DESTROY;
sub GetCap;
sub GetColour;
sub GetDashes;
sub GetJoin;
sub GetStipple;
sub GetStyle;
sub GetWidth;
sub IsOk;
sub Ok;
sub SetCap;
sub SetColour;
sub SetColourColour;
sub SetColourName;
sub SetColourRGB;
sub SetDashes;
sub SetJoin;
sub SetStipple;
sub SetStyle;
sub SetWidth;
sub new;
sub newBitmap;
sub newColour;
sub newString;
}
package Wx::PickerBase {
sub GetInternalMargin;
sub GetPickerCtrl;
sub GetPickerCtrlProportion;
sub GetTextCtrl;
sub GetTextCtrlProportion;
sub HasTextCtrl;
sub IsPickerCtrlGrowable;
sub IsTextCtrlGrowable;
sub SetInternalMargin;
sub SetPickerCtrlGrowable;
sub SetPickerCtrlProportion;
sub SetTextCtrlGrowable;
sub SetTextCtrlProportion;
}
package Wx::PlArtProvider {
sub CreateBitmap;
sub new;
}
package Wx::PlCommand {
sub CanUndo;
sub new;
}
package Wx::PlCommandEvent {
sub DESTROY;
sub new;
}
package Wx::PlDataObjectSimple {
sub DESTROY;
sub new;
}
package Wx::PlEvent {
sub DESTROY;
sub new;
}
package Wx::PlFileSystemHandler {
sub new;
}
package Wx::PlGridCellEditor {
sub new;
}
package Wx::PlGridCellRenderer {
sub Draw;
sub new;
}
package Wx::PlGridTable {
sub AppendCols;
sub AppendRows;
sub CanGetValueAs;
sub CanHaveAttributes;
sub CanSetValueAs;
sub Clear;
sub DeleteCols;
sub DeleteRows;
sub GetAttr;
sub GetColLabelValue;
sub GetRowLabelValue;
sub GetTypeName;
sub GetValueAsBool;
sub GetValueAsDouble;
sub GetValueAsLong;
sub GetView;
sub InsertCols;
sub InsertRows;
sub SetAttr;
sub SetColAttr;
sub SetColLabelValue;
sub SetRowAttr;
sub SetRowLabelValue;
sub SetValueAsBool;
sub SetValueAsDouble;
sub SetValueAsLong;
sub SetView;
sub new;
}
package Wx::PlHtmlListBox {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlHtmlTagHandler {
sub GetParser;
sub new;
}
package Wx::PlHtmlWinTagHandler {
sub GetParser;
sub new;
}
package Wx::PlLog {
sub new;
}
package Wx::PlLogPassThrough {
sub new;
}
package Wx::PlOwnerDrawnComboBox {
sub Create;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlPopupTransientWindow {
sub CanDismiss;
sub Dismiss;
sub Popup;
sub ProcessLeftDown;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlPreviewControlBar {
sub CreateButtons;
sub new;
}
package Wx::PlPreviewFrame {
sub CreateCanvas;
sub CreateControlBar;
sub GetPreviewCanvas;
sub GetPreviewControlBar;
sub GetPrintPreview;
sub Initialize;
sub SetPreviewCanvas;
sub SetPreviewControlBar;
sub SetPrintPreview;
sub new;
}
package Wx::PlRichTextFileHandler {
sub CanHandle;
sub CanLoad;
sub CanSave;
sub new;
}
package Wx::PlSizer {
sub new;
}
package Wx::PlThreadEvent {
sub GetData;
sub SetStash;
sub _GetData;
sub new;
}
package Wx::PlVListBox {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlVScrolledWindow {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlValidator {
sub DESTROY;
sub new;
}
package Wx::PlWindow {
sub AcceptsFocus;
sub AcceptsFocusFromKeyboard;
sub Create;
sub DoGetBestSize;
sub DoMoveWindow;
sub Enable;
sub GetMaxSize;
sub GetMinSize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlXmlResourceHandler {
sub new;
}
package Wx::Point {
sub CLONE;
sub DESTROY;
sub new;
sub x;
sub y;
}
package Wx::PopupTransientWindow {
sub CanDismiss;
sub Dismiss;
sub Popup;
sub ProcessLeftDown;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PopupWindow {
sub Create;
sub Position;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PowerEvent {
sub IsVetoed;
sub Veto;
}
package Wx::PreviewCanvas {
sub new;
}
package Wx::PreviewControlBar {
sub CreateButtons;
sub GetPrintPreview;
sub GetZoomControl;
sub OnFirst;
sub OnGoto;
sub OnLast;
sub OnNext;
sub OnPrevious;
sub OnPrint;
sub SetZoomControl;
sub new;
}
package Wx::PreviewFrame {
sub CreateCanvas;
sub CreateControlBar;
sub GetControlBar;
sub Initialize;
sub new;
}
package Wx::PrintData {
sub Destroy;
sub GetBin;
sub GetCollate;
sub GetColour;
sub GetDuplex;
sub GetNoCopies;
sub GetOrientation;
sub GetPaperId;
sub GetPrinterName;
sub GetQuality;
sub IsOk;
sub SetBin;
sub SetCollate;
sub SetColour;
sub SetDuplex;
sub SetNoCopies;
sub SetOrientation;
sub SetPaperId;
sub SetPrinterName;
sub SetQuality;
sub new;
}
package Wx::PrintDialog {
sub GetPrintDC;
sub GetPrintDialogData;
sub new;
}
package Wx::PrintDialogData {
sub Destroy;
sub EnableHelp;
sub EnablePageNumbers;
sub EnablePrintToFile;
sub EnableSelection;
sub GetAllPages;
sub GetCollate;
sub GetFromPage;
sub GetMaxPage;
sub GetMinPage;
sub GetNoCopies;
sub GetPrintData;
sub GetPrintToFile;
sub GetSelection;
sub GetToPage;
sub IsOk;
sub SetCollate;
sub SetFromPage;
sub SetMaxPage;
sub SetMinPage;
sub SetNoCopies;
sub SetPrintData;
sub SetPrintToFile;
sub SetSelection;
sub SetToPage;
sub new;
}
package Wx::PrintFactory {
sub CreatePageSetupDialog;
sub CreatePrintDialogD;
sub CreatePrintDialogDD;
sub CreatePrintPreviewD;
sub CreatePrintPreviewDD;
sub CreatePrintSetupDialog;
sub CreatePrinter;
sub CreatePrinterLine;
sub CreateStatusLine;
sub GetFactory;
sub HasOwnPrintToFile;
sub HasPrintSetupDialog;
sub HasPrinterLine;
sub HasStatusLine;
sub SetPrintFactory;
}
package Wx::PrintPreview {
sub Destroy;
sub GetCanvas;
sub GetCurrentPage;
sub GetFrame;
sub GetMaxPage;
sub GetMinPage;
sub GetPrintout;
sub GetPrintoutForPrinting;
sub IsOk;
sub Ok;
sub PaintPage;
sub Print;
sub SetCanvas;
sub SetCurrentPage;
sub SetFrame;
sub SetPrintout;
sub SetZoom;
sub new;
}
package Wx::Printer {
sub CLONE;
sub CreateAbortWindow;
sub DESTROY;
sub GetAbort;
sub GetLastError;
sub GetPrintDialogData;
sub Print;
sub PrintDialog;
sub ReportError;
sub Setup;
sub new;
}
package Wx::PrinterDC {
sub GetPaperRect;
sub new;
}
package Wx::Printout {
sub Destroy;
sub FitThisSizeToPage;
sub FitThisSizeToPageMargins;
sub FitThisSizeToPaper;
sub GetDC;
sub GetLogicalPageMarginsRect;
sub GetLogicalPageRect;
sub GetLogicalPaperRect;
sub GetPPIPrinter;
sub GetPPIScreen;
sub GetPageInfo;
sub GetPageSizeMM;
sub GetPageSizePixels;
sub GetPaperRectPixels;
sub GetTitle;
sub HasPage;
sub IsPreview;
sub MapScreenSizeToDevice;
sub MapScreenSizeToPage;
sub MapScreenSizeToPageMargins;
sub MapScreenSizeToPaper;
sub OffsetLogicalOrigin;
sub OnBeginDocument;
sub OnBeginPrinting;
sub OnEndDocument;
sub OnEndPrinting;
sub OnPreparePrinting;
sub SetLogicalOrigin;
sub new;
}
package Wx::Process {
sub CloseOutput;
sub Destroy;
sub Detach;
sub Exists;
sub GetErrorStream;
sub GetInputStream;
sub GetOutputStream;
sub GetPid;
sub IsErrorAvailable;
sub IsInputAvailable;
sub IsInputOpened;
sub Kill;
sub OnTerminate;
sub Open;
sub Redirect;
sub new;
}
package Wx::ProcessEvent {
sub GetExitCode;
sub GetPid;
sub new;
}
package Wx::ProgressDialog {
sub Pulse;
sub Resume;
sub Show;
sub Update;
sub new;
}
package Wx::PropertySheetDialog {
sub Create;
sub CreateButtons;
sub GetBookCtrl;
sub GetInnerSizer;
sub GetSheetInnerBorder;
sub GetSheetOuterBorder;
sub GetSheetStyle;
sub LayoutDialog;
sub SetBookCtrl;
sub SetInnerSize;
sub SetSheetInnerBorder;
sub SetSheetOuterBorder;
sub SetSheetStyle;
sub newDefault;
sub newFull;
}
package Wx::RadioBox {
sub Create;
sub EnableItem;
sub FindString;
sub GetColumnCount;
sub GetItemFromPoint;
sub GetItemHelpText;
sub GetItemLabel;
sub GetItemToolTip;
sub GetRowCount;
sub GetSelection;
sub GetString;
sub GetStringSelection;
sub IsItemEnabled;
sub IsItemShown;
sub SetItemHelpText;
sub SetItemLabel;
sub SetItemToolTip;
sub SetSelection;
sub SetString;
sub SetStringSelection;
sub ShowItem;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RadioButton {
sub Create;
sub GetValue;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Rect {
sub CLONE;
sub CentreIn;
sub Contains;
sub ContainsPoint;
sub ContainsRect;
sub ContainsXY;
sub DESTROY;
sub Deflate;
sub GetBottom;
sub GetBottomLeft;
sub GetBottomRight;
sub GetHeight;
sub GetLeft;
sub GetPosition;
sub GetRight;
sub GetSize;
sub GetTop;
sub GetTopLeft;
sub GetTopRight;
sub GetWidth;
sub GetX;
sub GetY;
sub Inflate;
sub Inside;
sub Intersect;
sub Intersects;
sub IsEmpty;
sub Offset;
sub SetHeight;
sub SetPosition;
sub SetSize;
sub SetWidth;
sub SetX;
sub SetY;
sub Union;
sub height;
sub new;
sub newPP;
sub newPS;
sub newXYWH;
sub width;
sub x;
sub y;
}
package Wx::RegConfig {
sub new;
}
package Wx::Region {
sub CLONE;
sub Clear;
sub Contains;
sub ContainsPoint;
sub ContainsRect;
sub ContainsXY;
sub ContainsXYWH;
sub ConvertToBitmap;
sub DESTROY;
sub GetBox;
sub GetBoxXYWH;
sub Intersect;
sub IntersectRect;
sub IntersectRegion;
sub IntersectXYWH;
sub IsEmpty;
sub IsEqual;
sub Offset;
sub Subtract;
sub SubtractRect;
sub SubtractRegion;
sub Union;
sub UnionBitmap;
sub UnionBitmapOnly;
sub UnionRect;
sub UnionRegion;
sub UnionXYWH;
sub Xor;
sub XorRect;
sub XorRegion;
sub XorXYWH;
sub new;
sub newBitmap;
sub newBitmapOnly;
sub newEmpty;
sub newPP;
sub newPolygon;
sub newRect;
sub newXYWH;
}
package Wx::RichText {
sub SetEvents;
}
package Wx::RichTextAttr {
sub CLONE;
sub CreateFont;
sub DESTROY;
sub GetAlignment;
sub GetBackgroundColour;
sub GetBulletFont;
sub GetBulletName;
sub GetBulletNumber;
sub GetBulletStyle;
sub GetBulletText;
sub GetCharacterStyleName;
sub GetFlags;
sub GetFontAttributes;
sub GetFontFaceName;
sub GetFontSize;
sub GetFontStyle;
sub GetFontUnderlined;
sub GetFontWeight;
sub GetLeftIndent;
sub GetLeftSubIndent;
sub GetLineSpacing;
sub GetListStyleName;
sub GetParagraphSpacingAfter;
sub GetParagraphSpacingBefore;
sub GetParagraphStyleName;
sub GetRightIndent;
sub GetTabs;
sub GetTextColour;
sub GetURL;
sub HasAlignment;
sub HasBackgroundColour;
sub HasBulletName;
sub HasBulletNumber;
sub HasBulletStyle;
sub HasBulletText;
sub HasCharacterStyleName;
sub HasFont;
sub HasLeftIndent;
sub HasLineSpacing;
sub HasListStyleName;
sub HasPageBreak;
sub HasParagraphSpacingAfter;
sub HasParagraphSpacingBefore;
sub HasParagraphStyleName;
sub HasRightIndent;
sub HasTabs;
sub HasTextColour;
sub HasURL;
sub IsCharacterStyle;
sub IsDefault;
sub IsParagraphStyle;
sub SetAlignment;
sub SetBackgroundColour;
sub SetBulletFont;
sub SetBulletName;
sub SetBulletNumber;
sub SetBulletStyle;
sub SetBulletText;
sub SetCharacterStyleName;
sub SetFlags;
sub SetFontFaceName;
sub SetFontSize;
sub SetFontStyle;
sub SetFontUnderlined;
sub SetFontWeight;
sub SetLeftIndent;
sub SetLineSpacing;
sub SetListStyleName;
sub SetPageBreak;
sub SetParagraphSpacingAfter;
sub SetParagraphSpacingBefore;
sub SetParagraphStyleName;
sub SetRightIndent;
sub SetTabs;
sub SetTextColour;
sub SetURL;
sub new;
sub newAttr;
sub newAttrEx;
sub newCopy;
sub newDefault;
sub newFull;
}
package Wx::RichTextBuffer {
sub AddEventHandler;
sub AddHandler;
sub AddImage;
sub AddParagraph;
sub BatchingUndo;
sub BeginAlignment;
sub BeginBatchUndo;
sub BeginBold;
sub BeginCharacterStyle;
sub BeginFont;
sub BeginFontSize;
sub BeginItalic;
sub BeginLeftIndent;
sub BeginLineSpacing;
sub BeginListStyle;
sub BeginNumberedBullet;
sub BeginParagraphSpacing;
sub BeginParagraphStyle;
sub BeginRightIndent;
sub BeginStandardBullet;
sub BeginStyle;
sub BeginSuppressUndo;
sub BeginSymbolBullet;
sub BeginTextColour;
sub BeginURL;
sub BeginUnderline;
sub ClearListStyle;
sub EndAlignment;
sub EndAllStyles;
sub EndBatchUndo;
sub EndBold;
sub EndCharacterStyle;
sub EndFont;
sub EndFontSize;
sub EndItalic;
sub EndLeftIndent;
sub EndLineSpacing;
sub EndListStyle;
sub EndNumberedBullet;
sub EndParagraphSpacing;
sub EndParagraphStyle;
sub EndRightIndent;
sub EndStandardBullet;
sub EndStyle;
sub EndSuppressUndo;
sub EndSymbolBullet;
sub EndTextColour;
sub EndURL;
sub EndUnderline;
sub GetBasicStyle;
sub GetDefaultStyle;
sub GetRichTextAttrStyle;
sub GetRichTextAttrUncombinedStyle;
sub GetStyleSheet;
sub GetTextAttrExStyle;
sub GetTextAttrExStyleForRange;
sub GetTextAttrExUncombinedStyle;
sub InsertNewlineWithUndo;
sub InsertTextWithUndo;
sub PopStyleSheet;
sub PushStyleSheet;
sub SetBasicStyle;
sub SetBasicStyleEx;
sub SetBasicStyleRich;
sub SetStyle;
sub SetStyleEx;
sub SetStyleRich;
sub SetStyleSheet;
sub SuppressingUndo;
}
package Wx::RichTextCharacterStyleDefinition {
sub new;
}
package Wx::RichTextCtrl {
sub AddImage;
sub AddParagraph;
sub ApplyAlignmentToSelection;
sub ApplyBoldToSelection;
sub ApplyItalicToSelection;
sub ApplyStyle;
sub ApplyStyleSheet;
sub ApplyUnderlineToSelection;
sub BatchingUndo;
sub BeginAlignment;
sub BeginBatchUndo;
sub BeginBold;
sub BeginCharacterStyle;
sub BeginFont;
sub BeginFontSize;
sub BeginItalic;
sub BeginLeftIndent;
sub BeginLineSpacing;
sub BeginListStyle;
sub BeginNumberedBullet;
sub BeginParagraphSpacing;
sub BeginParagraphStyle;
sub BeginRightIndent;
sub BeginStandardBullet;
sub BeginStyle;
sub BeginSuppressUndo;
sub BeginSymbolBullet;
sub BeginTextColour;
sub BeginURL;
sub BeginUnderline;
sub CanDeleteSelection;
sub ClearListStyle;
sub Create;
sub DeleteSelectedContent;
sub DeleteSelection;
sub EndAlignment;
sub EndAllStyles;
sub EndBatchUndo;
sub EndBold;
sub EndCharacterStyle;
sub EndFont;
sub EndFontSize;
sub EndItalic;
sub EndLeftIndent;
sub EndLineSpacing;
sub EndListStyle;
sub EndNumberedBullet;
sub EndParagraphSpacing;
sub EndParagraphStyle;
sub EndRightIndent;
sub EndStandardBullet;
sub EndStyle;
sub EndSuppressUndo;
sub EndSymbolBullet;
sub EndTextColour;
sub EndURL;
sub EndUnderline;
sub ExtendSelection;
sub FindNextWordPosition;
sub GetAdjustedCaretPosition;
sub GetBasicStyle;
sub GetBuffer;
sub GetCaretPosition;
sub GetCaretPositionForDefaultStyle;
sub GetCaretPositionForIndex;
sub GetDefaultStyleEx;
sub GetDelayedLayoutThreshold;
sub GetFilename;
sub GetFirstVisiblePoint;
sub GetFirstVisiblePosition;
sub GetInternalSelectionRange;
sub GetLogicalPoint;
sub GetPhysicalPoint;
sub GetRichTextAttrStyle;
sub GetRichTextAttrStyleForRange;
sub GetRichTextAttrUncombinedStyle;
sub GetSelectionRange;
sub GetStyleSheet;
sub GetTextAttrExStyle;
sub GetTextAttrExStyleForRange;
sub GetTextAttrExUncombinedStyle;
sub GetTextAttrStyle;
sub GetTextAttrUncombinedStyle;
sub HasCAEx;
sub HasCARich;
sub HasCharacterAttributes;
sub HasPAEx;
sub HasPARich;
sub HasParagraphAttributes;
sub HasSelection;
sub IsDefaultStyleShowing;
sub IsPositionVisible;
sub IsSelectionAligned;
sub IsSelectionBold;
sub IsSelectionItalics;
sub IsSelectionUnderlined;
sub LayoutContent;
sub MoveCaret;
sub MoveCaretBack;
sub MoveCaretForward;
sub MoveDown;
sub MoveEnd;
sub MoveHome;
sub MoveLeft;
sub MoveRight;
sub MoveToLineEnd;
sub MoveToLineStart;
sub MoveToParagraphEnd;
sub MoveToParagraphStart;
sub MoveUp;
sub Newline;
sub PageDown;
sub PageUp;
sub PopStyleSheet;
sub PositionCaret;
sub PushStyleSheet;
sub ScrollIntoView;
sub SelectNone;
sub SelectWord;
sub SetAndShowDefaultStyle;
sub SetBasicStyle;
sub SetBasicStyleEx;
sub SetBasicStyleRich;
sub SetCaretPosition;
sub SetCaretPositionForDefaultStyle;
sub SetDefaultStyleToCursorStyle;
sub SetDelayedLayoutThreshold;
sub SetFilename;
sub SetInternalSelectionRange;
sub SetSelectionRange;
sub SetStyle;
sub SetStyleEx;
sub SetStyleExExFromTo;
sub SetStyleExExRange;
sub SetStyleExFromTo;
sub SetStyleExRange;
sub SetStyleFromTo;
sub SetStyleRange;
sub SetStyleSheet;
sub SuppressingUndo;
sub WordLeft;
sub WordRight;
sub WriteImage;
sub WriteImageBitmap;
sub WriteImageFile;
sub WriteImageImage;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextEvent {
sub GetFlags;
sub GetNewStyleSheet;
sub GetOldStyleSheet;
sub SetFlags;
sub SetNewStyleSheet;
sub SetOldStyleSheet;
}
package Wx::RichTextFileHandler {
sub CanHandle;
sub CanLoad;
sub CanSave;
sub GetEncoding;
sub GetExtension;
sub GetName;
sub GetType;
sub IsVisible;
sub LoadFile;
sub SaveFile;
sub SetEncoding;
sub SetExtension;
sub SetName;
sub SetType;
sub SetVisible;
}
package Wx::RichTextFormattingDialog {
sub AddPageId;
sub ApplyStyle;
sub Create;
sub GetAttributes;
sub GetDialogStyleDefinition;
sub GetImageList;
sub GetStyle;
sub GetStyleDefinition;
sub GetStyleSheet;
sub SetAttributes;
sub SetImageList;
sub SetShowToolTips;
sub SetStyle;
sub SetStyleDefinition;
sub ShowToolTips;
sub UpdateDisplay;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextHTMLHandler {
sub ClearTemporaryImageLocations;
sub DeleteTemporaryImages;
sub GetFontSizeMapping;
sub GetTempDir;
sub GetTemporaryImageLocations;
sub SetFileCounter;
sub SetFontSizeMapping;
sub SetTempDir;
sub SetTemporaryImageLocations;
sub new;
}
package Wx::RichTextHeaderFooterData {
sub CLONE;
sub Clear;
sub DESTROY;
sub GetFont;
sub GetFooterMargin;
sub GetFooterText;
sub GetHeaderMargin;
sub GetHeaderText;
sub GetShowOnFirstPage;
sub GetText;
sub GetTextColour;
sub SetFont;
sub SetFooterText;
sub SetHeaderText;
sub SetMargins;
sub SetShowOnFirstPage;
sub SetText;
sub SetTextColour;
sub new;
sub newCopy;
sub newDefault;
}
package Wx::RichTextListStyleDefinition {
sub CombineWithParagraphStyle;
sub Copy;
sub FindLevelForIndent;
sub GetCombinedStyle;
sub GetCombinedStyleForLevel;
sub GetLevelAttributes;
sub GetLevelCount;
sub IsNumbered;
sub SetAttributes;
sub SetLevelAttributes;
sub new;
}
package Wx::RichTextParagraphStyleDefinition {
sub Copy;
sub GetNextStyle;
sub SetNextStyle;
sub new;
}
package Wx::RichTextPrinting {
sub CLONE;
sub DESTROY;
sub GetFooterText;
sub GetHeaderFooterData;
sub GetHeaderText;
sub GetPageSetupData;
sub GetParentWindow;
sub GetPreviewRect;
sub GetPrintData;
sub GetTitle;
sub PageSetup;
sub PreviewBuffer;
sub PreviewFile;
sub PrintBuffer;
sub PrintFile;
sub SetFooterText;
sub SetHeaderFooterData;
sub SetHeaderFooterFont;
sub SetHeaderFooterTextColour;
sub SetHeaderText;
sub SetPageSetupData;
sub SetParentWindow;
sub SetPreviewRect;
sub SetPrintData;
sub SetShowOnFirstPage;
sub SetTitle;
sub new;
}
package Wx::RichTextPrintout {
sub CLONE;
sub CalculateScaling;
sub DESTROY;
sub GetHeaderFooterData;
sub GetRichTextBuffer;
sub HasPage;
sub OnBeginDocument;
sub OnPreparePrinting;
sub OnPrintPage;
sub SetHeaderFooterData;
sub SetMargins;
sub SetRichTextBuffer;
sub new;
}
package Wx::RichTextRange {
sub CLONE;
sub Contains;
sub DESTROY;
sub GetEnd;
sub GetLength;
sub GetStart;
sub IsOutside;
sub IsWithin;
sub LimitTo;
sub SetEnd;
sub SetRange;
sub SetStart;
sub new;
sub newCopy;
sub newDefault;
sub newFromTo;
}
package Wx::RichTextStyleComboCtrl {
sub Create;
sub GetRichTextCtrl;
sub GetStyleSheet;
sub SetRichTextCtrl;
sub SetStyleSheet;
sub UpdateStyles;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleDefinition {
sub CLONE;
sub Copy;
sub DESTROY;
sub Eq;
sub GetBaseStyle;
sub GetDescription;
sub GetName;
sub GetStyle;
sub GetStyleMergedWithBase;
sub SetBaseStyle;
sub SetDescription;
sub SetName;
sub SetStyle;
}
package Wx::RichTextStyleListBox {
sub ApplyStyle;
sub ConvertTenthsMMToPixels;
sub Create;
sub CreateHTML;
sub GetApplyOnSelection;
sub GetIndexForStyle;
sub GetRichTextCtrl;
sub GetStyle;
sub GetStyleSheet;
sub GetStyleType;
sub SetApplyOnSelection;
sub SetRichTextCtrl;
sub SetStyleSelection;
sub SetStyleSheet;
sub SetStyleType;
sub UpdateStyles;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleListCtrl {
sub Create;
sub GetRichTextCtrl;
sub GetStyleChoice;
sub GetStyleListBox;
sub GetStyleSheet;
sub GetStyleType;
sub SetRichTextCtrl;
sub SetStyleSheet;
sub SetStyleType;
sub StyleIndexToType;
sub StyleTypeToIndex;
sub UpdateStyles;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleOrganiserDialog {
sub ApplyStyle;
sub Create;
sub GetFlags;
sub GetRestartNumbering;
sub GetRichTextCtrl;
sub GetSelectedStyle;
sub GetSelectedStyleDefinition;
sub GetStyleSheet;
sub SetFlags;
sub SetRestartNumbering;
sub SetRichTextCtrl;
sub SetShowToolTips;
sub SetStyleSheet;
sub ShowToolTips;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleSheet {
sub AddCharacterStyle;
sub AddListStyle;
sub AddParagraphStyle;
sub AddStyle;
sub AppendSheet;
sub CLONE;
sub Copy;
sub DESTROY;
sub DeleteStyles;
sub FindCharacterStyle;
sub FindListStyle;
sub FindParagraphStyle;
sub FindStyle;
sub GetCharacterStyle;
sub GetCharacterStyleCount;
sub GetDescription;
sub GetListStyle;
sub GetListStyleCount;
sub GetName;
sub GetNextSheet;
sub GetParagraphStyle;
sub GetParagraphStyleCount;
sub GetPreviousSheet;
sub InsertSheet;
sub RemoveCharacterStyle;
sub RemoveListStyle;
sub RemoveParagraphStyle;
sub RemoveStyle;
sub SetDescription;
sub SetName;
sub SetNextSheet;
sub SetPreviousSheet;
sub Unlink;
sub new;
}
package Wx::RichTextXMLHandler {
sub new;
}
package Wx::SashEvent {
sub GetDragRect;
sub GetDragStatus;
sub GetEdge;
sub new;
}
package Wx::SashWindow {
sub Create;
sub GetMaximumSizeX;
sub GetMaximumSizeY;
sub GetMinimumSizeX;
sub GetMinimumSizeY;
sub GetSashVisible;
sub SetMaximumSizeX;
sub SetMaximumSizeY;
sub SetMinimumSizeX;
sub SetMinimumSizeY;
sub SetSashVisible;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ScintillaTextCtrl {
sub AddRefDocument;
sub AddText;
sub AddTextRaw;
sub Allocate;
sub AnnotationClearAll;
sub AnnotationGetLines;
sub AnnotationGetStyle;
sub AnnotationGetStyleOffset;
sub AnnotationGetStyles;
sub AnnotationGetText;
sub AnnotationGetVisible;
sub AnnotationSetStyle;
sub AnnotationSetStyleOffset;
sub AnnotationSetStyles;
sub AnnotationSetText;
sub AnnotationSetVisible;
sub AppendText;
sub AppendTextRaw;
sub AutoCompActive;
sub AutoCompCancel;
sub AutoCompComplete;
sub AutoCompGetAutoHide;
sub AutoCompGetCancelAtStart;
sub AutoCompGetChooseSingle;
sub AutoCompGetCurrent;
sub AutoCompGetDropRestOfWord;
sub AutoCompGetIgnoreCase;
sub AutoCompGetMaxHeight;
sub AutoCompGetMaxWidth;
sub AutoCompGetSeparator;
sub AutoCompGetTypeSeparator;
sub AutoCompPosStart;
sub AutoCompSelect;
sub AutoCompSetAutoHide;
sub AutoCompSetCancelAtStart;
sub AutoCompSetChooseSingle;
sub AutoCompSetDropRestOfWord;
sub AutoCompSetFillUps;
sub AutoCompSetIgnoreCase;
sub AutoCompSetMaxHeight;
sub AutoCompSetMaxWidth;
sub AutoCompSetSeparator;
sub AutoCompSetTypeSeparator;
sub AutoCompShow;
sub AutoCompStops;
sub BackTab;
sub BeginUndoAction;
sub BraceBadLight;
sub BraceHighlight;
sub BraceMatch;
sub CallTipActive;
sub CallTipCancel;
sub CallTipPosAtStart;
sub CallTipSetBackground;
sub CallTipSetForeground;
sub CallTipSetForegroundHighlight;
sub CallTipSetHighlight;
sub CallTipShow;
sub CallTipUseStyle;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub Cancel;
sub CharLeft;
sub CharLeftExtend;
sub CharLeftRectExtend;
sub CharRight;
sub CharRightExtend;
sub CharRightRectExtend;
sub ChooseCaretX;
sub Clear;
sub ClearAll;
sub ClearDocumentStyle;
sub ClearRegisteredImages;
sub CmdKeyAssign;
sub CmdKeyClear;
sub CmdKeyClearAll;
sub Colourise;
sub ConvertEOLs;
sub Copy;
sub CopyRange;
sub CopyText;
sub CreateDocument;
sub Cut;
sub DelLineLeft;
sub DelLineRight;
sub DelWordLeft;
sub DelWordRight;
sub DeleteBack;
sub DeleteBackNotLine;
sub DoDragOver;
sub DoDropText;
sub DocLineFromVisible;
sub DocumentEnd;
sub DocumentEndExtend;
sub DocumentStart;
sub DocumentStartExtend;
sub EditToggleOvertype;
sub EmptyUndoBuffer;
sub EndUndoAction;
sub EnsureCaretVisible;
sub EnsureVisible;
sub EnsureVisibleEnforcePolicy;
sub FindColumn;
sub FindText;
sub FormFeed;
sub FormatRange;
sub GetAnchor;
sub GetBackSpaceUnIndents;
sub GetBufferedDraw;
sub GetCaretForeground;
sub GetCaretLineBackAlpha;
sub GetCaretLineBackground;
sub GetCaretLineVisible;
sub GetCaretPeriod;
sub GetCaretSticky;
sub GetCaretWidth;
sub GetCharAt;
sub GetCodePage;
sub GetColumn;
sub GetControlCharSymbol;
sub GetCurrentLine;
sub GetCurrentPos;
sub GetDocPointer;
sub GetEOLMode;
sub GetEdgeColour;
sub GetEdgeColumn;
sub GetEdgeMode;
sub GetEndAtLastLine;
sub GetEndStyled;
sub GetFirstVisibleLine;
sub GetFoldExpanded;
sub GetFoldLevel;
sub GetFoldParent;
sub GetHighlightGuide;
sub GetIndent;
sub GetIndentationGuides;
sub GetIndicatorCurrent;
sub GetIndicatorValue;
sub GetLastChild;
sub GetLastKeydownProcessed;
sub GetLayoutCache;
sub GetLength;
sub GetLexer;
sub GetLine;
sub GetLineCount;
sub GetLineEndPosition;
sub GetLineIndentPosition;
sub GetLineIndentation;
sub GetLineSelEndPosition;
sub GetLineSelStartPosition;
sub GetLineState;
sub GetLineVisible;
sub GetMarginLeft;
sub GetMarginMask;
sub GetMarginRight;
sub GetMarginSensitive;
sub GetMarginType;
sub GetMarginWidth;
sub GetMaxLineState;
sub GetModEventMask;
sub GetModify;
sub GetMouseDownCaptures;
sub GetMouseDwellTime;
sub GetOvertype;
sub GetPasteConvertEndings;
sub GetPrintColourMode;
sub GetPrintMagnification;
sub GetPrintWrapMode;
sub GetProperty;
sub GetPropertyExpanded;
sub GetPropertyInt;
sub GetReadOnly;
sub GetSTCCursor;
sub GetSTCFocus;
sub GetScrollWidth;
sub GetSearchFlags;
sub GetSelAlpha;
sub GetSelectedText;
sub GetSelection;
sub GetSelectionEnd;
sub GetSelectionMode;
sub GetSelectionStart;
sub GetStatus;
sub GetStyleAt;
sub GetStyleBits;
sub GetStyleBitsNeeded;
sub GetTabIndents;
sub GetTabWidth;
sub GetTargetEnd;
sub GetTargetStart;
sub GetText;
sub GetTextLength;
sub GetTextRange;
sub GetTwoPhaseDraw;
sub GetUndoCollection;
sub GetUseAntiAliasing;
sub GetUseHorizontalScrollBar;
sub GetUseTabs;
sub GetUseVerticalScrollBar;
sub GetViewEOL;
sub GetViewWhiteSpace;
sub GetWrapMode;
sub GetWrapStartIndent;
sub GetWrapVisualFlags;
sub GetWrapVisualFlagsLocation;
sub GetXOffset;
sub GetZoom;
sub GotoLine;
sub GotoPos;
sub HideLines;
sub HideSelection;
sub Home;
sub HomeDisplay;
sub HomeDisplayExtend;
sub HomeExtend;
sub HomeRectExtend;
sub HomeWrap;
sub HomeWrapExtend;
sub IndicatorAllOnFor;
sub IndicatorClearRange;
sub IndicatorEnd;
sub IndicatorFillRange;
sub IndicatorGetAlpha;
sub IndicatorGetForeground;
sub IndicatorGetStyle;
sub IndicatorGetUnder;
sub IndicatorSetAlpha;
sub IndicatorSetForeground;
sub IndicatorSetStyle;
sub IndicatorSetUnder;
sub IndicatorStart;
sub IndicatorValueAt;
sub InsertText;
sub InsertTextRaw;
sub LineCopy;
sub LineCut;
sub LineDelete;
sub LineDownExtend;
sub LineDownRectExtend;
sub LineDuplicate;
sub LineEnd;
sub LineEndDisplay;
sub LineEndDisplayExtend;
sub LineEndExtend;
sub LineEndRectExtend;
sub LineEndWrap;
sub LineEndWrapExtend;
sub LineFromPosition;
sub LineLength;
sub LineScroll;
sub LineScrollDown;
sub LineScrollUp;
sub LineTranspose;
sub LineUpExtend;
sub LineUpRectExtend;
sub LinesJoin;
sub LinesOnScreen;
sub LinesSplit;
sub LoadFile;
sub LowerCase;
sub MarkerAdd;
sub MarkerAddSet;
sub MarkerDefine;
sub MarkerDefineBitmap;
sub MarkerDelete;
sub MarkerDeleteAll;
sub MarkerDeleteHandle;
sub MarkerGet;
sub MarkerLineFromHandle;
sub MarkerNext;
sub MarkerPrevious;
sub MarkerSetAlpha;
sub MarkerSetBackground;
sub MarkerSetForeground;
sub MoveCaretInsideView;
sub NewLine;
sub PageDown;
sub PageDownExtend;
sub PageDownRectExtend;
sub PageUp;
sub PageUpExtend;
sub PageUpRectExtend;
sub ParaDown;
sub ParaDownExtend;
sub ParaUp;
sub ParaUpExtend;
sub Paste;
sub PointFromPosition;
sub PositionAfter;
sub PositionBefore;
sub PositionFromLine;
sub PositionFromPoint;
sub PositionFromPointClose;
sub Redo;
sub RegisterImage;
sub ReleaseDocument;
sub ReplaceSelection;
sub ReplaceTarget;
sub ReplaceTargetRE;
sub SaveFile;
sub ScrollToColumn;
sub ScrollToLine;
sub SearchAnchor;
sub SearchInTarget;
sub SearchNext;
sub SearchPrev;
sub SelectAll;
sub SelectionDuplicate;
sub SelectionIsRectangle;
sub SetAnchor;
sub SetBackSpaceUnIndents;
sub SetBufferedDraw;
sub SetCaretForeground;
sub SetCaretLineBack;
sub SetCaretLineBackAlpha;
sub SetCaretLineBackground;
sub SetCaretLineVisible;
sub SetCaretPeriod;
sub SetCaretSticky;
sub SetCaretWidth;
sub SetCharsDefault;
sub SetCodePage;
sub SetControlCharSymbol;
sub SetCurrentPos;
sub SetDocPointer;
sub SetEOLMode;
sub SetEdgeColour;
sub SetEdgeColumn;
sub SetEdgeMode;
sub SetEmptySelection;
sub SetEndAtLastLine;
sub SetFoldExpanded;
sub SetFoldFlags;
sub SetFoldLevel;
sub SetFoldMarginColour;
sub SetFoldMarginHiColour;
sub SetHScrollBar;
sub SetHighlightGuide;
sub SetHotspotActiveBackground;
sub SetHotspotActiveForeground;
sub SetHotspotActiveUnderline;
sub SetHotspotSingleLine;
sub SetIndent;
sub SetIndentationGuides;
sub SetIndicatorCurrent;
sub SetIndicatorValue;
sub SetKeyWords;
sub SetLastKeydownProcessed;
sub SetLayoutCache;
sub SetLexer;
sub SetLexerLanguage;
sub SetLineIndentation;
sub SetLineState;
sub SetMarginLeft;
sub SetMarginMask;
sub SetMarginRight;
sub SetMarginSensitive;
sub SetMarginType;
sub SetMarginWidth;
sub SetMargins;
sub SetModEventMask;
sub SetMouseDownCaptures;
sub SetMouseDwellTime;
sub SetOvertype;
sub SetPasteConvertEndings;
sub SetPrintColourMode;
sub SetPrintMagnification;
sub SetPrintWrapMode;
sub SetProperty;
sub SetReadOnly;
sub SetSTCCursor;
sub SetSTCFocus;
sub SetSavePoint;
sub SetScrollWidth;
sub SetSearchFlags;
sub SetSelAlpha;
sub SetSelBackground;
sub SetSelForeground;
sub SetSelection;
sub SetSelectionEnd;
sub SetSelectionMode;
sub SetSelectionStart;
sub SetStatus;
sub SetStyleBits;
sub SetStyleBytes;
sub SetStyling;
sub SetTabIndents;
sub SetTabWidth;
sub SetTargetEnd;
sub SetTargetStart;
sub SetText;
sub SetTwoPhaseDraw;
sub SetUndoCollection;
sub SetUseAntiAliasing;
sub SetUseHorizontalScrollBar;
sub SetUseTabs;
sub SetUseVerticalScrollBar;
sub SetVScrollBar;
sub SetViewEOL;
sub SetViewWhiteSpace;
sub SetVisiblePolicy;
sub SetWhitespaceBackground;
sub SetWhitespaceChars;
sub SetWhitespaceForeground;
sub SetWordChars;
sub SetWrapMode;
sub SetWrapStartIndent;
sub SetWrapVisualFlags;
sub SetWrapVisualFlagsLocation;
sub SetXCaretPolicy;
sub SetXOffset;
sub SetYCaretPolicy;
sub SetZoom;
sub ShowLines;
sub StartRecord;
sub StartStyling;
sub StopRecord;
sub StutteredPageDown;
sub StutteredPageDownExtend;
sub StutteredPageUp;
sub StutteredPageUpExtend;
sub StyleClearAll;
sub StyleResetDefault;
sub StyleSetBackground;
sub StyleSetBold;
sub StyleSetCase;
sub StyleSetChangeable;
sub StyleSetCharacterSet;
sub StyleSetEOLFilled;
sub StyleSetFaceName;
sub StyleSetFont;
sub StyleSetFontAttr;
sub StyleSetFontEncoding;
sub StyleSetForeground;
sub StyleSetHotSpot;
sub StyleSetItalic;
sub StyleSetSize;
sub StyleSetSpec;
sub StyleSetUnderline;
sub StyleSetVisible;
sub Tab;
sub TargetFromSelection;
sub TextHeight;
sub TextWidth;
sub ToggleCaretSticky;
sub ToggleFold;
sub Undo;
sub UpperCase;
sub UsePopUp;
sub UserListShow;
sub VCHome;
sub VCHomeExtend;
sub VCHomeRectExtend;
sub VCHomeWrap;
sub VCHomeWrapExtend;
sub VisibleFromDocLine;
sub WordEndPosition;
sub WordLeft;
sub WordLeftEnd;
sub WordLeftEndExtend;
sub WordLeftExtend;
sub WordPartLeft;
sub WordPartLeftExtend;
sub WordPartRight;
sub WordPartRightExtend;
sub WordRight;
sub WordRightEnd;
sub WordRightEndExtend;
sub WordRightExtend;
sub WordStartPosition;
sub WrapCount;
sub ZoomIn;
sub ZoomOut;
sub new;
}
package Wx::ScintillaTextEvent {
sub GetAlt;
sub GetControl;
sub GetDragAllowMove;
sub GetDragResult;
sub GetDragText;
sub GetFoldLevelNow;
sub GetFoldLevelPrev;
sub GetKey;
sub GetLParam;
sub GetLength;
sub GetLine;
sub GetLinesAdded;
sub GetListType;
sub GetMargin;
sub GetMessage;
sub GetModificationType;
sub GetModifiers;
sub GetPosition;
sub GetShift;
sub GetText;
sub GetWParam;
sub GetX;
sub GetY;
sub SetDragAllowMove;
sub SetDragResult;
sub SetDragText;
sub SetFoldLevelNow;
sub SetFoldLevelPrev;
sub SetKey;
sub SetLParam;
sub SetLength;
sub SetLine;
sub SetLinesAdded;
sub SetListType;
sub SetMargin;
sub SetMessage;
sub SetModificationType;
sub SetModifiers;
sub SetPosition;
sub SetText;
sub SetWParam;
sub SetX;
sub SetY;
}
package Wx::ScreenDC {
sub EndDrawingOnTop;
sub StartDrawingOnTop;
sub StartDrawingOnTopRect;
sub StartDrawingOnTopWindow;
sub new;
}
package Wx::ScrollBar {
sub Create;
sub GetPageSize;
sub GetRange;
sub GetThumbPosition;
sub GetThumbSize;
sub SetPageSize;
sub SetScrollbar;
sub SetThumbPosition;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ScrollEvent {
sub GetOrientation;
sub GetPosition;
}
package Wx::ScrollWinEvent {
sub GetOrientation;
sub GetPosition;
sub new;
}
package Wx::ScrolledWindow {
sub CalcScrolledPosition;
sub CalcUnscrolledPosition;
sub Create;
sub DoPrepareDC;
sub EnableScrolling;
sub GetScrollPixelsPerUnit;
sub GetViewStart;
sub GetVirtualSize;
sub IsRetained;
sub PrepareDC;
sub Scroll;
sub SetScrollRate;
sub SetScrollbars;
sub SetTargetWindow;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SearchCtrl {
sub Create;
sub GetDescriptiveText;
sub GetMenu;
sub IsCancelButtonVisible;
sub IsSearchButtonVisible;
sub SetDescriptiveText;
sub SetMenu;
sub ShowCancelButton;
sub ShowSearchButton;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SetCursorEvent {
sub GetCursor;
sub GetX;
sub GetY;
sub HasCursor;
sub SetCursor;
sub new;
}
package Wx::SimpleHelpProvider {
sub new;
}
package Wx::SimpleHtmlListBox {
sub Append;
sub AppendData;
sub AppendString;
sub AppendStrings;
sub Clear;
sub Create;
sub Delete;
sub GetCount;
sub GetSelection;
sub GetString;
sub SetSelection;
sub SetString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SingleChoiceDialog {
sub GetSelection;
sub GetSelectionClientData;
sub GetStringSelection;
sub SetSelection;
sub new;
}
package Wx::SingleInstanceChecker {
sub CLONE;
sub Create;
sub DESTROY;
sub IsAnotherRunning;
sub new;
}
package Wx::Size {
sub CLONE;
sub DESTROY;
sub DecTo;
sub GetHeight;
sub GetWidth;
sub IncTo;
sub IsFullySpecified;
sub Scale;
sub Set;
sub SetDefaults;
sub SetHeight;
sub SetWidth;
sub height;
sub new;
sub width;
sub x;
sub y;
}
package Wx::SizeEvent {
sub GetRect;
sub GetSize;
sub new;
}
package Wx::Sizer {
sub Add;
sub AddSizer;
sub AddSpace;
sub AddSpacer0;
sub AddSpacer;
sub AddStretchSpacer0;
sub AddStretchSpacer;
sub AddWindow;
sub CalcMin;
sub Clear;
sub DeleteWindows;
sub Destroy;
sub Detach;
sub DetachNth;
sub DetachSizer;
sub DetachWindow;
sub Fit;
sub FitInside;
sub GetChildren;
sub GetContainingWindow;
sub GetItem;
sub GetItemNth;
sub GetItemSizer;
sub GetItemWindow;
sub GetMinSize;
sub GetPosition;
sub GetSize;
sub Hide;
sub HideIndex;
sub HideSizer;
sub HideWindow;
sub Insert;
sub InsertSizer;
sub InsertSpace;
sub InsertSpacer0;
sub InsertSpacer;
sub InsertStretchSpacer0;
sub InsertStretchSpacer;
sub InsertWindow;
sub IsShown;
sub IsShownIndex;
sub IsShownSizer;
sub IsShownWindow;
sub Layout;
sub Prepend;
sub PrependSizer;
sub PrependSpace;
sub PrependSpacer0;
sub PrependSpacer;
sub PrependStretchSpacer0;
sub PrependStretchSpacer;
sub PrependWindow;
sub RecalcSizes;
sub Remove;
sub RemoveNth;
sub RemoveSizer;
sub Replace;
sub ReplaceIndex;
sub ReplaceSizer;
sub ReplaceWindow;
sub SetContainingWindow;
sub SetDimension;
sub SetItemMinSize;
sub SetItemMinSizeNth;
sub SetItemMinSizeSizer;
sub SetItemMinSizeWindow;
sub SetMinSize;
sub SetMinSizeSize;
sub SetMinSizeXY;
sub SetSizeHints;
sub SetVirtualSizeHints;
sub Show;
sub ShowIndex;
sub ShowSizer;
sub ShowWindow;
}
package Wx::SizerItem {
sub CalcMin;
sub DeleteWindows;
sub DetachSizer;
sub GetBorder;
sub GetFlag;
sub GetMinSize;
sub GetOption;
sub GetPosition;
sub GetProportion;
sub GetRatio;
sub GetRect;
sub GetSize;
sub GetSizer;
sub GetSpacer;
sub GetUserData;
sub GetWindow;
sub IsShown;
sub IsSizer;
sub IsSpacer;
sub IsWindow;
sub SetBorder;
sub SetDimension;
sub SetFlag;
sub SetInitSize;
sub SetMinSize;
sub SetMinSizeSize;
sub SetMinSizeWH;
sub SetOption;
sub SetProportion;
sub SetRatio;
sub SetRatioFloat;
sub SetRatioSize;
sub SetRatioWH;
sub SetSizer;
sub SetSpacer;
sub SetUserData;
sub SetWindow;
sub Show;
}
package Wx::Slider {
sub ClearSel;
sub ClearTicks;
sub Create;
sub GetLineSize;
sub GetMax;
sub GetMin;
sub GetPageSize;
sub GetSelEnd;
sub GetSelStart;
sub GetThumbLength;
sub GetTickFreq;
sub GetValue;
sub SetLineSize;
sub SetPageSize;
sub SetRange;
sub SetThumbLength;
sub SetTickFreq;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SockAddress {
sub CLONE;
sub Clear;
sub DESTROY;
sub Type;
}
package Wx::Socket::Event {
sub wxSOCKET_CONNECTION;
sub wxSOCKET_CONNECTION_FLAG;
sub wxSOCKET_INPUT;
sub wxSOCKET_INPUT_FLAG;
sub wxSOCKET_LOST;
sub wxSOCKET_LOST_FLAG;
sub wxSOCKET_OUTPUT;
sub wxSOCKET_OUTPUT_FLAG;
}
package Wx::SocketBase {
sub Close;
sub Destroy;
sub Discard;
sub Error;
sub GetFlags;
sub GetLocal;
sub GetPeer;
sub InterruptWait;
sub IsConnected;
sub IsData;
sub IsDisconnected;
sub LastCount;
sub LastError;
sub Notify;
sub Ok;
sub Peek;
sub Read;
sub ReadMsg;
sub RestoreState;
sub SaveState;
sub SetEventHandler;
sub SetFlags;
sub SetNotify;
sub SetTimeout;
sub Unread;
sub Wait;
sub WaitForLost;
sub WaitForRead;
sub WaitForWrite;
sub Write;
sub WriteMsg;
}
package Wx::SocketClient {
sub Connect;
sub new;
}
package Wx::SocketEvent {
sub GetSocket;
sub GetSocketEvent;
sub new;
}
package Wx::SocketServer {
sub Accept;
sub AcceptWith;
sub WaitForAccept;
sub new;
}
package Wx::Sound {
sub CLONE;
sub Create;
sub CreateData;
sub DESTROY;
sub IsOk;
sub Play;
sub Stop;
sub new;
sub newData;
sub newDefault;
sub newFile;
}
package Wx::SpinButton {
sub Create;
sub GetMax;
sub GetMin;
sub GetValue;
sub SetRange;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SpinCtrl {
sub Create;
sub GetMax;
sub GetMin;
sub GetValue;
sub SetRange;
sub SetSelection;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SpinEvent {
sub GetPosition;
sub SetPosition;
sub new;
}
package Wx::SplashScreen {
sub GetSplashStyle;
sub GetSplashWindow;
sub GetTimeout;
sub new;
}
package Wx::SplitterEvent {
sub GetSashPosition;
sub GetWindowBeingRemoved;
sub GetX;
sub GetY;
sub SetSashPosition;
sub new;
}
package Wx::SplitterWindow {
sub Create;
sub GetMinimumPaneSize;
sub GetSashGravity;
sub GetSashPosition;
sub GetSashSize;
sub GetSplitMode;
sub GetWindow1;
sub GetWindow2;
sub Initialize;
sub IsSplit;
sub ReplaceWindow;
sub SetFocusIgnoringChildren;
sub SetMinimumPaneSize;
sub SetSashGravity;
sub SetSashPosition;
sub SetSashSize;
sub SetSplitMode;
sub SplitHorizontally;
sub SplitVertically;
sub Unsplit;
sub UpdateSize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::StandardPaths {
sub Get;
sub GetConfigDir;
sub GetDataDir;
sub GetDocumentsDir;
sub GetExecutablePath;
sub GetLocalDataDir;
sub GetLocalizedResourcesDir;
sub GetPluginsDir;
sub GetResourcesDir;
sub GetTempDir;
sub GetUserConfigDir;
sub GetUserDataDir;
sub GetUserLocalDataDir;
}
package Wx::StaticBitmap {
sub GetBitmap;
sub GetIcon;
sub SetBitmap;
sub SetIcon;
sub new;
sub newBitmap;
sub newIcon;
}
package Wx::StaticBox {
sub Create;
sub new;
}
package Wx::StaticBoxSizer {
sub GetStaticBox;
sub new;
}
package Wx::StaticLine {
sub Create;
sub GetDefaultSize;
sub IsVertical;
sub new;
}
package Wx::StaticText {
sub Create;
sub Wrap;
sub new;
}
package Wx::StatusBar {
sub GetFieldRect;
sub GetFieldsCount;
sub GetStatusText;
sub PopStatusText;
sub PushStatusText;
sub SetFieldsCount;
sub SetMinHeight;
sub SetStatusStyles;
sub SetStatusText;
sub SetStatusWidths;
sub new;
}
package Wx::StdDialogButtonSizer {
sub AddButton;
sub GetAffirmativeButton;
sub GetApplyButton;
sub GetCancelButton;
sub GetHelpButton;
sub GetNegativeButton;
sub Realize;
sub SetAffirmativeButton;
sub SetCancelButton;
sub SetNegativeButton;
sub new;
}
package Wx::StopWatch {
sub CLONE;
sub DESTROY;
sub Pause;
sub Resume;
sub Start;
sub Time;
sub new;
}
package Wx::Stream {
sub TIEHANDLE;
}
package Wx::StyledTextCtrl {
sub AddRefDocument;
sub AddText;
sub AddTextRaw;
sub Allocate;
sub AppendText;
sub AppendTextRaw;
sub AutoCompActive;
sub AutoCompCancel;
sub AutoCompComplete;
sub AutoCompGetAutoHide;
sub AutoCompGetCancelAtStart;
sub AutoCompGetChooseSingle;
sub AutoCompGetCurrent;
sub AutoCompGetDropRestOfWord;
sub AutoCompGetIgnoreCase;
sub AutoCompGetMaxHeight;
sub AutoCompGetMaxWidth;
sub AutoCompGetSeparator;
sub AutoCompGetTypeSeparator;
sub AutoCompPosStart;
sub AutoCompSelect;
sub AutoCompSetAutoHide;
sub AutoCompSetCancelAtStart;
sub AutoCompSetChooseSingle;
sub AutoCompSetDropRestOfWord;
sub AutoCompSetFillUps;
sub AutoCompSetIgnoreCase;
sub AutoCompSetMaxHeight;
sub AutoCompSetMaxWidth;
sub AutoCompSetSeparator;
sub AutoCompSetTypeSeparator;
sub AutoCompShow;
sub AutoCompStops;
sub BackTab;
sub BeginUndoAction;
sub BraceBadLight;
sub BraceHighlight;
sub BraceMatch;
sub CallTipActive;
sub CallTipCancel;
sub CallTipPosAtStart;
sub CallTipSetBackground;
sub CallTipSetForeground;
sub CallTipSetForegroundHighlight;
sub CallTipSetHighlight;
sub CallTipShow;
sub CallTipUseStyle;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub Cancel;
sub CharLeft;
sub CharLeftExtend;
sub CharLeftRectExtend;
sub CharRight;
sub CharRightExtend;
sub CharRightRectExtend;
sub ChooseCaretX;
sub Clear;
sub ClearAll;
sub ClearDocumentStyle;
sub ClearRegisteredImages;
sub CmdKeyAssign;
sub CmdKeyClear;
sub CmdKeyClearAll;
sub CmdKeyExecute;
sub Colourise;
sub ConvertEOLs;
sub Copy;
sub CopyRange;
sub CopyText;
sub CreateDocument;
sub Cut;
sub DelLineLeft;
sub DelLineRight;
sub DelWordLeft;
sub DelWordRight;
sub DeleteBack;
sub DeleteBackNotLine;
sub DoDragOver;
sub DoDropText;
sub DocLineFromVisible;
sub DocumentEnd;
sub DocumentEndExtend;
sub DocumentStart;
sub DocumentStartExtend;
sub EditToggleOvertype;
sub EmptyUndoBuffer;
sub EndUndoAction;
sub EnsureCaretVisible;
sub EnsureVisible;
sub EnsureVisibleEnforcePolicy;
sub FindColumn;
sub FindText;
sub FormFeed;
sub FormatRange;
sub GetAnchor;
sub GetBackSpaceUnIndents;
sub GetBufferedDraw;
sub GetCaretForeground;
sub GetCaretLineBackAlpha;
sub GetCaretLineBackground;
sub GetCaretLineVisible;
sub GetCaretPeriod;
sub GetCaretSticky;
sub GetCaretWidth;
sub GetCharAt;
sub GetCodePage;
sub GetColumn;
sub GetControlCharSymbol;
sub GetCurrentLine;
sub GetCurrentPos;
sub GetDocPointer;
sub GetEOLMode;
sub GetEdgeColour;
sub GetEdgeColumn;
sub GetEdgeMode;
sub GetEndAtLastLine;
sub GetEndStyled;
sub GetFirstVisibleLine;
sub GetFoldExpanded;
sub GetFoldLevel;
sub GetFoldParent;
sub GetHighlightGuide;
sub GetIndent;
sub GetIndentationGuides;
sub GetLastChild;
sub GetLastKeydownProcessed;
sub GetLayoutCache;
sub GetLength;
sub GetLexer;
sub GetLine;
sub GetLineCount;
sub GetLineEndPosition;
sub GetLineIndentPosition;
sub GetLineIndentation;
sub GetLineSelEndPosition;
sub GetLineSelStartPosition;
sub GetLineState;
sub GetLineVisible;
sub GetMarginLeft;
sub GetMarginMask;
sub GetMarginRight;
sub GetMarginSensitive;
sub GetMarginType;
sub GetMarginWidth;
sub GetMaxLineState;
sub GetModEventMask;
sub GetModify;
sub GetMouseDownCaptures;
sub GetMouseDwellTime;
sub GetOvertype;
sub GetPasteConvertEndings;
sub GetPrintColourMode;
sub GetPrintMagnification;
sub GetPrintWrapMode;
sub GetProperty;
sub GetPropertyExpanded;
sub GetPropertyInt;
sub GetReadOnly;
sub GetSTCCursor;
sub GetSTCFocus;
sub GetScrollWidth;
sub GetSearchFlags;
sub GetSelAlpha;
sub GetSelectedText;
sub GetSelection;
sub GetSelectionEnd;
sub GetSelectionMode;
sub GetSelectionStart;
sub GetStatus;
sub GetStyleAt;
sub GetStyleBits;
sub GetStyleBitsNeeded;
sub GetTabIndents;
sub GetTabWidth;
sub GetTargetEnd;
sub GetTargetStart;
sub GetText;
sub GetTextLength;
sub GetTextRange;
sub GetTwoPhaseDraw;
sub GetUndoCollection;
sub GetUseAntiAliasing;
sub GetUseHorizontalScrollBar;
sub GetUseTabs;
sub GetUseVerticalScrollBar;
sub GetViewEOL;
sub GetViewWhiteSpace;
sub GetWrapMode;
sub GetWrapStartIndent;
sub GetWrapVisualFlags;
sub GetWrapVisualFlagsLocation;
sub GetXOffset;
sub GetZoom;
sub GotoLine;
sub GotoPos;
sub HideLines;
sub HideSelection;
sub Home;
sub HomeDisplay;
sub HomeDisplayExtend;
sub HomeExtend;
sub HomeRectExtend;
sub HomeWrap;
sub HomeWrapExtend;
sub IndicatorGetForeground;
sub IndicatorGetStyle;
sub IndicatorSetForeground;
sub IndicatorSetStyle;
sub InsertText;
sub InsertTextRaw;
sub LineCopy;
sub LineCut;
sub LineDelete;
sub LineDownExtend;
sub LineDownRectExtend;
sub LineDuplicate;
sub LineEnd;
sub LineEndDisplay;
sub LineEndDisplayExtend;
sub LineEndExtend;
sub LineEndRectExtend;
sub LineEndWrap;
sub LineEndWrapExtend;
sub LineFromPosition;
sub LineLength;
sub LineScroll;
sub LineScrollDown;
sub LineScrollUp;
sub LineTranspose;
sub LineUpExtend;
sub LineUpRectExtend;
sub LinesJoin;
sub LinesOnScreen;
sub LinesSplit;
sub LoadFile;
sub LowerCase;
sub MarkerAdd;
sub MarkerAddSet;
sub MarkerDefine;
sub MarkerDefineBitmap;
sub MarkerDelete;
sub MarkerDeleteAll;
sub MarkerDeleteHandle;
sub MarkerGet;
sub MarkerLineFromHandle;
sub MarkerNext;
sub MarkerPrevious;
sub MarkerSetAlpha;
sub MarkerSetBackground;
sub MarkerSetForeground;
sub MoveCaretInsideView;
sub NewLine;
sub PageDown;
sub PageDownExtend;
sub PageDownRectExtend;
sub PageUp;
sub PageUpExtend;
sub PageUpRectExtend;
sub ParaDown;
sub ParaDownExtend;
sub ParaUp;
sub ParaUpExtend;
sub Paste;
sub PointFromPosition;
sub PositionAfter;
sub PositionBefore;
sub PositionFromLine;
sub PositionFromPoint;
sub PositionFromPointClose;
sub Redo;
sub RegisterImage;
sub ReleaseDocument;
sub ReplaceSelection;
sub ReplaceTarget;
sub ReplaceTargetRE;
sub SaveFile;
sub ScrollToColumn;
sub ScrollToLine;
sub SearchAnchor;
sub SearchInTarget;
sub SearchNext;
sub SearchPrev;
sub SelectAll;
sub SelectionDuplicate;
sub SelectionIsRectangle;
sub SetAnchor;
sub SetBackSpaceUnIndents;
sub SetBufferedDraw;
sub SetCaretForeground;
sub SetCaretLineBack;
sub SetCaretLineBackAlpha;
sub SetCaretLineBackground;
sub SetCaretLineVisible;
sub SetCaretPeriod;
sub SetCaretSticky;
sub SetCaretWidth;
sub SetCharsDefault;
sub SetCodePage;
sub SetControlCharSymbol;
sub SetCurrentPos;
sub SetDocPointer;
sub SetEOLMode;
sub SetEdgeColour;
sub SetEdgeColumn;
sub SetEdgeMode;
sub SetEndAtLastLine;
sub SetFoldExpanded;
sub SetFoldFlags;
sub SetFoldLevel;
sub SetFoldMarginColour;
sub SetFoldMarginHiColour;
sub SetHScrollBar;
sub SetHighlightGuide;
sub SetHotspotActiveBackground;
sub SetHotspotActiveForeground;
sub SetHotspotActiveUnderline;
sub SetHotspotSingleLine;
sub SetIndent;
sub SetIndentationGuides;
sub SetKeyWords;
sub SetLastKeydownProcessed;
sub SetLayoutCache;
sub SetLexer;
sub SetLexerLanguage;
sub SetLineIndentation;
sub SetLineState;
sub SetMarginLeft;
sub SetMarginMask;
sub SetMarginRight;
sub SetMarginSensitive;
sub SetMarginType;
sub SetMarginWidth;
sub SetMargins;
sub SetModEventMask;
sub SetMouseDownCaptures;
sub SetMouseDwellTime;
sub SetOvertype;
sub SetPasteConvertEndings;
sub SetPrintColourMode;
sub SetPrintMagnification;
sub SetPrintWrapMode;
sub SetProperty;
sub SetReadOnly;
sub SetSTCCursor;
sub SetSTCFocus;
sub SetSavePoint;
sub SetScrollWidth;
sub SetSearchFlags;
sub SetSelAlpha;
sub SetSelBackground;
sub SetSelForeground;
sub SetSelection;
sub SetSelectionEnd;
sub SetSelectionMode;
sub SetSelectionStart;
sub SetStatus;
sub SetStyleBits;
sub SetStyleBytes;
sub SetStyling;
sub SetTabIndents;
sub SetTabWidth;
sub SetTargetEnd;
sub SetTargetStart;
sub SetText;
sub SetTwoPhaseDraw;
sub SetUndoCollection;
sub SetUseAntiAliasing;
sub SetUseHorizontalScrollBar;
sub SetUseTabs;
sub SetUseVerticalScrollBar;
sub SetVScrollBar;
sub SetViewEOL;
sub SetViewWhiteSpace;
sub SetVisiblePolicy;
sub SetWhitespaceBackground;
sub SetWhitespaceChars;
sub SetWhitespaceForeground;
sub SetWordChars;
sub SetWrapMode;
sub SetWrapStartIndent;
sub SetWrapVisualFlags;
sub SetWrapVisualFlagsLocation;
sub SetXCaretPolicy;
sub SetXOffset;
sub SetYCaretPolicy;
sub SetZoom;
sub ShowLines;
sub StartRecord;
sub StartStyling;
sub StopRecord;
sub StutteredPageDown;
sub StutteredPageDownExtend;
sub StutteredPageUp;
sub StutteredPageUpExtend;
sub StyleClearAll;
sub StyleResetDefault;
sub StyleSetBackground;
sub StyleSetBold;
sub StyleSetCase;
sub StyleSetChangeable;
sub StyleSetCharacterSet;
sub StyleSetEOLFilled;
sub StyleSetFaceName;
sub StyleSetFont;
sub StyleSetFontAttr;
sub StyleSetFontEncoding;
sub StyleSetForeground;
sub StyleSetHotSpot;
sub StyleSetItalic;
sub StyleSetSize;
sub StyleSetSpec;
sub StyleSetUnderline;
sub StyleSetVisible;
sub Tab;
sub TargetFromSelection;
sub TextHeight;
sub TextWidth;
sub ToggleCaretSticky;
sub ToggleFold;
sub Undo;
sub UpperCase;
sub UsePopUp;
sub UserListShow;
sub VCHome;
sub VCHomeExtend;
sub VCHomeRectExtend;
sub VCHomeWrap;
sub VCHomeWrapExtend;
sub VisibleFromDocLine;
sub WordEndPosition;
sub WordLeft;
sub WordLeftEnd;
sub WordLeftEndExtend;
sub WordLeftExtend;
sub WordPartLeft;
sub WordPartLeftExtend;
sub WordPartRight;
sub WordPartRightExtend;
sub WordRight;
sub WordRightEnd;
sub WordRightEndExtend;
sub WordRightExtend;
sub WordStartPosition;
sub WrapCount;
sub ZoomIn;
sub ZoomOut;
sub new;
}
package Wx::StyledTextEvent {
sub GetAlt;
sub GetControl;
sub GetDragAllowMove;
sub GetDragResult;
sub GetDragText;
sub GetFoldLevelNow;
sub GetFoldLevelPrev;
sub GetKey;
sub GetLParam;
sub GetLength;
sub GetLine;
sub GetLinesAdded;
sub GetListType;
sub GetMargin;
sub GetMessage;
sub GetModificationType;
sub GetModifiers;
sub GetPosition;
sub GetShift;
sub GetText;
sub GetWParam;
sub GetX;
sub GetY;
sub SetDragAllowMove;
sub SetDragResult;
sub SetDragText;
sub SetFoldLevelNow;
sub SetFoldLevelPrev;
sub SetKey;
sub SetLParam;
sub SetLength;
sub SetLine;
sub SetLinesAdded;
sub SetListType;
sub SetMargin;
sub SetMessage;
sub SetModificationType;
sub SetModifiers;
sub SetPosition;
sub SetText;
sub SetWParam;
sub SetX;
sub SetY;
}
package Wx::SymbolPickerDialog {
sub Create;
sub GetFontName;
sub GetFromUnicode;
sub GetNormalTextFontName;
sub GetSymbol;
sub GetSymbolChar;
sub HasSelection;
sub SetFontName;
sub SetFromUnicode;
sub SetNormalTextFontName;
sub SetSymbol;
sub SetUnicodeMode;
sub UseNormalFont;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SysColourChangedEvent {
sub new;
}
package Wx::SystemOptions {
sub GetOption;
sub GetOptionInt;
sub HasOption;
sub IsFalse;
sub SetOption;
sub SetOptionInt;
}
package Wx::SystemSettings {
sub GetColour;
sub GetFont;
sub GetMetric;
sub GetScreenType;
sub GetSystemColour;
sub GetSystemFont;
sub GetSystemMetric;
}
package Wx::TGAHandler {
sub new;
}
package Wx::TIFFHandler {
sub new;
}
package Wx::TaskBarIcon {
sub Destroy;
sub IsIconInstalled;
sub IsOk;
sub PopupMenu;
sub RemoveIcon;
sub SetIcon;
sub new;
}
package Wx::TaskBarIconEvent {
sub new;
}
package Wx::TextAttr {
sub CLONE;
sub DESTROY;
sub GetAlignment;
sub GetBackgroundColour;
sub GetFlags;
sub GetFont;
sub GetLeftIndent;
sub GetLeftSubIndent;
sub GetRightIndent;
sub GetTabs;
sub GetTextColour;
sub HasAlignment;
sub HasBackgroundColour;
sub HasFlag;
sub HasFont;
sub HasLeftIndent;
sub HasRightIndent;
sub HasTabs;
sub HasTextColour;
sub IsDefault;
sub Merge;
sub SetAlignment;
sub SetBackgroundColour;
sub SetFlags;
sub SetFont;
sub SetLeftIndent;
sub SetRightIndent;
sub SetTabs;
sub SetTextColour;
sub new;
}
package Wx::TextAttrEx {
sub CLONE;
sub DESTROY;
sub GetBulletFont;
sub GetBulletName;
sub GetBulletNumber;
sub GetBulletStyle;
sub GetBulletText;
sub GetCharacterStyleName;
sub GetLineSpacing;
sub GetListStyleName;
sub GetOutlineLevel;
sub GetParagraphSpacingAfter;
sub GetParagraphSpacingBefore;
sub GetParagraphStyleName;
sub GetTextEffectFlags;
sub GetTextEffects;
sub GetURL;
sub HasBulletName;
sub HasBulletNumber;
sub HasBulletStyle;
sub HasBulletText;
sub HasCharacterStyleName;
sub HasLineSpacing;
sub HasListStyleName;
sub HasOutlineLevel;
sub HasPageBreak;
sub HasParagraphSpacingAfter;
sub HasParagraphSpacingBefore;
sub HasParagraphStyleName;
sub HasTextEffect;
sub HasTextEffects;
sub HasURL;
sub IsCharacterStyle;
sub IsDefault;
sub IsParagraphStyle;
sub SetBulletFont;
sub SetBulletName;
sub SetBulletNumber;
sub SetBulletStyle;
sub SetBulletText;
sub SetCharacterStyleName;
sub SetLineSpacing;
sub SetListStyleName;
sub SetOutlineLevel;
sub SetPageBreak;
sub SetParagraphSpacingAfter;
sub SetParagraphSpacingBefore;
sub SetParagraphStyleName;
sub SetTextEffectFlags;
sub SetTextEffects;
sub SetURL;
sub new;
sub newAttr;
sub newCopy;
sub newDefault;
}
package Wx::TextCtrl {
sub Create;
sub GetStyle;
sub GetTextAttrStyle;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TextCtrlBase {
sub AppendText;
sub CanCopy;
sub CanCut;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub ChangeValue;
sub Clear;
sub Copy;
sub Cut;
sub DiscardEdits;
sub EmulateKeyPress;
sub GetDefaultStyle;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetLineLength;
sub GetLineText;
sub GetNumberOfLines;
sub GetRange;
sub GetSelection;
sub GetStringSelection;
sub GetValue;
sub HitTest;
sub IsEditable;
sub IsEmpty;
sub IsModified;
sub IsMultiLine;
sub IsSingleLine;
sub LoadFile;
sub MarkDirty;
sub Paste;
sub PositionToXY;
sub Redo;
sub Remove;
sub Replace;
sub SaveFile;
sub SelectAll;
sub SetDefaultStyle;
sub SetEditable;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetMaxLength;
sub SetModified;
sub SetSelection;
sub SetStyle;
sub SetValue;
sub ShowPosition;
sub Undo;
sub WriteText;
sub XYToPosition;
}
package Wx::TextDataObject {
sub GetText;
sub GetTextLength;
sub SetText;
sub new;
}
package Wx::TextDropTarget {
sub new;
}
package Wx::TextEntryDialog {
sub GetValue;
sub SetValue;
sub ShowModal;
sub new;
}
package Wx::TextUrlEvent {
sub GetMouseEvent;
sub GetURLEnd;
sub GetURLStart;
}
package Wx::Thread {
sub IsMain;
}
package Wx::TimeSpan {
sub GetDays;
sub GetHours;
sub GetWeeks;
sub IsEqualTo;
sub IsLongerThan;
sub IsNegative;
sub IsNull;
sub IsPositive;
sub IsShorterThan;
sub new;
sub newFromHMS;
}
package Wx::Timer {
sub Destroy;
sub GetId;
sub GetInterval;
sub IsOneShot;
sub IsRunning;
sub SetOwner;
sub Start;
sub Stop;
sub newDefault;
sub newEH;
}
package Wx::TimerEvent {
sub GetInterval;
}
package Wx::TipProvider {
sub Destroy;
sub GetCurrentTip;
sub GetTip;
sub PreprocessTip;
sub SetCurrentTip;
sub new;
}
package Wx::ToggleButton {
sub Create;
sub GetValue;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ToolBar {
sub Create;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ToolBarBase {
sub AddCheckTool;
sub AddControl;
sub AddRadioTool;
sub AddSeparator;
sub AddTool;
sub AddToolLong;
sub AddToolNewLong;
sub AddToolNewShort;
sub AddToolShort;
sub ClearTools;
sub DeleteTool;
sub DeleteToolByPos;
sub Destroy;
sub EnableTool;
sub FindById;
sub FindControl;
sub FindToolForPosition;
sub GetMargins;
sub GetMaxCols;
sub GetMaxRows;
sub GetToolBitmapSize;
sub GetToolClientData;
sub GetToolEnabled;
sub GetToolLongHelp;
sub GetToolPacking;
sub GetToolPos;
sub GetToolSeparation;
sub GetToolShortHelp;
sub GetToolSize;
sub GetToolState;
sub GetToolsCount;
sub InsertControl;
sub InsertSeparator;
sub InsertTool;
sub InsertToolLong;
sub InsertToolNewLong;
sub Realize;
sub RemoveTool;
sub SetMargins;
sub SetMarginsSize;
sub SetMarginsXY;
sub SetMaxRowsCols;
sub SetRows;
sub SetToolBitmapSize;
sub SetToolClientData;
sub SetToolLongHelp;
sub SetToolPacking;
sub SetToolSeparation;
sub SetToolShortHelp;
sub ToggleTool;
}
package Wx::ToolBarToolBase {
sub CanBeToggled;
sub Destroy;
sub Enable;
sub GetBitmap1;
sub GetBitmap2;
sub GetBitmap;
sub GetClientData;
sub GetControl;
sub GetDisabledBitmap;
sub GetId;
sub GetKind;
sub GetLabel;
sub GetLongHelp;
sub GetNormalBitmap;
sub GetShortHelp;
sub GetStyle;
sub GetToolBar;
sub IsButton;
sub IsControl;
sub IsEnabled;
sub IsSeparator;
sub IsToggled;
sub SetBitmap1;
sub SetBitmap2;
sub SetClientData;
sub SetDisabledBitmap;
sub SetLabel;
sub SetLongHelp;
sub SetNormalBitmap;
sub SetShortHelp;
sub SetToggle;
sub Toggle;
}
package Wx::ToolTip {
sub Enable;
sub GetTip;
sub GetWindow;
sub SetDelay;
sub SetTip;
sub new;
}
package Wx::Toolbook {
sub Create;
sub GetToolBar;
sub Realize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TopLevelWindow {
sub CanSetTransparent;
sub EnableCloseButton;
sub GetDefaultItem;
sub GetIcon;
sub GetIcons;
sub GetTmpDefaultItem;
sub Iconize;
sub IsActive;
sub IsAlwaysMaximized;
sub IsFullScreen;
sub IsIconized;
sub IsMaximized;
sub Maximize;
sub RequestUserAttention;
sub SetDefaultItem;
sub SetIcon;
sub SetIcons;
sub SetShape;
sub SetTmpDefaultItem;
sub SetTransparent;
sub ShouldPreventAppExit;
sub ShowFullScreen;
}
package Wx::TreeCtrl {
sub AddRoot;
sub AppendItem;
sub AssignButtonsImageList;
sub AssignImageList;
sub AssignStateImageList;
sub Collapse;
sub CollapseAll;
sub CollapseAllChildren;
sub CollapseAndReset;
sub Create;
sub Delete;
sub DeleteAllItems;
sub DeleteChildren;
sub EditLabel;
sub EndEditLabel;
sub EnsureVisible;
sub Expand;
sub ExpandAll;
sub ExpandAllChildren;
sub GetBoundingRect;
sub GetChildrenCount;
sub GetCount;
sub GetEditControl;
sub GetFirstChild;
sub GetFirstVisibleItem;
sub GetImageList;
sub GetIndent;
sub GetItemBackgroundColour;
sub GetItemData;
sub GetItemFont;
sub GetItemImage;
sub GetItemParent;
sub GetItemText;
sub GetItemTextColour;
sub GetLastChild;
sub GetNextChild;
sub GetNextSibling;
sub GetNextVisible;
sub GetParent;
sub GetPlData;
sub GetPrevSibling;
sub GetPrevVisible;
sub GetRootItem;
sub GetSelection;
sub GetSelections;
sub GetStateImageList;
sub HitTest;
sub InsertItem;
sub InsertItemBef;
sub InsertItemPrev;
sub IsBold;
sub IsEmpty;
sub IsExpanded;
sub IsSelected;
sub IsVisible;
sub ItemHasChildren;
sub OnCompareItems;
sub PrependItem;
sub ScrollTo;
sub SelectItem;
sub SetImageList;
sub SetIndent;
sub SetItemBackgroundColour;
sub SetItemBold;
sub SetItemData;
sub SetItemDropHighlight;
sub SetItemFont;
sub SetItemHasChildren;
sub SetItemImage;
sub SetItemText;
sub SetItemTextColour;
sub SetPlData;
sub SetStateImageList;
sub SortChildren;
sub Toggle;
sub ToggleItemSelection;
sub Unselect;
sub UnselectAll;
sub UnselectItem;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TreeEvent {
sub GetItem;
sub GetKeyCode;
sub GetLabel;
sub GetOldItem;
sub GetPoint;
sub GetQuickBestSize;
sub IsEditCancelled;
sub SetQuickBestSize;
sub SetToolTip;
sub new;
}
package Wx::TreeItemData {
sub Destroy;
sub GetData;
sub GetId;
sub SetData;
sub SetId;
sub new;
}
package Wx::TreeItemId {
sub CLONE;
sub DESTROY;
sub IsOk;
sub tiid_spaceship;
}
package Wx::Treebook {
sub AddSubPage;
sub CollapseNode;
sub Create;
sub ExpandNode;
sub GetPageParent;
sub GetTreeCtrl;
sub InsertSubPage;
sub IsNodeExpanded;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TreebookEvent {
sub GetOldSelection;
sub GetSelection;
sub new;
}
package Wx::URLDataObject {
sub GetURL;
sub SetURL;
sub new;
}
package Wx::UpdateUIEvent {
sub CanUpdate;
sub Check;
sub Enable;
sub GetChecked;
sub GetEnabled;
sub GetMode;
sub GetSetChecked;
sub GetSetEnabled;
sub GetSetShown;
sub GetSetText;
sub GetShown;
sub GetText;
sub GetUpdateInterval;
sub ResetUpdateTime;
sub SetMode;
sub SetText;
sub SetUpdateInterval;
sub Show;
sub new;
}
package Wx::VListBox {
sub Clear;
sub Create;
sub DeselectAll;
sub GetFirstSelected;
sub GetItemCount;
sub GetMargins;
sub GetNextSelected;
sub GetSelectedCount;
sub GetSelection;
sub GetSelectionBackground;
sub HasMultipleSelection;
sub IsCurrent;
sub IsSelected;
sub Select;
sub SelectAll;
sub SelectRange;
sub SetItemCount;
sub SetMargins;
sub SetSelection;
sub SetSelectionBackground;
sub Toggle;
}
package Wx::VScrolledWindow {
sub Create;
sub GetFirstVisibleLine;
sub GetLastVisibleLine;
sub GetLineCount;
sub GetRowCount;
sub GetVisibleBegin;
sub GetVisibleEnd;
sub GetVisibleRowsBegin;
sub GetVisibleRowsEnd;
sub HitTest;
sub IsRowVisible;
sub IsVisible;
sub Layout;
sub RefreshAll;
sub RefreshLine;
sub RefreshLines;
sub RefreshRow;
sub RefreshRows;
sub ScrollLines;
sub ScrollPages;
sub ScrollRowPages;
sub ScrollRows;
sub ScrollToLine;
sub ScrollToRow;
sub SetLineCount;
sub SetRowCount;
}
package Wx::Validator {
sub GetWindow;
sub SetBellOnError;
sub SetWindow;
}
package Wx::Variant {
sub Append;
sub CLONE;
sub Clear;
sub ClearList;
sub DESTROY;
sub Delete;
sub GetArrayString;
sub GetBool;
sub GetChar;
sub GetCount;
sub GetDateTime;
sub GetDouble;
sub GetList;
sub GetLong;
sub GetString;
sub GetType;
sub GetWxObjectPtr;
sub Insert;
sub IsNull;
sub IsType;
sub IsValueKindOf;
sub MakeNull;
sub MakeString;
sub Member;
sub NullList;
sub SetBool;
sub SetChar;
sub SetDateTime;
sub SetDouble;
sub SetLong;
sub SetString;
sub SetVariant;
sub SetWxObjectPtr;
sub new;
}
package Wx::VideoMode {
sub CLONE;
sub DESTROY;
sub GetDepth;
sub GetHeight;
sub GetWidth;
sub IsOk;
sub Matches;
sub new;
}
package Wx::View {
sub Activate;
sub Close;
sub GetDocument;
sub GetDocumentManager;
sub GetFrame;
sub GetViewName;
sub OnActivateView;
sub OnChangeFilename;
sub OnClose;
sub OnCreate;
sub OnCreatePrintout;
sub OnUpdate;
sub SetDocument;
sub SetFrame;
sub SetViewName;
sub new;
}
package Wx::WinHelpController {
sub new;
}
package Wx::Window {
sub AcceptsFocus;
sub AcceptsFocusFromKeyboard;
sub CanSetTransparent;
sub CaptureMouse;
sub Center;
sub CenterOnParent;
sub CenterOnScreen;
sub Centre;
sub CentreOnParent;
sub CentreOnScreen;
sub ClearBackground;
sub ClientToScreen;
sub ClientToScreenPoint;
sub ClientToScreenXY;
sub Close;
sub ConvertDialogPointToPixels;
sub ConvertDialogSizeToPixels;
sub ConvertDialogToPixels;
sub ConvertPixelsPointToDialog;
sub ConvertPixelsSizeToDialog;
sub ConvertPixelsToDialog;
sub Create;
sub CreateWindowFromHWND;
sub Destroy;
sub DestroyChildren;
sub Disable;
sub DragAcceptFiles;
sub Enable;
sub FindFocus;
sub FindWindow;
sub FindWindowById;
sub FindWindowByLabel;
sub FindWindowByName;
sub Fit;
sub FitInside;
sub Freeze;
sub GetAcceleratorTable;
sub GetBackgroundColour;
sub GetBackgroundStyle;
sub GetBestSize;
sub GetCaret;
sub GetCharHeight;
sub GetCharWidth;
sub GetChildren;
sub GetClientSize;
sub GetClientSizeWH;
sub GetClientSizeXY;
sub GetConstraints;
sub GetContainingSizer;
sub GetCursor;
sub GetDropTarget;
sub GetEffectiveMinSize;
sub GetEventHandler;
sub GetExtraStyle;
sub GetFont;
sub GetForegroundColour;
sub GetGrandParent;
sub GetHandle;
sub GetHelpText;
sub GetId;
sub GetLabel;
sub GetLayoutDirection;
sub GetMaxSize;
sub GetMinSize;
sub GetName;
sub GetParent;
sub GetPopupMenuSelectionFromUser;
sub GetPosition;
sub GetPositionXY;
sub GetRect;
sub GetScreenPosition;
sub GetScreenPositionXY;
sub GetScreenRect;
sub GetScrollPos;
sub GetScrollRange;
sub GetScrollThumb;
sub GetSize;
sub GetSizeWH;
sub GetSizer;
sub GetTextExtent;
sub GetTitle;
sub GetToolTip;
sub GetUpdateRegion;
sub GetValidator;
sub GetVirtualSize;
sub GetVirtualSizeWH;
sub GetWindowBorderSize;
sub GetWindowStyleFlag;
sub GetWindowVariant;
sub HasCapture;
sub HasFlag;
sub HasMultiplePages;
sub HasScrollbar;
sub HasTransparentBackground;
sub Hide;
sub InheritAttributes;
sub InvalidateBestSize;
sub IsBeingDeleted;
sub IsDoubleBuffered;
sub IsEnabled;
sub IsExposed;
sub IsExposedPoint;
sub IsExposedRect;
sub IsExposedXYWH;
sub IsFrozen;
sub IsRetained;
sub IsShown;
sub IsShownOnScreen;
sub IsTopLevel;
sub Layout;
sub LineDown;
sub LineUp;
sub Lower;
sub MakeModal;
sub Move;
sub MoveAfterInTabOrder;
sub MoveBeforeInTabOrder;
sub MovePoint;
sub MoveXY;
sub Navigate;
sub NewControlId;
sub NextControlId;
sub PageDown;
sub PageUp;
sub PopEventHandler;
sub PopupMenu;
sub PopupMenuPoint;
sub PopupMenuXY;
sub PrevControlId;
sub PushEventHandler;
sub Raise;
sub Refresh;
sub RefreshRect;
sub ReleaseMouse;
sub RemoveEventHandler;
sub Reparent;
sub ScreenToClient;
sub ScreenToClientPoint;
sub ScreenToClientXY;
sub ScrollLines;
sub ScrollPages;
sub ScrollWindow;
sub SetAcceleratorTable;
sub SetAutoLayout;
sub SetBackgroundColour;
sub SetBackgroundStyle;
sub SetBestFittingSize;
sub SetCaret;
sub SetClientSize;
sub SetClientSizeSize;
sub SetClientSizeWH;
sub SetConstraints;
sub SetContainingSizer;
sub SetCursor;
sub SetDropTarget;
sub SetEventHandler;
sub SetExtraStyle;
sub SetFocus;
sub SetFont;
sub SetForegroundColour;
sub SetHelpText;
sub SetHelpTextForId;
sub SetId;
sub SetInitialSize;
sub SetLabel;
sub SetLayoutDirection;
sub SetMaxSize;
sub SetMinSize;
sub SetName;
sub SetOwnBackgroundColour;
sub SetOwnFont;
sub SetOwnForegroundColour;
sub SetScrollPos;
sub SetScrollbar;
sub SetSize;
sub SetSizeHints;
sub SetSizeRect;
sub SetSizeSize;
sub SetSizeWH;
sub SetSizeXYWHF;
sub SetSizer;
sub SetSizerAndFit;
sub SetTitle;
sub SetToolTip;
sub SetToolTipString;
sub SetToolTipTip;
sub SetTransparent;
sub SetValidator;
sub SetVirtualSize;
sub SetVirtualSizeHints;
sub SetVirtualSizeSize;
sub SetVirtualSizeXY;
sub SetWindowStyle;
sub SetWindowStyleFlag;
sub SetWindowVariant;
sub ShouldInheritColours;
sub Show;
sub Thaw;
sub ToggleWindowStyle;
sub TransferDataFromWindow;
sub TransferDataToWindow;
sub Update;
sub UpdateWindowUI;
sub Validate;
sub WarpPointer;
sub new;
sub newDefault;
sub newFull;
}
package Wx::WindowCreateEvent {
sub GetWindow;
sub new;
}
package Wx::WindowDC {
sub new;
}
package Wx::WindowDestroyEvent {
sub GetWindow;
sub new;
}
package Wx::WindowDisabler {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::WindowUpdateLocker {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::Wizard {
sub Create;
sub FitToPage;
sub GetBitmap;
sub GetCurrentPage;
sub GetPageAreaSizer;
sub GetPageSize;
sub HasNextPage;
sub HasPrevPage;
sub RunWizard;
sub SetBitmap;
sub SetBorder;
sub SetPageSize;
sub new;
sub newEmpty;
sub newFull;
}
package Wx::WizardEvent {
sub GetDirection;
sub GetPage;
}
package Wx::WizardPage {
sub Create;
sub GetBitmap;
sub GetNext;
sub GetPrev;
sub new;
sub newEmpty;
sub newFull;
}
package Wx::WizardPageSimple {
sub Chain;
sub SetNext;
sub SetPrev;
sub new;
}
package Wx::XPMHandler {
sub new;
}
package Wx::XmlDocument {
sub GetFileEncoding;
sub GetRoot;
sub GetVersion;
sub IsOk;
sub SetFileEncoding;
sub SetRoot;
sub SetVersion;
}
package Wx::XmlNode {
sub AddChild;
sub AddProperty;
sub DeleteProperty;
sub Destroy;
sub GetChildren;
sub GetContent;
sub GetName;
sub GetNext;
sub GetParent;
sub GetPropVal;
sub GetProperties;
sub GetType;
sub HasProp;
sub InsertChild;
sub RemoveChild;
sub SetChildren;
sub SetContent;
sub SetName;
sub SetNext;
sub SetParent;
sub SetProperties;
sub SetType;
sub new;
}
package Wx::XmlProperty {
sub Destroy;
sub GetName;
sub GetNext;
sub GetValue;
sub SetName;
sub SetNext;
sub SetValue;
sub new;
}
package Wx::XmlResource {
sub AddHandler;
sub AddSubclassFactory;
sub AttachUnknownControl;
sub CLONE;
sub ClearHandlers;
sub CompareVersion;
sub DESTROY;
sub GetDomain;
sub GetFlags;
sub GetVersion;
sub GetXMLID;
sub GetXRCID;
sub InitAllHandlers;
sub Load;
sub LoadBitmap;
sub LoadDialog;
sub LoadFrame2;
sub LoadFrame;
sub LoadIcon;
sub LoadMenu;
sub LoadMenuBar;
sub LoadMenuBarOnParent;
sub LoadOnDialog;
sub LoadOnFrame;
sub LoadOnPanel;
sub LoadPanel;
sub LoadToolBar;
sub SetDomain;
sub SetFlags;
sub Unload;
sub new;
}
package Wx::XmlResourceHandler {
sub AddStyle;
sub AddWindowStyles;
sub CreateChildren;
sub CreateChildrenPrivately;
sub CreateResFromNode;
sub GetBitmap;
sub GetBool;
sub GetClass;
sub GetColour;
sub GetDimension;
sub GetFont;
sub GetID;
sub GetIcon;
sub GetInstance;
sub GetLong;
sub GetName;
sub GetNode;
sub GetNodeContent;
sub GetParamNode;
sub GetParamValue;
sub GetParent;
sub GetParentAsWindow;
sub GetPosition;
sub GetResource;
sub GetSize;
sub GetStyle;
sub GetText;
sub HasParam;
sub IsOfClass;
sub SetupWindow;
}
package Wx::XmlSubclassFactory {
sub new;
}
package Wx::ZipFSHandler {
sub new;
}
package Wx::_App {
sub Start;
sub new;
}
package XML::LibXML {
sub AUTOLOAD;
sub DISABLE_THREAD_SUPPORT;
sub HAVE_READER;
sub HAVE_SCHEMAS;
sub HAVE_STRUCT_ERRORS;
sub HAVE_THREAD_SUPPORT;
sub INIT_THREAD_SUPPORT;
sub LIBXML_DOTTED_VERSION;
sub LIBXML_RUNTIME_VERSION;
sub LIBXML_VERSION;
sub _CLONE;
sub _default_catalog;
sub _dump_registry;
sub _end_push;
sub _end_sax_push;
sub _externalEntityLoader;
sub _leaked_nodes;
sub _parse_fh;
sub _parse_file;
sub _parse_html_fh;
sub _parse_html_file;
sub _parse_html_string;
sub _parse_sax_fh;
sub _parse_sax_file;
sub _parse_sax_string;
sub _parse_sax_xml_chunk;
sub _parse_string;
sub _parse_xml_chunk;
sub _processXIncludes;
sub _push;
sub _start_push;
sub decodeFromUTF8;
sub encodeToUTF8;
sub export_GDOME;
sub import_GDOME;
sub load_catalog;
}
package XML::LibXML::Attr {
sub _setNamespace;
sub getNextSibling;
sub getOwnerElement;
sub getParentNode;
sub getPreviousSibling;
sub getValue;
sub isId;
sub name;
sub new;
sub nextSibling;
sub ownerElement;
sub parentElement;
sub previousSibling;
sub serialize;
sub serializeContent;
sub setValue;
sub toString;
sub value;
}
package XML::LibXML::CDATASection {
sub new;
}
package XML::LibXML::Comment {
sub new;
}
package XML::LibXML::Common {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXML::Document {
sub URI;
sub _setDocumentElement;
sub _toString;
sub adoptNode;
sub cloneNode;
sub compression;
sub createAttribute;
sub createAttributeNS;
sub createCDATASection;
sub createComment;
sub createDTD;
sub createDocument;
sub createDocumentFragment;
sub createElement;
sub createElementNS;
sub createEntityReference;
sub createExternalSubset;
sub createInternalSubset;
sub createPI;
sub createProcessingInstruction;
sub createRawElement;
sub createRawElementNS;
sub createTextNode;
sub documentElement;
sub documentURI;
sub encoding;
sub externalSubset;
sub getDocumentElement;
sub getElementById;
sub getElementsById;
sub getEncoding;
sub getVersion;
sub importNode;
sub indexElements;
sub internalSubset;
sub is_valid;
sub new;
sub removeExternalSubset;
sub removeInternalSubset;
sub serialize_html;
sub setCompression;
sub setEncoding;
sub setExternalSubset;
sub setInternalSubset;
sub setStandalone;
sub setURI;
sub setVersion;
sub standalone;
sub toFH;
sub toFile;
sub toStringHTML;
sub validate;
sub version;
sub xmlEncoding;
sub xmlStandalone;
sub xmlVersion;
}
package XML::LibXML::DocumentFragment {
sub addNewChild;
sub appendText;
sub appendTextNode;
sub new;
}
package XML::LibXML::Dtd {
sub getPublicId;
sub getSystemId;
sub new;
sub parse_string;
sub parse_uri;
sub publicId;
sub systemId;
}
package XML::LibXML::Element {
sub _getAttribute;
sub _getAttributeNS;
sub _getNamespaceDeclURI;
sub _setAttribute;
sub _setAttributeNS;
sub _setNamespace;
sub addNewChild;
sub appendText;
sub appendTextChild;
sub appendTextNode;
sub getAttributeNode;
sub getAttributeNodeNS;
sub hasAttribute;
sub hasAttributeNS;
sub new;
sub removeAttribute;
sub removeAttributeNS;
sub removeAttributeNode;
sub setAttributeNode;
sub setAttributeNodeNS;
sub setNamespaceDeclPrefix;
sub setNamespaceDeclURI;
sub tagName;
}
package XML::LibXML::HashTable {
sub DESTROY;
sub new;
}
package XML::LibXML::InputCallback {
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
}
package XML::LibXML::LibError {
sub code;
sub context_and_column;
sub domain;
sub file;
sub int1;
sub int2;
sub level;
sub line;
sub message;
sub num1;
sub num2;
sub str1;
sub str2;
sub str3;
}
package XML::LibXML::Namespace {
sub DESTROY;
sub _isEqual;
sub declaredPrefix;
sub declaredURI;
sub getData;
sub getLocalName;
sub getType;
sub getValue;
sub href;
sub localname;
sub new;
sub nodeType;
sub nodeValue;
sub value2;
sub value;
}
package XML::LibXML::Node {
sub DESTROY;
sub _attributes;
sub _childNodes;
sub _find;
sub _findnodes;
sub _getChildrenByTagNameNS;
sub _toStringC14N;
sub addChild;
sub addSibling;
sub appendChild;
sub baseURI;
sub cloneNode;
sub firstChild;
sub firstNonBlankChild;
sub getAttributes;
sub getChildnodes;
sub getData;
sub getFirstChild;
sub getLastChild;
sub getLocalName;
sub getName;
sub getNamespace;
sub getNamespaceURI;
sub getNamespaces;
sub getNextSibling;
sub getOwner;
sub getOwnerDocument;
sub getOwnerElement;
sub getParentNode;
sub getPrefix;
sub getPreviousSibling;
sub getType;
sub getValue;
sub hasAttributes;
sub hasChildNodes;
sub insertAfter;
sub insertBefore;
sub isEqual;
sub isSameNode;
sub lastChild;
sub line_number;
sub localNS;
sub localName;
sub localNamespace;
sub localname;
sub lookupNamespacePrefix;
sub lookupNamespaceURI;
sub namespaceURI;
sub namespaces;
sub nextNonBlankSibling;
sub nextSibling;
sub nodeName;
sub nodePath;
sub nodeType;
sub nodeValue;
sub normalize;
sub ownerDocument;
sub ownerNode;
sub parentNode;
sub prefix;
sub previousNonBlankSibling;
sub previousSibling;
sub removeChild;
sub removeChildNodes;
sub replaceChild;
sub replaceNode;
sub serialize;
sub setBaseURI;
sub setName;
sub setNodeName;
sub setRawName;
sub string_value;
sub textContent;
sub toString;
sub to_literal;
sub to_number;
sub unbindNode;
sub unlink;
sub unlinkNode;
}
package XML::LibXML::PI {
sub _setData;
}
package XML::LibXML::ParserContext {
sub DESTROY;
}
package XML::LibXML::Pattern {
sub DESTROY;
sub _compilePattern;
sub matchesNode;
}
package XML::LibXML::Reader {
sub _DESTROY;
sub _close;
sub _getParserProp;
sub _newForDOM;
sub _newForFd;
sub _newForFile;
sub _newForIO;
sub _newForString;
sub _nodePath;
sub _preservePattern;
sub _setParserProp;
sub _setRelaxNG;
sub _setRelaxNGFile;
sub _setXSD;
sub _setXSDFile;
sub attributeCount;
sub baseURI;
sub byteConsumed;
sub columnNumber;
sub copyCurrentNode;
sub depth;
sub document;
sub encoding;
sub finish;
sub getAttribute;
sub getAttributeHash;
sub getAttributeNo;
sub getAttributeNs;
sub hasAttributes;
sub hasValue;
sub isDefault;
sub isEmptyElement;
sub isNamespaceDecl;
sub isValid;
sub lineNumber;
sub localName;
sub lookupNamespace;
sub matchesPattern;
sub moveToAttribute;
sub moveToAttributeNo;
sub moveToAttributeNs;
sub moveToElement;
sub moveToFirstAttribute;
sub moveToNextAttribute;
sub name;
sub namespaceURI;
sub next;
sub nextElement;
sub nextPatternMatch;
sub nextSibling;
sub nextSiblingElement;
sub nodeType;
sub prefix;
sub preserveNode;
sub quoteChar;
sub read;
sub readAttributeValue;
sub readInnerXml;
sub readOuterXml;
sub readState;
sub skipSiblings;
sub standalone;
sub value;
sub xmlLang;
sub xmlVersion;
}
package XML::LibXML::RegExp {
sub DESTROY;
sub _compile;
sub isDeterministic;
sub matches;
}
package XML::LibXML::RelaxNG {
sub DESTROY;
sub parse_buffer;
sub parse_document;
sub parse_location;
sub validate;
}
package XML::LibXML::Schema {
sub DESTROY;
sub parse_buffer;
sub parse_location;
sub validate;
}
package XML::LibXML::Text {
sub appendData;
sub data;
sub deleteData;
sub insertData;
sub new;
sub replaceData;
sub setData;
sub substringData;
}
package XML::LibXML::XPathContext {
sub DESTROY;
sub _find;
sub _findnodes;
sub _free_node_pool;
sub getContextNode;
sub getContextPosition;
sub getContextSize;
sub getVarLookupData;
sub getVarLookupFunc;
sub lookupNs;
sub new;
sub registerFunctionNS;
sub registerNs;
sub registerVarLookupFunc;
sub setContextNode;
sub setContextPosition;
sub setContextSize;
}
package XML::LibXML::XPathExpression {
sub DESTROY;
sub new;
}
package XML::LibXSLT {
sub HAVE_EXSLT;
sub INIT_THREAD_SUPPORT;
sub LIBXSLT_DOTTED_VERSION;
sub LIBXSLT_RUNTIME_VERSION;
sub LIBXSLT_VERSION;
sub _parse_stylesheet;
sub _parse_stylesheet_file;
sub debug_callback;
sub decodeFromUTF8;
sub encodeToUTF8;
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
sub max_depth;
sub register_function;
sub xinclude_default;
}
package XML::LibXSLT::Stylesheet {
sub DESTROY;
sub _output_string;
sub media_type;
sub output_encoding;
sub output_fh;
sub output_file;
sub transform;
sub transform_file;
}
package XML::LibXSLT::StylesheetWrapper {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXSLT::TransformContext {
sub stylesheet;
}
package XML::Parser::Expat {
sub DefaultCurrent;
sub Do_External_Parse;
sub ElementIndex;
sub ErrorString;
sub FreeEncoding;
sub GenerateNSName;
sub GetBase;
sub GetCurrentByteIndex;
sub GetCurrentColumnNumber;
sub GetCurrentLineNumber;
sub GetErrorCode;
sub GetSpecifiedAttributeCount;
sub LoadEncoding;
sub OriginalString;
sub ParseDone;
sub ParsePartial;
sub ParseStream;
sub ParseString;
sub ParserCreate;
sub ParserFree;
sub ParserRelease;
sub PositionContext;
sub RecognizedString;
sub SetAttListDeclHandler;
sub SetBase;
sub SetCharacterDataHandler;
sub SetCommentHandler;
sub SetDefaultHandler;
sub SetDoctypeHandler;
sub SetElementDeclHandler;
sub SetEndCdataHandler;
sub SetEndDoctypeHandler;
sub SetEndElementHandler;
sub SetEntityDeclHandler;
sub SetExtEntFinishHandler;
sub SetExternalEntityRefHandler;
sub SetNotationDeclHandler;
sub SetProcessingInstructionHandler;
sub SetStartCdataHandler;
sub SetStartElementHandler;
sub SetUnparsedEntityDeclHandler;
sub SetXMLDeclHandler;
sub SkipUntil;
sub UnsetAllHandlers;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package autobox {
sub _enter() ;
sub _leave() ;
sub _scope() ;
}
package autobox::universal {
sub type($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package metaclass {
sub blessed($) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package namespace::clean::deleted::MooseX::Types {
sub blessed($) ;
sub reftype($) ;
sub subname;
}
package namespace::clean::deleted::MooseX::Types::Base {
sub blessed($) ;
}
package namespace::clean::deleted::MooseX::Types::CheckedUtilExports {
sub subname;
}
package namespace::clean::deleted::Parse::Method::Signatures {
sub blessed($) ;
}
package namespace::clean::deleted::Parse::Method::Signatures::ParamCollection {
sub blessed($) ;
}
package namespace::clean::deleted::TryCatch {
sub CALLER(;$) ;
sub EVAL(;$) ;
sub HERE() ;
sub SCOPE(;$) ;
sub SUB(;$) ;
sub UP(;$) ;
sub localize($$;$) ;
sub unwind;
sub want_at(;$) ;
}
package re {
sub install;
sub is_regexp($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub _handle;
sub create;
sub detach;
sub equal;
sub error;
sub get_stack_size;
sub is_detached;
sub is_joinable;
sub is_running;
sub join;
sub kill;
sub list;
sub new;
sub object;
sub self;
sub set_stack_size;
sub set_thread_exit_only;
sub tid;
sub wantarray;
sub yield;
}
package threads::shared {
sub _id(\[$@%]) ;
sub _refcnt(\[$@%]) ;
sub bless($;$) ;
sub blessed($) ;
sub cond_broadcast(\[$@%]) ;
sub cond_signal(\[$@%]) ;
sub cond_timedwait(\[$@%]$;\[$@%]) ;
sub cond_wait(\[$@%];\[$@%]) ;
sub is_shared(\[$@%]) ;
sub refaddr($) ;
sub reftype($) ;
sub share(\[$@%]) ;
}
package threads::shared::tie {
sub EXISTS;
sub EXTEND;
sub FIRSTKEY;
sub NEXTKEY;
sub POP;
sub PUSH;
sub SHIFT;
sub STORESIZE;
sub UNSHIFT;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
package version::vxs {
sub VCMP;
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
}
